
012_USB_HID_Mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e65c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800e7f0  0800e7f0  0000f7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edc8  0800edc8  0001032c  2**0
                  CONTENTS
  4 .ARM          00000008  0800edc8  0800edc8  0000fdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edd0  0800edd0  0001032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edd0  0800edd0  0000fdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800edd4  0800edd4  0000fdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000032c  20000000  0800edd8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001032c  2**0
                  CONTENTS
 10 .bss          00000a24  20000330  20000330  00010330  2**3
                  ALLOC
 11 ._user_heap_stack 00001204  20000d54  20000d54  00010330  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001032c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001135a  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003417  00000000  00000000  000216b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00024ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ada  00000000  00000000  00025960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002079d  00000000  00000000  0002643a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015144  00000000  00000000  00046bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0c27  00000000  00000000  0005bd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c942  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f20  00000000  00000000  0010c988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001118a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000330 	.word	0x20000330
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e7d4 	.word	0x0800e7d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000334 	.word	0x20000334
 80001cc:	0800e7d4 	.word	0x0800e7d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <send_hid_report>:
  * @brief  Send HID report.
  * @param  mouse_hid: Pointer to the mouse HID structure.
  * @retval None
  */
static void send_hid_report(mouseHID *mouse_hid)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)mouse_hid, sizeof(*mouse_hid));
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <send_hid_report+0x1c>)
 8000d02:	f007 fcc7 	bl	8008694 <USBD_HID_SendReport>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000045c 	.word	0x2000045c

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  double gyroz = 0.0;
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	e9c7 2302 	strd	r2, r3, [r7, #8]
  double gyroy = 0.0;
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 fe31 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f84b 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 f8e9 	bl	8000f10 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d3e:	f000 f8a7 	bl	8000e90 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000d42:	f008 fd9b 	bl	800987c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000d46:	f000 fa87 	bl	8001258 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    read_gyro_data(&mpu6050_data, &gyroz, &gyroy);
 8000d4a:	463a      	mov	r2, r7
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	4619      	mov	r1, r3
 8000d52:	481d      	ldr	r0, [pc, #116]	@ (8000dc8 <main+0xb4>)
 8000d54:	f000 fc36 	bl	80015c4 <read_gyro_data>

    r_btn = read_btn_state(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin);
 8000d58:	2108      	movs	r1, #8
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5e:	f000 f967 	bl	8001030 <read_btn_state>
 8000d62:	4603      	mov	r3, r0
 8000d64:	75fb      	strb	r3, [r7, #23]
    l_btn = read_btn_state(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin);
 8000d66:	2102      	movs	r1, #2
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6c:	f000 f960 	bl	8001030 <read_btn_state>
 8000d70:	4603      	mov	r3, r0
 8000d72:	75bb      	strb	r3, [r7, #22]

    btn_pad_value = (r_btn << 1) | l_btn;
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	b25a      	sxtb	r2, r3
 8000d7a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	757b      	strb	r3, [r7, #21]

    /* software button de-bouncing */
    btn_pad_value = handle_mouse_button(btn_pad_value);
 8000d84:	7d7b      	ldrb	r3, [r7, #21]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f90a 	bl	8000fa0 <handle_mouse_button>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	757b      	strb	r3, [r7, #21]

    update_btn_state(&mouse_hid, btn_pad_value);
 8000d90:	7d7b      	ldrb	r3, [r7, #21]
 8000d92:	4619      	mov	r1, r3
 8000d94:	480d      	ldr	r0, [pc, #52]	@ (8000dcc <main+0xb8>)
 8000d96:	f000 f95b 	bl	8001050 <update_btn_state>

    move_cursor(gyroz, gyroy, &mouse_hid);
 8000d9a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d9e:	ed97 6b00 	vldr	d6, [r7]
 8000da2:	480a      	ldr	r0, [pc, #40]	@ (8000dcc <main+0xb8>)
 8000da4:	eeb0 1a46 	vmov.f32	s2, s12
 8000da8:	eef0 1a66 	vmov.f32	s3, s13
 8000dac:	eeb0 0a47 	vmov.f32	s0, s14
 8000db0:	eef0 0a67 	vmov.f32	s1, s15
 8000db4:	f000 f980 	bl	80010b8 <move_cursor>
    send_hid_report(&mouse_hid);
 8000db8:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <main+0xb8>)
 8000dba:	f7ff ff9b 	bl	8000cf4 <send_hid_report>

    HAL_Delay(REPORT_DELAY_MS);
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f000 fe50 	bl	8001a64 <HAL_Delay>
    read_gyro_data(&mpu6050_data, &gyroz, &gyroy);
 8000dc4:	bf00      	nop
 8000dc6:	e7c0      	b.n	8000d4a <main+0x36>
 8000dc8:	200003a0 	.word	0x200003a0
 8000dcc:	200003e8 	.word	0x200003e8

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b09e      	sub	sp, #120	@ 0x78
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000dda:	2228      	movs	r2, #40	@ 0x28
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00a f9b6 	bl	800b150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	223c      	movs	r2, #60	@ 0x3c
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00a f9a8 	bl	800b150 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e00:	2303      	movs	r3, #3
 8000e02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e12:	2310      	movs	r3, #16
 8000e14:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e20:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e24:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 fbb6 	bl	800459c <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e36:	f000 f8ad 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e50:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e54:	2102      	movs	r1, #2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 fbde 	bl	8005618 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e62:	f000 f897 	bl	8000f94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <SystemClock_Config+0xbc>)
 8000e68:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4618      	mov	r0, r3
 8000e76:	f004 fd9f 	bl	80059b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e80:	f000 f888 	bl	8000f94 <Error_Handler>
  }
}
 8000e84:	bf00      	nop
 8000e86:	3778      	adds	r7, #120	@ 0x78
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	00020020 	.word	0x00020020

08000e90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	@ (8000f08 <MX_I2C1_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <MX_I2C1_Init+0x7c>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eca:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ecc:	f001 f892 	bl	8001ff4 <HAL_I2C_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ed6:	f000 f85d 	bl	8000f94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ede:	f001 fe15 	bl	8002b0c <HAL_I2CEx_ConfigAnalogFilter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee8:	f000 f854 	bl	8000f94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ef0:	f001 fe57 	bl	8002ba2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 f84b 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000034c 	.word	0x2000034c
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	2000090e 	.word	0x2000090e

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_GPIO_Init+0x80>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a19      	ldr	r2, [pc, #100]	@ (8000f90 <MX_GPIO_Init+0x80>)
 8000f2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_GPIO_Init+0x80>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_GPIO_Init+0x80>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a13      	ldr	r2, [pc, #76]	@ (8000f90 <MX_GPIO_Init+0x80>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f48:	6153      	str	r3, [r2, #20]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_GPIO_Init+0x80>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_GPIO_Init+0x80>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <MX_GPIO_Init+0x80>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <MX_GPIO_Init+0x80>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : LEFT_BUTTON_Pin RIGHT_BUTTON_Pin */
  GPIO_InitStruct.Pin = LEFT_BUTTON_Pin|RIGHT_BUTTON_Pin;
 8000f6e:	230a      	movs	r3, #10
 8000f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f84:	f000 fea4 	bl	8001cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <handle_mouse_button>:
/**
  * @brief  Debounce handler for mouse button input.
  * @param  btn_value: Raw input value of the button (non-zero if pressed, zero if not pressed).
  * @retval Debounced button value (non-zero if debounced as pressed, zero otherwise).
  */
uint8_t handle_mouse_button(uint8_t btn_value) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  static button_state_t btn_sm_state = NOT_PRESSED;
  static uint32_t curr_time = 0;
  uint32_t new_time = HAL_GetTick();
 8000faa:	f000 fd4f 	bl	8001a4c <HAL_GetTick>
 8000fae:	60f8      	str	r0, [r7, #12]

  switch (btn_sm_state) {
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <handle_mouse_button+0x88>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d022      	beq.n	8000ffe <handle_mouse_button+0x5e>
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	dc2f      	bgt.n	800101c <handle_mouse_button+0x7c>
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <handle_mouse_button+0x26>
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d00a      	beq.n	8000fda <handle_mouse_button+0x3a>
 8000fc4:	e02a      	b.n	800101c <handle_mouse_button+0x7c>
    case NOT_PRESSED:
      if (btn_value) {
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d024      	beq.n	8001016 <handle_mouse_button+0x76>
        btn_sm_state = BOUNCE;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <handle_mouse_button+0x88>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
        curr_time = new_time;
 8000fd2:	4a16      	ldr	r2, [pc, #88]	@ (800102c <handle_mouse_button+0x8c>)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6013      	str	r3, [r2, #0]
      }
      break;
 8000fd8:	e01d      	b.n	8001016 <handle_mouse_button+0x76>
    case BOUNCE:
      if ((new_time - curr_time) >= 50) {
 8000fda:	4b14      	ldr	r3, [pc, #80]	@ (800102c <handle_mouse_button+0x8c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b31      	cmp	r3, #49	@ 0x31
 8000fe4:	d919      	bls.n	800101a <handle_mouse_button+0x7a>
        if (btn_value) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <handle_mouse_button+0x56>
          btn_sm_state = PRESSED;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <handle_mouse_button+0x88>)
 8000fee:	2202      	movs	r2, #2
 8000ff0:	701a      	strb	r2, [r3, #0]
          return btn_value;
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	e013      	b.n	800101e <handle_mouse_button+0x7e>
        } else {
          btn_sm_state = NOT_PRESSED;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <handle_mouse_button+0x88>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8000ffc:	e00d      	b.n	800101a <handle_mouse_button+0x7a>
    case PRESSED:
      if (!btn_value) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d106      	bne.n	8001012 <handle_mouse_button+0x72>
        btn_sm_state = BOUNCE;
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <handle_mouse_button+0x88>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
        curr_time = new_time;
 800100a:	4a08      	ldr	r2, [pc, #32]	@ (800102c <handle_mouse_button+0x8c>)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6013      	str	r3, [r2, #0]
      }else {
        return btn_value;
      }
      break;
 8001010:	e004      	b.n	800101c <handle_mouse_button+0x7c>
        return btn_value;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	e003      	b.n	800101e <handle_mouse_button+0x7e>
      break;
 8001016:	bf00      	nop
 8001018:	e000      	b.n	800101c <handle_mouse_button+0x7c>
      break;
 800101a:	bf00      	nop
  }
  return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200003ec 	.word	0x200003ec
 800102c:	200003f0 	.word	0x200003f0

08001030 <read_btn_state>:
   * @param  GPIOx: GPIO port.
   * @param  GPIO_Pin: GPIO pin.
   * @retval Button state
   */
uint8_t read_btn_state(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
  return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	4619      	mov	r1, r3
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 ffbf 	bl	8001fc4 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <update_btn_state>:
  *                        Bit 0 corresponds to the left button, and
  *                        bit 1 corresponds to the right button.
  * @retval None
  */
void update_btn_state(mouseHID *mouse_hid, uint8_t btn_pad_value)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
  if (btn_pad_value & 0x01) {
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <update_btn_state+0x26>
      mouse_hid->button |= 0x01;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	e006      	b.n	8001084 <update_btn_state+0x34>
  } else {
      mouse_hid->button &= ~0x01;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	701a      	strb	r2, [r3, #0]
  }

  if (btn_pad_value & 0x02) {
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <update_btn_state+0x4e>
      mouse_hid->button |= 0x02;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	b2da      	uxtb	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	701a      	strb	r2, [r3, #0]
  } else {
      mouse_hid->button &= ~0x02;
  }
}
 800109c:	e006      	b.n	80010ac <update_btn_state+0x5c>
      mouse_hid->button &= ~0x02;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	f023 0302 	bic.w	r3, r3, #2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	701a      	strb	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <move_cursor>:
  * @param  gyroy: Gyroscope value for Y-axis.
  * @param  mouse_hid: Pointer to the mouse HID structure.
  * @retval None
  */
void move_cursor(double gyroz, double gyroy, mouseHID *mouse_hid)
{
 80010b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010bc:	b088      	sub	sp, #32
 80010be:	af00      	add	r7, sp, #0
 80010c0:	ed87 0b04 	vstr	d0, [r7, #16]
 80010c4:	ed87 1b02 	vstr	d1, [r7, #8]
 80010c8:	6078      	str	r0, [r7, #4]
  int scaling_factor = 20;
 80010ca:	2314      	movs	r3, #20
 80010cc:	61fb      	str	r3, [r7, #28]
  mouse_hid->mouse_x = -(gyroz / scaling_factor);
 80010ce:	69f8      	ldr	r0, [r7, #28]
 80010d0:	f7ff fa28 	bl	8000524 <__aeabi_i2d>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010dc:	f7ff fbb6 	bl	800084c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4690      	mov	r8, r2
 80010e6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80010ea:	4640      	mov	r0, r8
 80010ec:	4649      	mov	r1, r9
 80010ee:	f7ff fd33 	bl	8000b58 <__aeabi_d2iz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b25a      	sxtb	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	705a      	strb	r2, [r3, #1]
  mouse_hid->mouse_y = -(gyroy / scaling_factor);
 80010fa:	69f8      	ldr	r0, [r7, #28]
 80010fc:	f7ff fa12 	bl	8000524 <__aeabi_i2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001108:	f7ff fba0 	bl	800084c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4614      	mov	r4, r2
 8001112:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001116:	4620      	mov	r0, r4
 8001118:	4629      	mov	r1, r5
 800111a:	f7ff fd1d 	bl	8000b58 <__aeabi_d2iz>
 800111e:	4603      	mov	r3, r0
 8001120:	b25a      	sxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	709a      	strb	r2, [r3, #2]
}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001130 <KalmanFilter_Init>:
  * @param process_variance Process variance parameter.
  * @param measurement_variance Measurement variance parameter.
  * @param estimated_error Estimated error parameter.
  * @retval None
  */
void KalmanFilter_Init(KalmanFilter *kf, double process_variance, double measurement_variance, double estimated_error) {
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	61f8      	str	r0, [r7, #28]
 8001138:	ed87 0b04 	vstr	d0, [r7, #16]
 800113c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001140:	ed87 2b00 	vstr	d2, [r7]
  kf->process_variance = process_variance;
 8001144:	69f9      	ldr	r1, [r7, #28]
 8001146:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800114a:	e9c1 2300 	strd	r2, r3, [r1]
  kf->measurement_variance = measurement_variance;
 800114e:	69f9      	ldr	r1, [r7, #28]
 8001150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001154:	e9c1 2302 	strd	r2, r3, [r1, #8]
  kf->estimated_error = estimated_error;
 8001158:	69f9      	ldr	r1, [r7, #28]
 800115a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800115e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  kf->posteri_estimate = 0.0;
 8001162:	69f9      	ldr	r1, [r7, #28]
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  kf->posteri_error = 1.0;
 8001170:	69f9      	ldr	r1, [r7, #28]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <KalmanFilter_Init+0x58>)
 8001178:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800117c:	bf00      	nop
 800117e:	3724      	adds	r7, #36	@ 0x24
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	3ff00000 	.word	0x3ff00000

0800118c <KalmanFilter_Update>:
  * @brief Updates the Kalman filter with a new measurement.
  * @param kf Pointer to the Kalman filter structure.
  * @param measurement The new measurement value.
  * @retval The updated estimated value after applying the Kalman filter.
  */
double KalmanFilter_Update(KalmanFilter *kf, double measurement) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	ed87 0b00 	vstr	d0, [r7]
  double priori_estimate = kf->posteri_estimate;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800119e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double priori_error = kf->posteri_error + kf->process_variance;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff f86d 	bl	800028c <__adddf3>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double blending_factor = priori_error / (priori_error + kf->measurement_variance);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011c4:	f7ff f862 	bl	800028c <__adddf3>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011d0:	f7ff fb3c 	bl	800084c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  kf->posteri_estimate = priori_estimate + blending_factor * (measurement - priori_estimate);
 80011dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e4:	f7ff f850 	bl	8000288 <__aeabi_dsub>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011f4:	f7ff fa00 	bl	80005f8 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001204:	f7ff f842 	bl	800028c <__adddf3>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	68f9      	ldr	r1, [r7, #12]
 800120e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  kf->posteri_error = (1 - blending_factor) * priori_error;
 8001212:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001216:	f04f 0000 	mov.w	r0, #0
 800121a:	490e      	ldr	r1, [pc, #56]	@ (8001254 <KalmanFilter_Update+0xc8>)
 800121c:	f7ff f834 	bl	8000288 <__aeabi_dsub>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800122c:	f7ff f9e4 	bl	80005f8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	e9c1 2308 	strd	r2, r3, [r1, #32]

  return kf->posteri_estimate;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001240:	ec43 2b17 	vmov	d7, r2, r3
}
 8001244:	eeb0 0a47 	vmov.f32	s0, s14
 8001248:	eef0 0a67 	vmov.f32	s1, s15
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	3ff00000 	.word	0x3ff00000

08001258 <MPU6050_Init>:
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void MPU6050_Init() {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  PowerManagement_Config();
 800125c:	f000 f806 	bl	800126c <PowerManagement_Config>
//  Data_Rate_Config();
  Gyro_Config();
 8001260:	f000 f82c 	bl	80012bc <Gyro_Config>
  Accelerometer_Config();
 8001264:	f000 f852 	bl	800130c <Accelerometer_Config>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <PowerManagement_Config>:
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af04      	add	r7, sp, #16
  /* Set the value to be written to the power management register */
  temp_data = 0x00;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <PowerManagement_Config+0x40>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, PWR_MGMT_1_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <PowerManagement_Config+0x40>)
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	226b      	movs	r2, #107	@ 0x6b
 800128a:	21d0      	movs	r1, #208	@ 0xd0
 800128c:	4808      	ldr	r0, [pc, #32]	@ (80012b0 <PowerManagement_Config+0x44>)
 800128e:	f000 ff4d 	bl	800212c <HAL_I2C_Mem_Write>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <PowerManagement_Config+0x34>
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
 8001298:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <PowerManagement_Config+0x48>)
 800129a:	f009 fe59 	bl	800af50 <puts>
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}
 800129e:	e002      	b.n	80012a6 <PowerManagement_Config+0x3a>
    printf("Failed to exit from sleep mode...\n");
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <PowerManagement_Config+0x4c>)
 80012a2:	f009 fe55 	bl	800af50 <puts>
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200003f4 	.word	0x200003f4
 80012b0:	2000034c 	.word	0x2000034c
 80012b4:	0800e7f0 	.word	0x0800e7f0
 80012b8:	0800e80c 	.word	0x0800e80c

080012bc <Gyro_Config>:
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af04      	add	r7, sp, #16
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_2000;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <Gyro_Config+0x40>)
 80012c4:	220a      	movs	r2, #10
 80012c6:	701a      	strb	r2, [r3, #0]

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, GYRO_CONFIG_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <Gyro_Config+0x40>)
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	221b      	movs	r2, #27
 80012da:	21d0      	movs	r1, #208	@ 0xd0
 80012dc:	4808      	ldr	r0, [pc, #32]	@ (8001300 <Gyro_Config+0x44>)
 80012de:	f000 ff25 	bl	800212c <HAL_I2C_Mem_Write>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <Gyro_Config+0x34>
    printf("Configuring gyroscope...\n");
 80012e8:	4806      	ldr	r0, [pc, #24]	@ (8001304 <Gyro_Config+0x48>)
 80012ea:	f009 fe31 	bl	800af50 <puts>
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}
 80012ee:	e002      	b.n	80012f6 <Gyro_Config+0x3a>
    printf("Failed to configure gyroscope...\n");
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <Gyro_Config+0x4c>)
 80012f2:	f009 fe2d 	bl	800af50 <puts>
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200003f4 	.word	0x200003f4
 8001300:	2000034c 	.word	0x2000034c
 8001304:	0800e880 	.word	0x0800e880
 8001308:	0800e89c 	.word	0x0800e89c

0800130c <Accelerometer_Config>:
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_16G;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <Accelerometer_Config+0x40>)
 8001314:	220a      	movs	r2, #10
 8001316:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, ACCEL_CONFIG_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <Accelerometer_Config+0x40>)
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	221c      	movs	r2, #28
 800132a:	21d0      	movs	r1, #208	@ 0xd0
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <Accelerometer_Config+0x44>)
 800132e:	f000 fefd 	bl	800212c <HAL_I2C_Mem_Write>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d103      	bne.n	8001340 <Accelerometer_Config+0x34>
    printf("Configuring accelerometer...\n");
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <Accelerometer_Config+0x48>)
 800133a:	f009 fe09 	bl	800af50 <puts>
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
 800133e:	e002      	b.n	8001346 <Accelerometer_Config+0x3a>
    printf("Failed to configure accelerometer...\n");
 8001340:	4805      	ldr	r0, [pc, #20]	@ (8001358 <Accelerometer_Config+0x4c>)
 8001342:	f009 fe05 	bl	800af50 <puts>
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200003f4 	.word	0x200003f4
 8001350:	2000034c 	.word	0x2000034c
 8001354:	0800e8c0 	.word	0x0800e8c0
 8001358:	0800e8e0 	.word	0x0800e8e0
 800135c:	00000000 	.word	0x00000000

08001360 <MPU6050_Read_All>:
/**
  * @brief  Reads all sensor data from the MPU6050
  * @param  DataStruct: Pointer to the MPU6050_t structure to store the sensor data
  * @retval None
  */
void MPU6050_Read_All(MPU6050_t *DataStruct) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af04      	add	r7, sp, #16
 8001366:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[14];
	int16_t temp;

	/* Read 14 BYTES of data starting from ACCEL_XOUT_H register */
	if (HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), ACCEL_XOUT_H_REG, 1, Rec_Data, 14, HAL_MAX_DELAY)!= HAL_OK) {
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	230e      	movs	r3, #14
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	223b      	movs	r2, #59	@ 0x3b
 800137c:	21d0      	movs	r1, #208	@ 0xd0
 800137e:	4860      	ldr	r0, [pc, #384]	@ (8001500 <MPU6050_Read_All+0x1a0>)
 8001380:	f000 ffe8 	bl	8002354 <HAL_I2C_Mem_Read>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <MPU6050_Read_All+0x32>
    printf("Failed to read from MPU6050\n");
 800138a:	485e      	ldr	r0, [pc, #376]	@ (8001504 <MPU6050_Read_All+0x1a4>)
 800138c:	f009 fde0 	bl	800af50 <puts>
 8001390:	e0ad      	b.n	80014ee <MPU6050_Read_All+0x18e>
    return;
  }

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001392:	7a3b      	ldrb	r3, [r7, #8]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b21a      	sxth	r2, r3
 8001398:	7a7b      	ldrb	r3, [r7, #9]
 800139a:	b21b      	sxth	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b21a      	sxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80013a4:	7abb      	ldrb	r3, [r7, #10]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80013b6:	7b3b      	ldrb	r3, [r7, #12]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	7b7b      	ldrb	r3, [r7, #13]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	809a      	strh	r2, [r3, #4]

	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	82fb      	strh	r3, [r7, #22]

	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80013d6:	7c3b      	ldrb	r3, [r7, #16]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	7c7b      	ldrb	r3, [r7, #17]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80013e8:	7cbb      	ldrb	r3, [r7, #18]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	845a      	strh	r2, [r3, #34]	@ 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b21a      	sxth	r2, r3
 8001400:	7d7b      	ldrb	r3, [r7, #21]
 8001402:	b21b      	sxth	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b21a      	sxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	849a      	strh	r2, [r3, #36]	@ 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW / ACC_FS_SENSITIVITY_3;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f886 	bl	8000524 <__aeabi_i2d>
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b3a      	ldr	r3, [pc, #232]	@ (8001508 <MPU6050_Read_All+0x1a8>)
 800141e:	f7ff fa15 	bl	800084c <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / ACC_FS_SENSITIVITY_3;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f876 	bl	8000524 <__aeabi_i2d>
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b32      	ldr	r3, [pc, #200]	@ (8001508 <MPU6050_Read_All+0x1a8>)
 800143e:	f7ff fa05 	bl	800084c <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / ACC_FS_SENSITIVITY_3;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f866 	bl	8000524 <__aeabi_i2d>
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <MPU6050_Read_All+0x1a8>)
 800145e:	f7ff f9f5 	bl	800084c <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	e9c1 2306 	strd	r2, r3, [r1, #24]

	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 800146c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001478:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800150c <MPU6050_Read_All+0x1ac>
 800147c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001480:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001510 <MPU6050_Read_All+0x1b0>
 8001484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	DataStruct->Gx = DataStruct->Gyro_X_RAW / GYR_FS_SENSITIVITY_3;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f845 	bl	8000524 <__aeabi_i2d>
 800149a:	a317      	add	r3, pc, #92	@ (adr r3, 80014f8 <MPU6050_Read_All+0x198>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7ff f9d4 	bl	800084c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / GYR_FS_SENSITIVITY_3;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f835 	bl	8000524 <__aeabi_i2d>
 80014ba:	a30f      	add	r3, pc, #60	@ (adr r3, 80014f8 <MPU6050_Read_All+0x198>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f9c4 	bl	800084c <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / GYR_FS_SENSITIVITY_3;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f825 	bl	8000524 <__aeabi_i2d>
 80014da:	a307      	add	r3, pc, #28	@ (adr r3, 80014f8 <MPU6050_Read_All+0x198>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f9b4 	bl	800084c <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	//printf("%d   %d   %d\n", DataStruct->Accel_X_RAW, DataStruct->Accel_Y_RAW, DataStruct->Accel_Z_RAW);
}
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	f3af 8000 	nop.w
 80014f8:	66666666 	.word	0x66666666
 80014fc:	40306666 	.word	0x40306666
 8001500:	2000034c 	.word	0x2000034c
 8001504:	0800e908 	.word	0x0800e908
 8001508:	40a00000 	.word	0x40a00000
 800150c:	43aa0000 	.word	0x43aa0000
 8001510:	42121eb8 	.word	0x42121eb8
 8001514:	00000000 	.word	0x00000000

08001518 <filter_gyro_data>:
  * @brief Applies a filtering algorithm to gyroscope data.
  * @param gyroz Pointer to the gyroscope data for the Z-axis.
  * @param gyroy Pointer to the gyroscope data for the Y-axis.
  * @retval None
  */
void filter_gyro_data(double *gyroz, double *gyroy) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  static KalmanFilter kf_gyroz;
  static KalmanFilter kf_gyroy;
  static int kf_initialized = 0;

  if (!kf_initialized) {
 8001522:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <filter_gyro_data+0xa0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d114      	bne.n	8001554 <filter_gyro_data+0x3c>
    KalmanFilter_Init(&kf_gyroz, 1e-5, 1e-2, 1.0);
 800152a:	ed9f 2b1d 	vldr	d2, [pc, #116]	@ 80015a0 <filter_gyro_data+0x88>
 800152e:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 80015a8 <filter_gyro_data+0x90>
 8001532:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 80015b0 <filter_gyro_data+0x98>
 8001536:	4821      	ldr	r0, [pc, #132]	@ (80015bc <filter_gyro_data+0xa4>)
 8001538:	f7ff fdfa 	bl	8001130 <KalmanFilter_Init>
    KalmanFilter_Init(&kf_gyroy, 1e-5, 1e-2, 1.0);
 800153c:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 80015a0 <filter_gyro_data+0x88>
 8001540:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 80015a8 <filter_gyro_data+0x90>
 8001544:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 80015b0 <filter_gyro_data+0x98>
 8001548:	481d      	ldr	r0, [pc, #116]	@ (80015c0 <filter_gyro_data+0xa8>)
 800154a:	f7ff fdf1 	bl	8001130 <KalmanFilter_Init>
    kf_initialized = 1;
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <filter_gyro_data+0xa0>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]
  }

  *gyroz = KalmanFilter_Update(&kf_gyroz, *gyroz);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	ed93 7b00 	vldr	d7, [r3]
 800155a:	eeb0 0a47 	vmov.f32	s0, s14
 800155e:	eef0 0a67 	vmov.f32	s1, s15
 8001562:	4816      	ldr	r0, [pc, #88]	@ (80015bc <filter_gyro_data+0xa4>)
 8001564:	f7ff fe12 	bl	800118c <KalmanFilter_Update>
 8001568:	eeb0 7a40 	vmov.f32	s14, s0
 800156c:	eef0 7a60 	vmov.f32	s15, s1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	ed83 7b00 	vstr	d7, [r3]
  *gyroy = KalmanFilter_Update(&kf_gyroy, *gyroy);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	ed93 7b00 	vldr	d7, [r3]
 800157c:	eeb0 0a47 	vmov.f32	s0, s14
 8001580:	eef0 0a67 	vmov.f32	s1, s15
 8001584:	480e      	ldr	r0, [pc, #56]	@ (80015c0 <filter_gyro_data+0xa8>)
 8001586:	f7ff fe01 	bl	800118c <KalmanFilter_Update>
 800158a:	eeb0 7a40 	vmov.f32	s14, s0
 800158e:	eef0 7a60 	vmov.f32	s15, s1
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	ed83 7b00 	vstr	d7, [r3]
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	00000000 	.word	0x00000000
 80015a4:	3ff00000 	.word	0x3ff00000
 80015a8:	47ae147b 	.word	0x47ae147b
 80015ac:	3f847ae1 	.word	0x3f847ae1
 80015b0:	88e368f1 	.word	0x88e368f1
 80015b4:	3ee4f8b5 	.word	0x3ee4f8b5
 80015b8:	200003f8 	.word	0x200003f8
 80015bc:	20000400 	.word	0x20000400
 80015c0:	20000428 	.word	0x20000428

080015c4 <read_gyro_data>:
  * @param  gyroz: Pointer to store the processed gyroscope Z-axis data.
  * @param  gyroy: Pointer to store the processed gyroscope Y-axis data.
  * @retval None
  */
void read_gyro_data(MPU6050_t *mpu6050_data, double *gyroz, double *gyroy)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  MPU6050_Read_All(mpu6050_data);
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7ff fec5 	bl	8001360 <MPU6050_Read_All>
  *gyroz = mpu6050_data->Gz;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	e9c1 2300 	strd	r2, r3, [r1]
  *gyroy = mpu6050_data->Gy;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	e9c1 2300 	strd	r2, r3, [r1]
  filter_gyro_data(gyroz, gyroy);
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f7ff ff91 	bl	8001518 <filter_gyro_data>
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_MspInit+0x44>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a0e      	ldr	r2, [pc, #56]	@ (8001644 <HAL_MspInit+0x44>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <HAL_MspInit+0x44>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_MspInit+0x44>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <HAL_MspInit+0x44>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_MspInit+0x44>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <HAL_I2C_MspInit+0x7c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d127      	bne.n	80016ba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <HAL_I2C_MspInit+0x80>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a16      	ldr	r2, [pc, #88]	@ (80016c8 <HAL_I2C_MspInit+0x80>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001674:	6153      	str	r3, [r2, #20]
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_I2C_MspInit+0x80>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001682:	23c0      	movs	r3, #192	@ 0xc0
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001686:	2312      	movs	r3, #18
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001692:	2304      	movs	r3, #4
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	480b      	ldr	r0, [pc, #44]	@ (80016cc <HAL_I2C_MspInit+0x84>)
 800169e:	f000 fb17 	bl	8001cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <HAL_I2C_MspInit+0x80>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <HAL_I2C_MspInit+0x80>)
 80016a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_I2C_MspInit+0x80>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	@ 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40005400 	.word	0x40005400
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48000400 	.word	0x48000400

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001726:	f000 f97d 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001736:	f001 fb6d 	bl	8002e14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000920 	.word	0x20000920

08001744 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <ITM_SendChar+0x48>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <ITM_SendChar+0x48>)
 8001754:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001758:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <ITM_SendChar+0x4c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a0c      	ldr	r2, [pc, #48]	@ (8001790 <ITM_SendChar+0x4c>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 8001766:	bf00      	nop
 8001768:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f8      	beq.n	8001768 <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 8001776:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	6013      	str	r3, [r2, #0]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000edfc 	.word	0xe000edfc
 8001790:	e0000e00 	.word	0xe0000e00

08001794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ae:	f009 fd21 	bl	800b1f4 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
  return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017d6:	bf00      	nop
 80017d8:	e7fd      	b.n	80017d6 <_exit+0x12>

080017da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e00a      	b.n	8001802 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ec:	f3af 8000 	nop.w
 80017f0:	4601      	mov	r1, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	60ba      	str	r2, [r7, #8]
 80017f8:	b2ca      	uxtb	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	dbf0      	blt.n	80017ec <_read+0x12>
  }

  return len;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e009      	b.n	800183a <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	60ba      	str	r2, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff88 	bl	8001744 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf1      	blt.n	8001826 <_write+0x12>
  }
  return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_close>:

int _close(int file)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001874:	605a      	str	r2, [r3, #4]
  return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_isatty>:

int _isatty(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f009 fc86 	bl	800b1f4 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000a000 	.word	0x2000a000
 8001914:	00001000 	.word	0x00001000
 8001918:	20000450 	.word	0x20000450
 800191c:	20000d58 	.word	0x20000d58

08001920 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001948:	f7ff ffea 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <LoopForever+0x6>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	@ (8001984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <LoopForever+0xe>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:
CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	@ (8001990 <LoopForever+0x16>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f009 fc45 	bl	800b200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001976:	f7ff f9cd 	bl	8000d14 <main>

0800197a <LoopForever>:

LoopForever:
    b LoopForever
 800197a:	e7fe      	b.n	800197a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800197c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8001988:	0800edd8 	.word	0x0800edd8
  ldr r2, =_sbss
 800198c:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8001990:	20000d54 	.word	0x20000d54

08001994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC1_2_IRQHandler>
	...

08001998 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <HAL_Init+0x28>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <HAL_Init+0x28>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f94f 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	200f      	movs	r0, #15
 80019b0:	f000 f808 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fe24 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40022000 	.word	0x40022000

080019c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f967 	bl	8001cb6 <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 f92f 	bl	8001c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	@ (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000454 	.word	0x20000454

08001a4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000454 	.word	0x20000454

08001a64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff ffee 	bl	8001a4c <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffde 	bl	8001a4c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4907      	ldr	r1, [pc, #28]	@ (8001b48 <__NVIC_EnableIRQ+0x38>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	@ 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c18:	d301      	bcc.n	8001c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00f      	b.n	8001c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <SysTick_Config+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c26:	210f      	movs	r1, #15
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f7ff ff8e 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <SysTick_Config+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <SysTick_Config+0x40>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff29 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c74:	f7ff ff3e 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7ff ff8e 	bl	8001ba0 <NVIC_EncodePriority>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff31 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffa2 	bl	8001c08 <SysTick_Config>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cde:	e154      	b.n	8001f8a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8146 	beq.w	8001f84 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d005      	beq.n	8001d10 <HAL_GPIO_Init+0x40>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d130      	bne.n	8001d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d46:	2201      	movs	r2, #1
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	f003 0201 	and.w	r2, r3, #1
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d017      	beq.n	8001dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d123      	bne.n	8001e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	08da      	lsrs	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3208      	adds	r2, #8
 8001dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	08da      	lsrs	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	6939      	ldr	r1, [r7, #16]
 8001dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0203 	and.w	r2, r3, #3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 80a0 	beq.w	8001f84 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e44:	4b58      	ldr	r3, [pc, #352]	@ (8001fa8 <HAL_GPIO_Init+0x2d8>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a57      	ldr	r2, [pc, #348]	@ (8001fa8 <HAL_GPIO_Init+0x2d8>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b55      	ldr	r3, [pc, #340]	@ (8001fa8 <HAL_GPIO_Init+0x2d8>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e5c:	4a53      	ldr	r2, [pc, #332]	@ (8001fac <HAL_GPIO_Init+0x2dc>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e86:	d019      	beq.n	8001ebc <HAL_GPIO_Init+0x1ec>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a49      	ldr	r2, [pc, #292]	@ (8001fb0 <HAL_GPIO_Init+0x2e0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_GPIO_Init+0x1e8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a48      	ldr	r2, [pc, #288]	@ (8001fb4 <HAL_GPIO_Init+0x2e4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00d      	beq.n	8001eb4 <HAL_GPIO_Init+0x1e4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a47      	ldr	r2, [pc, #284]	@ (8001fb8 <HAL_GPIO_Init+0x2e8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d007      	beq.n	8001eb0 <HAL_GPIO_Init+0x1e0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a46      	ldr	r2, [pc, #280]	@ (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_GPIO_Init+0x1dc>
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	e008      	b.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001eac:	2305      	movs	r3, #5
 8001eae:	e006      	b.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e004      	b.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	f002 0203 	and.w	r2, r2, #3
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	4093      	lsls	r3, r2
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ece:	4937      	ldr	r1, [pc, #220]	@ (8001fac <HAL_GPIO_Init+0x2dc>)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001edc:	4b38      	ldr	r3, [pc, #224]	@ (8001fc0 <HAL_GPIO_Init+0x2f0>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f00:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc0 <HAL_GPIO_Init+0x2f0>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f06:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc0 <HAL_GPIO_Init+0x2f0>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f2a:	4a25      	ldr	r2, [pc, #148]	@ (8001fc0 <HAL_GPIO_Init+0x2f0>)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f30:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <HAL_GPIO_Init+0x2f0>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f54:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc0 <HAL_GPIO_Init+0x2f0>)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_GPIO_Init+0x2f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f7e:	4a10      	ldr	r2, [pc, #64]	@ (8001fc0 <HAL_GPIO_Init+0x2f0>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f47f aea3 	bne.w	8001ce0 <HAL_GPIO_Init+0x10>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	48000400 	.word	0x48000400
 8001fb4:	48000800 	.word	0x48000800
 8001fb8:	48000c00 	.word	0x48000c00
 8001fbc:	48001000 	.word	0x48001000
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e001      	b.n	8001fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e08d      	b.n	8002122 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fb14 	bl	8001648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002044:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002054:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	e006      	b.n	800207c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800207a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d108      	bne.n	8002096 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	e007      	b.n	80020a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69d9      	ldr	r1, [r3, #28]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	4608      	mov	r0, r1
 8002136:	4611      	mov	r1, r2
 8002138:	461a      	mov	r2, r3
 800213a:	4603      	mov	r3, r0
 800213c:	817b      	strh	r3, [r7, #10]
 800213e:	460b      	mov	r3, r1
 8002140:	813b      	strh	r3, [r7, #8]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b20      	cmp	r3, #32
 8002150:	f040 80f9 	bne.w	8002346 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <HAL_I2C_Mem_Write+0x34>
 800215a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002166:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0ed      	b.n	8002348 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_I2C_Mem_Write+0x4e>
 8002176:	2302      	movs	r3, #2
 8002178:	e0e6      	b.n	8002348 <HAL_I2C_Mem_Write+0x21c>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002182:	f7ff fc63 	bl	8001a4c <HAL_GetTick>
 8002186:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2319      	movs	r3, #25
 800218e:	2201      	movs	r2, #1
 8002190:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fac3 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0d1      	b.n	8002348 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2221      	movs	r2, #33	@ 0x21
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	@ 0x40
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021cc:	88f8      	ldrh	r0, [r7, #6]
 80021ce:	893a      	ldrh	r2, [r7, #8]
 80021d0:	8979      	ldrh	r1, [r7, #10]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	4603      	mov	r3, r0
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f9d3 	bl	8002588 <I2C_RequestMemoryWrite>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0a9      	b.n	8002348 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2bff      	cmp	r3, #255	@ 0xff
 80021fc:	d90e      	bls.n	800221c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	22ff      	movs	r2, #255	@ 0xff
 8002202:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002208:	b2da      	uxtb	r2, r3
 800220a:	8979      	ldrh	r1, [r7, #10]
 800220c:	2300      	movs	r3, #0
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 fc47 	bl	8002aa8 <I2C_TransferConfig>
 800221a:	e00f      	b.n	800223c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222a:	b2da      	uxtb	r2, r3
 800222c:	8979      	ldrh	r1, [r7, #10]
 800222e:	2300      	movs	r3, #0
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fc36 	bl	8002aa8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fac6 	bl	80027d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e07b      	b.n	8002348 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d034      	beq.n	80022f4 <HAL_I2C_Mem_Write+0x1c8>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228e:	2b00      	cmp	r3, #0
 8002290:	d130      	bne.n	80022f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002298:	2200      	movs	r2, #0
 800229a:	2180      	movs	r1, #128	@ 0x80
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fa3f 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e04d      	b.n	8002348 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2bff      	cmp	r3, #255	@ 0xff
 80022b4:	d90e      	bls.n	80022d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	22ff      	movs	r2, #255	@ 0xff
 80022ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	8979      	ldrh	r1, [r7, #10]
 80022c4:	2300      	movs	r3, #0
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fbeb 	bl	8002aa8 <I2C_TransferConfig>
 80022d2:	e00f      	b.n	80022f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	8979      	ldrh	r1, [r7, #10]
 80022e6:	2300      	movs	r3, #0
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fbda 	bl	8002aa8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d19e      	bne.n	800223c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 faac 	bl	8002860 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e01a      	b.n	8002348 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2220      	movs	r2, #32
 8002318:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_I2C_Mem_Write+0x224>)
 8002326:	400b      	ands	r3, r1
 8002328:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002346:	2302      	movs	r3, #2
  }
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	fe00e800 	.word	0xfe00e800

08002354 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4603      	mov	r3, r0
 8002364:	817b      	strh	r3, [r7, #10]
 8002366:	460b      	mov	r3, r1
 8002368:	813b      	strh	r3, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b20      	cmp	r3, #32
 8002378:	f040 80fd 	bne.w	8002576 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_I2C_Mem_Read+0x34>
 8002382:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800238e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0f1      	b.n	8002578 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_I2C_Mem_Read+0x4e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e0ea      	b.n	8002578 <HAL_I2C_Mem_Read+0x224>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023aa:	f7ff fb4f 	bl	8001a4c <HAL_GetTick>
 80023ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2319      	movs	r3, #25
 80023b6:	2201      	movs	r2, #1
 80023b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f9af 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0d5      	b.n	8002578 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2222      	movs	r2, #34	@ 0x22
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2240      	movs	r2, #64	@ 0x40
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023f4:	88f8      	ldrh	r0, [r7, #6]
 80023f6:	893a      	ldrh	r2, [r7, #8]
 80023f8:	8979      	ldrh	r1, [r7, #10]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	4603      	mov	r3, r0
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f913 	bl	8002630 <I2C_RequestMemoryRead>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0ad      	b.n	8002578 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	2bff      	cmp	r3, #255	@ 0xff
 8002424:	d90e      	bls.n	8002444 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002430:	b2da      	uxtb	r2, r3
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	4b52      	ldr	r3, [pc, #328]	@ (8002580 <HAL_I2C_Mem_Read+0x22c>)
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fb33 	bl	8002aa8 <I2C_TransferConfig>
 8002442:	e00f      	b.n	8002464 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002452:	b2da      	uxtb	r2, r3
 8002454:	8979      	ldrh	r1, [r7, #10]
 8002456:	4b4a      	ldr	r3, [pc, #296]	@ (8002580 <HAL_I2C_Mem_Read+0x22c>)
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fb22 	bl	8002aa8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246a:	2200      	movs	r2, #0
 800246c:	2104      	movs	r1, #4
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f956 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e07c      	b.n	8002578 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d034      	beq.n	8002524 <HAL_I2C_Mem_Read+0x1d0>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d130      	bne.n	8002524 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c8:	2200      	movs	r2, #0
 80024ca:	2180      	movs	r1, #128	@ 0x80
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f927 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e04d      	b.n	8002578 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2bff      	cmp	r3, #255	@ 0xff
 80024e4:	d90e      	bls.n	8002504 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	2300      	movs	r3, #0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fad3 	bl	8002aa8 <I2C_TransferConfig>
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	b2da      	uxtb	r2, r3
 8002514:	8979      	ldrh	r1, [r7, #10]
 8002516:	2300      	movs	r3, #0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fac2 	bl	8002aa8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d19a      	bne.n	8002464 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f994 	bl	8002860 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e01a      	b.n	8002578 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2220      	movs	r2, #32
 8002548:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_I2C_Mem_Read+0x230>)
 8002556:	400b      	ands	r3, r1
 8002558:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002576:	2302      	movs	r3, #2
  }
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	80002400 	.word	0x80002400
 8002584:	fe00e800 	.word	0xfe00e800

08002588 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	817b      	strh	r3, [r7, #10]
 800259a:	460b      	mov	r3, r1
 800259c:	813b      	strh	r3, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	8979      	ldrh	r1, [r7, #10]
 80025a8:	4b20      	ldr	r3, [pc, #128]	@ (800262c <I2C_RequestMemoryWrite+0xa4>)
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fa79 	bl	8002aa8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	69b9      	ldr	r1, [r7, #24]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f909 	bl	80027d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e02c      	b.n	8002624 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d105      	bne.n	80025dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025d0:	893b      	ldrh	r3, [r7, #8]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80025da:	e015      	b.n	8002608 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025dc:	893b      	ldrh	r3, [r7, #8]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	69b9      	ldr	r1, [r7, #24]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f8ef 	bl	80027d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e012      	b.n	8002624 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025fe:	893b      	ldrh	r3, [r7, #8]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2200      	movs	r2, #0
 8002610:	2180      	movs	r1, #128	@ 0x80
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f884 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	80002000 	.word	0x80002000

08002630 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	4603      	mov	r3, r0
 8002640:	817b      	strh	r3, [r7, #10]
 8002642:	460b      	mov	r3, r1
 8002644:	813b      	strh	r3, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <I2C_RequestMemoryRead+0xa4>)
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2300      	movs	r3, #0
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 fa26 	bl	8002aa8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f8b6 	bl	80027d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e02c      	b.n	80026ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002676:	893b      	ldrh	r3, [r7, #8]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002680:	e015      	b.n	80026ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002682:	893b      	ldrh	r3, [r7, #8]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	b29b      	uxth	r3, r3
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f89c 	bl	80027d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e012      	b.n	80026ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026a4:	893b      	ldrh	r3, [r7, #8]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2140      	movs	r1, #64	@ 0x40
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f831 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	80002000 	.word	0x80002000

080026d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d103      	bne.n	80026f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d007      	beq.n	8002714 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	619a      	str	r2, [r3, #24]
  }
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002730:	e03b      	b.n	80027aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	6839      	ldr	r1, [r7, #0]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f8d6 	bl	80028e8 <I2C_IsErrorOccurred>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e041      	b.n	80027ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d02d      	beq.n	80027aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7ff f97d 	bl	8001a4c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x44>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d122      	bne.n	80027aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4013      	ands	r3, r2
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	429a      	cmp	r2, r3
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	429a      	cmp	r2, r3
 8002780:	d113      	bne.n	80027aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00f      	b.n	80027ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d0b4      	beq.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027de:	e033      	b.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f87f 	bl	80028e8 <I2C_IsErrorOccurred>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e031      	b.n	8002858 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d025      	beq.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fc:	f7ff f926 	bl	8001a4c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	d302      	bcc.n	8002812 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d11a      	bne.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	d013      	beq.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e007      	b.n	8002858 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d1c4      	bne.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800286c:	e02f      	b.n	80028ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f838 	bl	80028e8 <I2C_IsErrorOccurred>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e02d      	b.n	80028de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	f7ff f8e3 	bl	8001a4c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d11a      	bne.n	80028ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d013      	beq.n	80028ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f043 0220 	orr.w	r2, r3, #32
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d1c8      	bne.n	800286e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	@ 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d068      	beq.n	80029e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800291c:	e049      	b.n	80029b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d045      	beq.n	80029b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7ff f891 	bl	8001a4c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <I2C_IsErrorOccurred+0x54>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d13a      	bne.n	80029b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002946:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800294e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800295a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800295e:	d121      	bne.n	80029a4 <I2C_IsErrorOccurred+0xbc>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002966:	d01d      	beq.n	80029a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	2b20      	cmp	r3, #32
 800296c:	d01a      	beq.n	80029a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800297c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800297e:	f7ff f865 	bl	8001a4c <HAL_GetTick>
 8002982:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002984:	e00e      	b.n	80029a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002986:	f7ff f861 	bl	8001a4c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b19      	cmp	r3, #25
 8002992:	d907      	bls.n	80029a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f043 0320 	orr.w	r3, r3, #32
 800299a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80029a2:	e006      	b.n	80029b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d1e9      	bne.n	8002986 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d003      	beq.n	80029c8 <I2C_IsErrorOccurred+0xe0>
 80029c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0aa      	beq.n	800291e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2220      	movs	r2, #32
 80029d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	f043 0308 	orr.w	r3, r3, #8
 8002a20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01c      	beq.n	8002a96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff fe3b 	bl	80026d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <I2C_IsErrorOccurred+0x1bc>)
 8002a6e:	400b      	ands	r3, r1
 8002a70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3728      	adds	r7, #40	@ 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	fe00e800 	.word	0xfe00e800

08002aa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	817b      	strh	r3, [r7, #10]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ac0:	7a7b      	ldrb	r3, [r7, #9]
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ad6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	0d5b      	lsrs	r3, r3, #21
 8002ae2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ae6:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <I2C_TransferConfig+0x60>)
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	43db      	mvns	r3, r3
 8002aec:	ea02 0103 	and.w	r1, r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	03ff63ff 	.word	0x03ff63ff

08002b0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d138      	bne.n	8002b94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e032      	b.n	8002b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2224      	movs	r2, #36	@ 0x24
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d139      	bne.n	8002c2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e033      	b.n	8002c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2224      	movs	r2, #36	@ 0x24
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bf4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b9      	b.n	8002dc0 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f006 ff41 	bl	8009ae8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2203      	movs	r2, #3
 8002c6a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 f867 	bl	8005d46 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e03e      	b.n	8002cfc <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3311      	adds	r3, #17
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3310      	adds	r3, #16
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3313      	adds	r3, #19
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3320      	adds	r3, #32
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3324      	adds	r3, #36	@ 0x24
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	791b      	ldrb	r3, [r3, #4]
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d3bb      	bcc.n	8002c7e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	e044      	b.n	8002d96 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	3301      	adds	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	791b      	ldrb	r3, [r3, #4]
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d3b5      	bcc.n	8002d0c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002dac:	f002 ffe6 	bl	8005d7c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_PCD_Start+0x16>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e016      	b.n	8002e0c <HAL_PCD_Start+0x44>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f002 ff94 	bl	8005d18 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002df0:	2101      	movs	r1, #1
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f007 f8f0 	bl	8009fd8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 fa51 	bl	80082a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f005 fa4a 	bl	80082ba <USB_ReadInterrupts>
 8002e26:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa99 	bl	800336a <PCD_EP_ISR_Handler>

    return;
 8002e38:	e0bd      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e56:	b292      	uxth	r2, r2
 8002e58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f006 fee4 	bl	8009c2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e62:	2100      	movs	r1, #0
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f8a9 	bl	8002fbc <HAL_PCD_SetAddress>

    return;
 8002e6a:	e0a4      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e88:	b292      	uxth	r2, r2
 8002e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e8e:	e092      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eac:	b292      	uxth	r2, r2
 8002eae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002eb2:	e080      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d027      	beq.n	8002f0e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0204 	bic.w	r2, r2, #4
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0208 	bic.w	r2, r2, #8
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f006 fed4 	bl	8009c9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f06:	b292      	uxth	r2, r2
 8002f08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f0c:	e053      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d027      	beq.n	8002f68 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f42:	b292      	uxth	r2, r2
 8002f44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0204 	orr.w	r2, r2, #4
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f006 fe81 	bl	8009c68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f66:	e026      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00f      	beq.n	8002f92 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f84:	b292      	uxth	r2, r2
 8002f86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f006 fe3f 	bl	8009c0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f90:	e011      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00c      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002fb4:	bf00      	nop
  }
}
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_PCD_SetAddress+0x1a>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e012      	b.n	8002ffc <HAL_PCD_SetAddress+0x40>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f005 f945 	bl	800827c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	4608      	mov	r0, r1
 800300e:	4611      	mov	r1, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4603      	mov	r3, r0
 8003014:	70fb      	strb	r3, [r7, #3]
 8003016:	460b      	mov	r3, r1
 8003018:	803b      	strh	r3, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003026:	2b00      	cmp	r3, #0
 8003028:	da0e      	bge.n	8003048 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	f003 0207 	and.w	r2, r3, #7
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	3310      	adds	r3, #16
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	705a      	strb	r2, [r3, #1]
 8003046:	e00e      	b.n	8003066 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f003 0207 	and.w	r2, r3, #7
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003072:	883a      	ldrh	r2, [r7, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	78ba      	ldrb	r2, [r7, #2]
 800307c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800307e:	78bb      	ldrb	r3, [r7, #2]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d102      	bne.n	800308a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_PCD_EP_Open+0x94>
 8003094:	2302      	movs	r3, #2
 8003096:	e00e      	b.n	80030b6 <HAL_PCD_EP_Open+0xb2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68f9      	ldr	r1, [r7, #12]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 fe86 	bl	8005db8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80030b4:	7afb      	ldrb	r3, [r7, #11]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	da0e      	bge.n	80030f0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 0207 	and.w	r2, r3, #7
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	3310      	adds	r3, #16
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	705a      	strb	r2, [r3, #1]
 80030ee:	e00e      	b.n	800310e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 0207 	and.w	r2, r3, #7
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_PCD_EP_Close+0x6a>
 8003124:	2302      	movs	r3, #2
 8003126:	e00e      	b.n	8003146 <HAL_PCD_EP_Close+0x88>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68f9      	ldr	r1, [r7, #12]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fa02 	bl	8006540 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	460b      	mov	r3, r1
 800315c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	f003 0207 	and.w	r2, r3, #7
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318e:	7afb      	ldrb	r3, [r7, #11]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	b2da      	uxtb	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fbba 	bl	800691a <USB_EPStartXfer>

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	460b      	mov	r3, r1
 80031be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	7afb      	ldrb	r3, [r7, #11]
 80031c2:	f003 0207 	and.w	r2, r3, #7
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	3310      	adds	r3, #16
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2201      	movs	r2, #1
 80031fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fc:	7afb      	ldrb	r3, [r7, #11]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	b2da      	uxtb	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6979      	ldr	r1, [r7, #20]
 800320e:	4618      	mov	r0, r3
 8003210:	f003 fb83 	bl	800691a <USB_EPStartXfer>

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	7912      	ldrb	r2, [r2, #4]
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e03e      	b.n	80032ba <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800323c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003240:	2b00      	cmp	r3, #0
 8003242:	da0e      	bge.n	8003262 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 0207 	and.w	r2, r3, #7
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	3310      	adds	r3, #16
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	705a      	strb	r2, [r3, #1]
 8003260:	e00c      	b.n	800327c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_PCD_EP_SetStall+0x7e>
 8003298:	2302      	movs	r3, #2
 800329a:	e00e      	b.n	80032ba <HAL_PCD_EP_SetStall+0x9c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f004 fee7 	bl	800807e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	7912      	ldrb	r2, [r2, #4]
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e040      	b.n	8003362 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da0e      	bge.n	8003306 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 0207 	and.w	r2, r3, #7
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	3310      	adds	r3, #16
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	705a      	strb	r2, [r3, #1]
 8003304:	e00e      	b.n	8003324 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 0207 	and.w	r2, r3, #7
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_PCD_EP_ClrStall+0x82>
 8003340:	2302      	movs	r3, #2
 8003342:	e00e      	b.n	8003362 <HAL_PCD_EP_ClrStall+0xa0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fee4 	bl	8008120 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b096      	sub	sp, #88	@ 0x58
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003372:	e3bb      	b.n	8003aec <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800337c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003380:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 800338e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 8175 	bne.w	8003682 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003398:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d14e      	bne.n	8003442 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80033b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b4:	81fb      	strh	r3, [r7, #14]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	89fb      	ldrh	r3, [r7, #14]
 80033bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3310      	adds	r3, #16
 80033cc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	3302      	adds	r3, #2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	441a      	add	r2, r3
 8003404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003406:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003408:	2100      	movs	r1, #0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f006 fbe5 	bl	8009bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7b1b      	ldrb	r3, [r3, #12]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8368 	beq.w	8003aec <PCD_EP_ISR_Handler+0x782>
 800341c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f040 8363 	bne.w	8003aec <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7b1b      	ldrb	r3, [r3, #12]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003430:	b2da      	uxtb	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	731a      	strb	r2, [r3, #12]
 8003440:	e354      	b.n	8003aec <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003448:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003454:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800345c:	2b00      	cmp	r3, #0
 800345e:	d034      	beq.n	80034ca <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	3306      	adds	r3, #6
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003498:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f004 ff61 	bl	8008366 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034b0:	4013      	ands	r3, r2
 80034b2:	823b      	strh	r3, [r7, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	8a3a      	ldrh	r2, [r7, #16]
 80034ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034be:	b292      	uxth	r2, r2
 80034c0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f006 fb5c 	bl	8009b80 <HAL_PCD_SetupStageCallback>
 80034c8:	e310      	b.n	8003aec <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034ca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f280 830c 	bge.w	8003aec <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29a      	uxth	r2, r3
 80034dc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034e0:	4013      	ands	r3, r2
 80034e2:	83fb      	strh	r3, [r7, #30]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	8bfa      	ldrh	r2, [r7, #30]
 80034ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034ee:	b292      	uxth	r2, r2
 80034f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	3306      	adds	r3, #6
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800351a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800351e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d019      	beq.n	800355a <PCD_EP_ISR_Handler+0x1f0>
 8003526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	6959      	ldr	r1, [r3, #20]
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800353e:	b29b      	uxth	r3, r3
 8003540:	f004 ff11 	bl	8008366 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	441a      	add	r2, r3
 800354e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003550:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003552:	2100      	movs	r1, #0
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f006 fb25 	bl	8009ba4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003564:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800356c:	2b00      	cmp	r3, #0
 800356e:	f040 82bd 	bne.w	8003aec <PCD_EP_ISR_Handler+0x782>
 8003572:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003576:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800357a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800357e:	f000 82b5 	beq.w	8003aec <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4413      	add	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <PCD_EP_ISR_Handler+0x266>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	801a      	strh	r2, [r3, #0]
 80035ce:	e039      	b.n	8003644 <PCD_EP_ISR_Handler+0x2da>
 80035d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80035d6:	d818      	bhi.n	800360a <PCD_EP_ISR_Handler+0x2a0>
 80035d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <PCD_EP_ISR_Handler+0x288>
 80035ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ee:	3301      	adds	r3, #1
 80035f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	029b      	lsls	r3, r3, #10
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4313      	orrs	r3, r2
 8003602:	b29a      	uxth	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	e01c      	b.n	8003644 <PCD_EP_ISR_Handler+0x2da>
 800360a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	647b      	str	r3, [r7, #68]	@ 0x44
 8003612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <PCD_EP_ISR_Handler+0x2ba>
 800361e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003620:	3b01      	subs	r3, #1
 8003622:	647b      	str	r3, [r7, #68]	@ 0x44
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29a      	uxth	r2, r3
 800362a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800362c:	b29b      	uxth	r3, r3
 800362e:	029b      	lsls	r3, r3, #10
 8003630:	b29b      	uxth	r3, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	b29b      	uxth	r3, r3
 8003636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800363e:	b29a      	uxth	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003654:	827b      	strh	r3, [r7, #18]
 8003656:	8a7b      	ldrh	r3, [r7, #18]
 8003658:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800365c:	827b      	strh	r3, [r7, #18]
 800365e:	8a7b      	ldrh	r3, [r7, #18]
 8003660:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003664:	827b      	strh	r3, [r7, #18]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	8a7b      	ldrh	r3, [r7, #18]
 800366c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367c:	b29b      	uxth	r3, r3
 800367e:	8013      	strh	r3, [r2, #0]
 8003680:	e234      	b.n	8003aec <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003696:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800369a:	2b00      	cmp	r3, #0
 800369c:	f280 80fc 	bge.w	8003898 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80036b6:	4013      	ands	r3, r2
 80036b8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80036ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036d2:	b292      	uxth	r2, r2
 80036d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036d6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ee:	7b1b      	ldrb	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d125      	bne.n	8003740 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	3306      	adds	r3, #6
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800371c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003720:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8092 	beq.w	800384e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003730:	6959      	ldr	r1, [r3, #20]
 8003732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003734:	88da      	ldrh	r2, [r3, #6]
 8003736:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800373a:	f004 fe14 	bl	8008366 <USB_ReadPMA>
 800373e:	e086      	b.n	800384e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003742:	78db      	ldrb	r3, [r3, #3]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d10a      	bne.n	800375e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003748:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800374c:	461a      	mov	r2, r3
 800374e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f9d9 	bl	8003b08 <HAL_PCD_EP_DB_Receive>
 8003756:	4603      	mov	r3, r0
 8003758:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800375c:	e077      	b.n	800384e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003778:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800378e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003792:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800379a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d024      	beq.n	8003806 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	3302      	adds	r3, #2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80037e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02e      	beq.n	800384e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f6:	6959      	ldr	r1, [r3, #20]
 80037f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fa:	891a      	ldrh	r2, [r3, #8]
 80037fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003800:	f004 fdb1 	bl	8008366 <USB_ReadPMA>
 8003804:	e023      	b.n	800384e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800380e:	b29b      	uxth	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	3306      	adds	r3, #6
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003832:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	6959      	ldr	r1, [r3, #20]
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	895a      	ldrh	r2, [r3, #10]
 8003846:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800384a:	f004 fd8c 	bl	8008366 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800384e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003856:	441a      	add	r2, r3
 8003858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800385c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003864:	441a      	add	r2, r3
 8003866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003868:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800386a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <PCD_EP_ISR_Handler+0x514>
 8003872:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	429a      	cmp	r2, r3
 800387c:	d206      	bcs.n	800388c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800387e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f006 f98d 	bl	8009ba4 <HAL_PCD_DataOutStageCallback>
 800388a:	e005      	b.n	8003898 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003892:	4618      	mov	r0, r3
 8003894:	f003 f841 	bl	800691a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003898:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800389c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8123 	beq.w	8003aec <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80038a6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	3310      	adds	r3, #16
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80038d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	441a      	add	r2, r3
 80038e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80038ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80038f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f8:	78db      	ldrb	r3, [r3, #3]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	f040 80a2 	bne.w	8003a44 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003902:	2200      	movs	r2, #0
 8003904:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003908:	7b1b      	ldrb	r3, [r3, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8093 	beq.w	8003a36 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003910:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d046      	beq.n	80039aa <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800391c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391e:	785b      	ldrb	r3, [r3, #1]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d126      	bne.n	8003972 <PCD_EP_ISR_Handler+0x608>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003932:	b29b      	uxth	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	4413      	add	r3, r2
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
 800393c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	011a      	lsls	r2, r3, #4
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	4413      	add	r3, r2
 8003946:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003956:	b29a      	uxth	r2, r3
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800396a:	b29a      	uxth	r2, r3
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	801a      	strh	r2, [r3, #0]
 8003970:	e061      	b.n	8003a36 <PCD_EP_ISR_Handler+0x6cc>
 8003972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d15d      	bne.n	8003a36 <PCD_EP_ISR_Handler+0x6cc>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003988:	b29b      	uxth	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398e:	4413      	add	r3, r2
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	011a      	lsls	r2, r3, #4
 8003998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399a:	4413      	add	r3, r2
 800399c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a4:	2200      	movs	r2, #0
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	e045      	b.n	8003a36 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d126      	bne.n	8003a06 <PCD_EP_ISR_Handler+0x69c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039cc:	4413      	add	r3, r2
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	011a      	lsls	r2, r3, #4
 80039d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d8:	4413      	add	r3, r2
 80039da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039de:	633b      	str	r3, [r7, #48]	@ 0x30
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	801a      	strh	r2, [r3, #0]
 80039f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	801a      	strh	r2, [r3, #0]
 8003a04:	e017      	b.n	8003a36 <PCD_EP_ISR_Handler+0x6cc>
 8003a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a08:	785b      	ldrb	r3, [r3, #1]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d113      	bne.n	8003a36 <PCD_EP_ISR_Handler+0x6cc>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1c:	4413      	add	r3, r2
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	011a      	lsls	r2, r3, #4
 8003a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a28:	4413      	add	r3, r2
 8003a2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	2200      	movs	r2, #0
 8003a34:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f006 f8cc 	bl	8009bda <HAL_PCD_DataInStageCallback>
 8003a42:	e053      	b.n	8003aec <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003a44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d146      	bne.n	8003ade <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	3302      	adds	r3, #2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a78:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d907      	bls.n	8003a98 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a90:	1ad2      	subs	r2, r2, r3
 8003a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a94:	619a      	str	r2, [r3, #24]
 8003a96:	e002      	b.n	8003a9e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f006 f894 	bl	8009bda <HAL_PCD_DataInStageCallback>
 8003ab2:	e01b      	b.n	8003aec <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003abc:	441a      	add	r2, r3
 8003abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003aca:	441a      	add	r2, r3
 8003acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ace:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 ff1f 	bl	800691a <USB_EPStartXfer>
 8003adc:	e006      	b.n	8003aec <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ade:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f91b 	bl	8003d22 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b21b      	sxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f6ff ac3b 	blt.w	8003374 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3758      	adds	r7, #88	@ 0x58
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d07e      	beq.n	8003c1e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	3302      	adds	r3, #2
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	8b7b      	ldrh	r3, [r7, #26]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d306      	bcc.n	8003b62 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	8b7b      	ldrh	r3, [r7, #26]
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	619a      	str	r2, [r3, #24]
 8003b60:	e002      	b.n	8003b68 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2200      	movs	r2, #0
 8003b66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d123      	bne.n	8003bb8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8a:	833b      	strh	r3, [r7, #24]
 8003b8c:	8b3b      	ldrh	r3, [r7, #24]
 8003b8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b92:	833b      	strh	r3, [r7, #24]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	441a      	add	r2, r3
 8003ba2:	8b3b      	ldrh	r3, [r7, #24]
 8003ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01f      	beq.n	8003c02 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bdc:	82fb      	strh	r3, [r7, #22]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	441a      	add	r2, r3
 8003bec:	8afb      	ldrh	r3, [r7, #22]
 8003bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c02:	8b7b      	ldrh	r3, [r7, #26]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8087 	beq.w	8003d18 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6959      	ldr	r1, [r3, #20]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	891a      	ldrh	r2, [r3, #8]
 8003c16:	8b7b      	ldrh	r3, [r7, #26]
 8003c18:	f004 fba5 	bl	8008366 <USB_ReadPMA>
 8003c1c:	e07c      	b.n	8003d18 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	3306      	adds	r3, #6
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	8b7b      	ldrh	r3, [r7, #26]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d306      	bcc.n	8003c60 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	8b7b      	ldrh	r3, [r7, #26]
 8003c58:	1ad2      	subs	r2, r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	619a      	str	r2, [r3, #24]
 8003c5e:	e002      	b.n	8003c66 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2200      	movs	r2, #0
 8003c64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d123      	bne.n	8003cb6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c88:	83fb      	strh	r3, [r7, #30]
 8003c8a:	8bfb      	ldrh	r3, [r7, #30]
 8003c8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c90:	83fb      	strh	r3, [r7, #30]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	8bfb      	ldrh	r3, [r7, #30]
 8003ca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11f      	bne.n	8003d00 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cda:	83bb      	strh	r3, [r7, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	441a      	add	r2, r3
 8003cea:	8bbb      	ldrh	r3, [r7, #28]
 8003cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cf8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d00:	8b7b      	ldrh	r3, [r7, #26]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6959      	ldr	r1, [r3, #20]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	895a      	ldrh	r2, [r3, #10]
 8003d12:	8b7b      	ldrh	r3, [r7, #26]
 8003d14:	f004 fb27 	bl	8008366 <USB_ReadPMA>
    }
  }

  return count;
 8003d18:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b0a4      	sub	sp, #144	@ 0x90
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 81dd 	beq.w	80040f6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	3302      	adds	r3, #2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d64:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d907      	bls.n	8003d84 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d7c:	1ad2      	subs	r2, r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	619a      	str	r2, [r3, #24]
 8003d82:	e002      	b.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2200      	movs	r2, #0
 8003d88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 80b9 	bne.w	8003f06 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d126      	bne.n	8003dea <HAL_PCD_EP_DB_Transmit+0xc8>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db0:	4413      	add	r3, r2
 8003db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	011a      	lsls	r2, r3, #4
 8003dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de6:	801a      	strh	r2, [r3, #0]
 8003de8:	e01a      	b.n	8003e20 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d116      	bne.n	8003e20 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e06:	4413      	add	r3, r2
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	011a      	lsls	r2, r3, #4
 8003e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e12:	4413      	add	r3, r2
 8003e14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	785b      	ldrb	r3, [r3, #1]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d126      	bne.n	8003e7c <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	011a      	lsls	r2, r3, #4
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	801a      	strh	r2, [r3, #0]
 8003e7a:	e017      	b.n	8003eac <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d113      	bne.n	8003eac <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	4413      	add	r3, r2
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	011a      	lsls	r2, r3, #4
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ea4:	623b      	str	r3, [r7, #32]
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f005 fe91 	bl	8009bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 82fc 	beq.w	80044bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	82fb      	strh	r3, [r7, #22]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	8afb      	ldrh	r3, [r7, #22]
 8003ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	8013      	strh	r3, [r2, #0]
 8003f04:	e2da      	b.n	80044bc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d021      	beq.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	f040 82ae 	bne.w	80044bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003f68:	441a      	add	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003f76:	441a      	add	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6a1a      	ldr	r2, [r3, #32]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d30b      	bcc.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6a1a      	ldr	r2, [r3, #32]
 8003f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f98:	1ad2      	subs	r2, r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	621a      	str	r2, [r3, #32]
 8003f9e:	e017      	b.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d108      	bne.n	8003fba <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003fa8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003fac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003fb8:	e00a      	b.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d165      	bne.n	80040a4 <HAL_PCD_EP_DB_Transmit+0x382>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fec:	4413      	add	r3, r2
 8003fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	011a      	lsls	r2, r3, #4
 8003ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800400a:	b29a      	uxth	r2, r3
 800400c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_PCD_EP_DB_Transmit+0x30c>
 8004018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004026:	b29a      	uxth	r2, r3
 8004028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	e057      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x3bc>
 800402e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004032:	2b3e      	cmp	r3, #62	@ 0x3e
 8004034:	d818      	bhi.n	8004068 <HAL_PCD_EP_DB_Transmit+0x346>
 8004036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800403e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_PCD_EP_DB_Transmit+0x32e>
 800404a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800404c:	3301      	adds	r3, #1
 800404e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29a      	uxth	r2, r3
 8004056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004058:	b29b      	uxth	r3, r3
 800405a:	029b      	lsls	r3, r3, #10
 800405c:	b29b      	uxth	r3, r3
 800405e:	4313      	orrs	r3, r2
 8004060:	b29a      	uxth	r2, r3
 8004062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	e03a      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <HAL_PCD_EP_DB_Transmit+0x360>
 800407c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800407e:	3b01      	subs	r3, #1
 8004080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29a      	uxth	r2, r3
 8004088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800408a:	b29b      	uxth	r3, r3
 800408c:	029b      	lsls	r3, r3, #10
 800408e:	b29b      	uxth	r3, r3
 8004090:	4313      	orrs	r3, r2
 8004092:	b29b      	uxth	r3, r3
 8004094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409c:	b29a      	uxth	r2, r3
 800409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a0:	801a      	strh	r2, [r3, #0]
 80040a2:	e01c      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	785b      	ldrb	r3, [r3, #1]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d118      	bne.n	80040de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c0:	4413      	add	r3, r2
 80040c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	011a      	lsls	r2, r3, #4
 80040ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040cc:	4413      	add	r3, r2
 80040ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80040d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d8:	b29a      	uxth	r2, r3
 80040da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6959      	ldr	r1, [r3, #20]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	891a      	ldrh	r2, [r3, #8]
 80040ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f004 f8f3 	bl	80082da <USB_WritePMA>
 80040f4:	e1e2      	b.n	80044bc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	3306      	adds	r3, #6
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800411e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800412a:	429a      	cmp	r2, r3
 800412c:	d307      	bcc.n	800413e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004136:	1ad2      	subs	r2, r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	619a      	str	r2, [r3, #24]
 800413c:	e002      	b.n	8004144 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2200      	movs	r2, #0
 8004142:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 80c0 	bne.w	80042ce <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	785b      	ldrb	r3, [r3, #1]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d126      	bne.n	80041a4 <HAL_PCD_EP_DB_Transmit+0x482>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800416a:	4413      	add	r3, r2
 800416c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	011a      	lsls	r2, r3, #4
 8004174:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004176:	4413      	add	r3, r2
 8004178:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800417c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800417e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004188:	b29a      	uxth	r2, r3
 800418a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800418c:	801a      	strh	r2, [r3, #0]
 800418e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419c:	b29a      	uxth	r2, r3
 800419e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041a0:	801a      	strh	r2, [r3, #0]
 80041a2:	e01a      	b.n	80041da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d116      	bne.n	80041da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c0:	4413      	add	r3, r2
 80041c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	011a      	lsls	r2, r3, #4
 80041ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041cc:	4413      	add	r3, r2
 80041ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80041d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d6:	2200      	movs	r2, #0
 80041d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	677b      	str	r3, [r7, #116]	@ 0x74
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d12b      	bne.n	8004240 <HAL_PCD_EP_DB_Transmit+0x51e>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041fc:	4413      	add	r3, r2
 80041fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	011a      	lsls	r2, r3, #4
 8004206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004208:	4413      	add	r3, r2
 800420a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800420e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004212:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800421e:	b29a      	uxth	r2, r3
 8004220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004224:	801a      	strh	r2, [r3, #0]
 8004226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004236:	b29a      	uxth	r2, r3
 8004238:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800423c:	801a      	strh	r2, [r3, #0]
 800423e:	e017      	b.n	8004270 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d113      	bne.n	8004270 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004250:	b29b      	uxth	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004256:	4413      	add	r3, r2
 8004258:	677b      	str	r3, [r7, #116]	@ 0x74
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	011a      	lsls	r2, r3, #4
 8004260:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004262:	4413      	add	r3, r2
 8004264:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004268:	673b      	str	r3, [r7, #112]	@ 0x70
 800426a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800426c:	2200      	movs	r2, #0
 800426e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	4619      	mov	r1, r3
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f005 fcaf 	bl	8009bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 811a 	bne.w	80044bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800429e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a2:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80042b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	8013      	strh	r3, [r2, #0]
 80042cc:	e0f6      	b.n	80044bc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d121      	bne.n	800431c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800430c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004310:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004322:	2b01      	cmp	r3, #1
 8004324:	f040 80ca 	bne.w	80044bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004330:	441a      	add	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800433e:	441a      	add	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	429a      	cmp	r2, r3
 800434e:	d30b      	bcc.n	8004368 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6a1a      	ldr	r2, [r3, #32]
 800435c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004360:	1ad2      	subs	r2, r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	621a      	str	r2, [r3, #32]
 8004366:	e017      	b.n	8004398 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d108      	bne.n	8004382 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004370:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004374:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004380:	e00a      	b.n	8004398 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2200      	movs	r2, #0
 800438e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	657b      	str	r3, [r7, #84]	@ 0x54
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	785b      	ldrb	r3, [r3, #1]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d165      	bne.n	8004472 <HAL_PCD_EP_DB_Transmit+0x750>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ba:	4413      	add	r3, r2
 80043bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	011a      	lsls	r2, r3, #4
 80043c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043c6:	4413      	add	r3, r2
 80043c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d8:	b29a      	uxth	r2, r3
 80043da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <HAL_PCD_EP_DB_Transmit+0x6da>
 80043e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043f8:	801a      	strh	r2, [r3, #0]
 80043fa:	e054      	b.n	80044a6 <HAL_PCD_EP_DB_Transmit+0x784>
 80043fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004400:	2b3e      	cmp	r3, #62	@ 0x3e
 8004402:	d818      	bhi.n	8004436 <HAL_PCD_EP_DB_Transmit+0x714>
 8004404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800440c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800441a:	3301      	adds	r3, #1
 800441c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800441e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29a      	uxth	r2, r3
 8004424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004426:	b29b      	uxth	r3, r3
 8004428:	029b      	lsls	r3, r3, #10
 800442a:	b29b      	uxth	r3, r3
 800442c:	4313      	orrs	r3, r2
 800442e:	b29a      	uxth	r2, r3
 8004430:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	e037      	b.n	80044a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800443e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <HAL_PCD_EP_DB_Transmit+0x72e>
 800444a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800444c:	3b01      	subs	r3, #1
 800444e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29a      	uxth	r2, r3
 8004456:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004458:	b29b      	uxth	r3, r3
 800445a:	029b      	lsls	r3, r3, #10
 800445c:	b29b      	uxth	r3, r3
 800445e:	4313      	orrs	r3, r2
 8004460:	b29b      	uxth	r3, r3
 8004462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446a:	b29a      	uxth	r2, r3
 800446c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	e019      	b.n	80044a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d115      	bne.n	80044a6 <HAL_PCD_EP_DB_Transmit+0x784>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004482:	b29b      	uxth	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004488:	4413      	add	r3, r2
 800448a:	657b      	str	r3, [r7, #84]	@ 0x54
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	011a      	lsls	r2, r3, #4
 8004492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004494:	4413      	add	r3, r2
 8004496:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800449a:	653b      	str	r3, [r7, #80]	@ 0x50
 800449c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6959      	ldr	r1, [r3, #20]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	895a      	ldrh	r2, [r3, #10]
 80044b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f003 ff0f 	bl	80082da <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044d6:	82bb      	strh	r3, [r7, #20]
 80044d8:	8abb      	ldrh	r3, [r7, #20]
 80044da:	f083 0310 	eor.w	r3, r3, #16
 80044de:	82bb      	strh	r3, [r7, #20]
 80044e0:	8abb      	ldrh	r3, [r7, #20]
 80044e2:	f083 0320 	eor.w	r3, r3, #32
 80044e6:	82bb      	strh	r3, [r7, #20]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	8abb      	ldrh	r3, [r7, #20]
 80044f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004508:	b29b      	uxth	r3, r3
 800450a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3790      	adds	r7, #144	@ 0x90
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004516:	b480      	push	{r7}
 8004518:	b087      	sub	sp, #28
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	607b      	str	r3, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	817b      	strh	r3, [r7, #10]
 8004524:	4613      	mov	r3, r2
 8004526:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004528:	897b      	ldrh	r3, [r7, #10]
 800452a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004534:	897b      	ldrh	r3, [r7, #10]
 8004536:	f003 0207 	and.w	r2, r3, #7
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	3310      	adds	r3, #16
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e009      	b.n	8004560 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800454c:	897a      	ldrh	r2, [r7, #10]
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004560:	893b      	ldrh	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	b29a      	uxth	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	80da      	strh	r2, [r3, #6]
 8004574:	e00b      	b.n	800458e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2201      	movs	r2, #1
 800457a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	b29a      	uxth	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b29a      	uxth	r2, r3
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f001 b823 	b.w	8005608 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 817d 	beq.w	80048d2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045d8:	4bbc      	ldr	r3, [pc, #752]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d00c      	beq.n	80045fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045e4:	4bb9      	ldr	r3, [pc, #740]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d15c      	bne.n	80046aa <HAL_RCC_OscConfig+0x10e>
 80045f0:	4bb6      	ldr	r3, [pc, #728]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fc:	d155      	bne.n	80046aa <HAL_RCC_OscConfig+0x10e>
 80045fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004602:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004612:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b01      	cmp	r3, #1
 8004628:	d102      	bne.n	8004630 <HAL_RCC_OscConfig+0x94>
 800462a:	4ba8      	ldr	r3, [pc, #672]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	e015      	b.n	800465c <HAL_RCC_OscConfig+0xc0>
 8004630:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004634:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004644:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004648:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800464c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004658:	4b9c      	ldr	r3, [pc, #624]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004660:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004664:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004668:	fa92 f2a2 	rbit	r2, r2
 800466c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004670:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004674:	fab2 f282 	clz	r2, r2
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	f042 0220 	orr.w	r2, r2, #32
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	f002 021f 	and.w	r2, r2, #31
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f202 	lsl.w	r2, r1, r2
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 811f 	beq.w	80048d0 <HAL_RCC_OscConfig+0x334>
 8004692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004696:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 8116 	bne.w	80048d0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f000 bfaf 	b.w	8005608 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x12e>
 80046bc:	4b83      	ldr	r3, [pc, #524]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a82      	ldr	r2, [pc, #520]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e036      	b.n	8004738 <HAL_RCC_OscConfig+0x19c>
 80046ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x158>
 80046da:	4b7c      	ldr	r3, [pc, #496]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7b      	ldr	r2, [pc, #492]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b79      	ldr	r3, [pc, #484]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a78      	ldr	r2, [pc, #480]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80046ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e021      	b.n	8004738 <HAL_RCC_OscConfig+0x19c>
 80046f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x184>
 8004706:	4b71      	ldr	r3, [pc, #452]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a70      	ldr	r2, [pc, #448]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 800470c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4b6e      	ldr	r3, [pc, #440]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6d      	ldr	r2, [pc, #436]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 8004718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e00b      	b.n	8004738 <HAL_RCC_OscConfig+0x19c>
 8004720:	4b6a      	ldr	r3, [pc, #424]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a69      	ldr	r2, [pc, #420]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 8004726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b67      	ldr	r3, [pc, #412]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a66      	ldr	r2, [pc, #408]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 8004732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004736:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004738:	4b64      	ldr	r3, [pc, #400]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	f023 020f 	bic.w	r2, r3, #15
 8004740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004744:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	495f      	ldr	r1, [pc, #380]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 800474e:	4313      	orrs	r3, r2
 8004750:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d059      	beq.n	8004816 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fd f973 	bl	8001a4c <HAL_GetTick>
 8004766:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800476c:	f7fd f96e 	bl	8001a4c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b64      	cmp	r3, #100	@ 0x64
 800477a:	d902      	bls.n	8004782 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	f000 bf43 	b.w	8005608 <HAL_RCC_OscConfig+0x106c>
 8004782:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004786:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004796:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d102      	bne.n	80047b4 <HAL_RCC_OscConfig+0x218>
 80047ae:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	e015      	b.n	80047e0 <HAL_RCC_OscConfig+0x244>
 80047b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047b8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80047c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047cc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80047d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80047dc:	4b3b      	ldr	r3, [pc, #236]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047e4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80047e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80047ec:	fa92 f2a2 	rbit	r2, r2
 80047f0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80047f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80047f8:	fab2 f282 	clz	r2, r2
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	f042 0220 	orr.w	r2, r2, #32
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	f002 021f 	and.w	r2, r2, #31
 8004808:	2101      	movs	r1, #1
 800480a:	fa01 f202 	lsl.w	r2, r1, r2
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ab      	beq.n	800476c <HAL_RCC_OscConfig+0x1d0>
 8004814:	e05d      	b.n	80048d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004816:	f7fd f919 	bl	8001a4c <HAL_GetTick>
 800481a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004820:	f7fd f914 	bl	8001a4c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b64      	cmp	r3, #100	@ 0x64
 800482e:	d902      	bls.n	8004836 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	f000 bee9 	b.w	8005608 <HAL_RCC_OscConfig+0x106c>
 8004836:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800483a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800484a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484e:	fab3 f383 	clz	r3, r3
 8004852:	b2db      	uxtb	r3, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d102      	bne.n	8004868 <HAL_RCC_OscConfig+0x2cc>
 8004862:	4b1a      	ldr	r3, [pc, #104]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	e015      	b.n	8004894 <HAL_RCC_OscConfig+0x2f8>
 8004868:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800486c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004874:	fa93 f3a3 	rbit	r3, r3
 8004878:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800487c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004880:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004884:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004890:	4b0e      	ldr	r3, [pc, #56]	@ (80048cc <HAL_RCC_OscConfig+0x330>)
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004898:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800489c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80048a0:	fa92 f2a2 	rbit	r2, r2
 80048a4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80048a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80048ac:	fab2 f282 	clz	r2, r2
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	f042 0220 	orr.w	r2, r2, #32
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	f002 021f 	and.w	r2, r2, #31
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f202 	lsl.w	r2, r1, r2
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1ab      	bne.n	8004820 <HAL_RCC_OscConfig+0x284>
 80048c8:	e003      	b.n	80048d2 <HAL_RCC_OscConfig+0x336>
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 817d 	beq.w	8004be2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80048e8:	4ba6      	ldr	r3, [pc, #664]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80048f4:	4ba3      	ldr	r3, [pc, #652]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d172      	bne.n	80049e6 <HAL_RCC_OscConfig+0x44a>
 8004900:	4ba0      	ldr	r3, [pc, #640]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d16c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x44a>
 800490c:	2302      	movs	r3, #2
 800490e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004912:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800491e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_RCC_OscConfig+0x3a0>
 8004936:	4b93      	ldr	r3, [pc, #588]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	e013      	b.n	8004964 <HAL_RCC_OscConfig+0x3c8>
 800493c:	2302      	movs	r3, #2
 800493e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800494e:	2302      	movs	r3, #2
 8004950:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004954:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004960:	4b88      	ldr	r3, [pc, #544]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	2202      	movs	r2, #2
 8004966:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800496a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800496e:	fa92 f2a2 	rbit	r2, r2
 8004972:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004976:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800497a:	fab2 f282 	clz	r2, r2
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	f042 0220 	orr.w	r2, r2, #32
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	f002 021f 	and.w	r2, r2, #31
 800498a:	2101      	movs	r1, #1
 800498c:	fa01 f202 	lsl.w	r2, r1, r2
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCC_OscConfig+0x410>
 8004996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800499a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f000 be2e 	b.w	8005608 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ac:	4b75      	ldr	r3, [pc, #468]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	21f8      	movs	r1, #248	@ 0xf8
 80049c2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80049ca:	fa91 f1a1 	rbit	r1, r1
 80049ce:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80049d2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80049d6:	fab1 f181 	clz	r1, r1
 80049da:	b2c9      	uxtb	r1, r1
 80049dc:	408b      	lsls	r3, r1
 80049de:	4969      	ldr	r1, [pc, #420]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e4:	e0fd      	b.n	8004be2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8088 	beq.w	8004b08 <HAL_RCC_OscConfig+0x56c>
 80049f8:	2301      	movs	r3, #1
 80049fa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004a0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a18:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	461a      	mov	r2, r3
 8004a20:	2301      	movs	r3, #1
 8004a22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fd f812 	bl	8001a4c <HAL_GetTick>
 8004a28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2e:	f7fd f80d 	bl	8001a4c <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d902      	bls.n	8004a44 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	f000 bde2 	b.w	8005608 <HAL_RCC_OscConfig+0x106c>
 8004a44:	2302      	movs	r3, #2
 8004a46:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004a4e:	fa93 f3a3 	rbit	r3, r3
 8004a52:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004a56:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4d8>
 8004a6e:	4b45      	ldr	r3, [pc, #276]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	e013      	b.n	8004a9c <HAL_RCC_OscConfig+0x500>
 8004a74:	2302      	movs	r3, #2
 8004a76:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004a86:	2302      	movs	r3, #2
 8004a88:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004a8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004a98:	4b3a      	ldr	r3, [pc, #232]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004aa2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004aa6:	fa92 f2a2 	rbit	r2, r2
 8004aaa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004aae:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004ab2:	fab2 f282 	clz	r2, r2
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	f042 0220 	orr.w	r2, r2, #32
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	f002 021f 	and.w	r2, r2, #31
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0af      	beq.n	8004a2e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ace:	4b2d      	ldr	r3, [pc, #180]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ada:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	21f8      	movs	r1, #248	@ 0xf8
 8004ae4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004aec:	fa91 f1a1 	rbit	r1, r1
 8004af0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004af4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004af8:	fab1 f181 	clz	r1, r1
 8004afc:	b2c9      	uxtb	r1, r1
 8004afe:	408b      	lsls	r3, r1
 8004b00:	4920      	ldr	r1, [pc, #128]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]
 8004b06:	e06c      	b.n	8004be2 <HAL_RCC_OscConfig+0x646>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004b1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b1e:	fab3 f383 	clz	r3, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b28:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	461a      	mov	r2, r3
 8004b30:	2300      	movs	r3, #0
 8004b32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fc ff8a 	bl	8001a4c <HAL_GetTick>
 8004b38:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b3e:	f7fc ff85 	bl	8001a4c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d902      	bls.n	8004b54 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	f000 bd5a 	b.w	8005608 <HAL_RCC_OscConfig+0x106c>
 8004b54:	2302      	movs	r3, #2
 8004b56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d104      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5ec>
 8004b7e:	4b01      	ldr	r3, [pc, #4]	@ (8004b84 <HAL_RCC_OscConfig+0x5e8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	e015      	b.n	8004bb0 <HAL_RCC_OscConfig+0x614>
 8004b84:	40021000 	.word	0x40021000
 8004b88:	2302      	movs	r3, #2
 8004b8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004b92:	fa93 f3a3 	rbit	r3, r3
 8004b96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004ba0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004ba4:	fa93 f3a3 	rbit	r3, r3
 8004ba8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004bac:	4bc8      	ldr	r3, [pc, #800]	@ (8004ed0 <HAL_RCC_OscConfig+0x934>)
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004bb6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004bba:	fa92 f2a2 	rbit	r2, r2
 8004bbe:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004bc2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004bc6:	fab2 f282 	clz	r2, r2
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	f042 0220 	orr.w	r2, r2, #32
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	f002 021f 	and.w	r2, r2, #31
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1ad      	bne.n	8004b3e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004be6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8110 	beq.w	8004e18 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bfc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d079      	beq.n	8004cfc <HAL_RCC_OscConfig+0x760>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c1e:	fab3 f383 	clz	r3, r3
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	4bab      	ldr	r3, [pc, #684]	@ (8004ed4 <HAL_RCC_OscConfig+0x938>)
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2301      	movs	r3, #1
 8004c30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c32:	f7fc ff0b 	bl	8001a4c <HAL_GetTick>
 8004c36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c3c:	f7fc ff06 	bl	8001a4c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d902      	bls.n	8004c52 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	f000 bcdb 	b.w	8005608 <HAL_RCC_OscConfig+0x106c>
 8004c52:	2302      	movs	r3, #2
 8004c54:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c58:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c68:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	fa93 f2a3 	rbit	r2, r3
 8004c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c90:	2202      	movs	r2, #2
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	fa93 f2a3 	rbit	r2, r3
 8004ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004caa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cac:	4b88      	ldr	r3, [pc, #544]	@ (8004ed0 <HAL_RCC_OscConfig+0x934>)
 8004cae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004cb8:	2102      	movs	r1, #2
 8004cba:	6019      	str	r1, [r3, #0]
 8004cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	fa93 f1a3 	rbit	r1, r3
 8004cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004cd2:	6019      	str	r1, [r3, #0]
  return result;
 8004cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2101      	movs	r1, #1
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0a0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x6a0>
 8004cfa:	e08d      	b.n	8004e18 <HAL_RCC_OscConfig+0x87c>
 8004cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d00:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d04:	2201      	movs	r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	fa93 f2a3 	rbit	r2, r3
 8004d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d1e:	601a      	str	r2, [r3, #0]
  return result;
 8004d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d24:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d28:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b68      	ldr	r3, [pc, #416]	@ (8004ed4 <HAL_RCC_OscConfig+0x938>)
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3e:	f7fc fe85 	bl	8001a4c <HAL_GetTick>
 8004d42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d48:	f7fc fe80 	bl	8001a4c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d902      	bls.n	8004d5e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	f000 bc55 	b.w	8005608 <HAL_RCC_OscConfig+0x106c>
 8004d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d62:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004d66:	2202      	movs	r2, #2
 8004d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d6e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	fa93 f2a3 	rbit	r2, r3
 8004d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d86:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	fa93 f2a3 	rbit	r2, r3
 8004d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004daa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004dae:	2202      	movs	r2, #2
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004db6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	fa93 f2a3 	rbit	r2, r3
 8004dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004dc8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dca:	4b41      	ldr	r3, [pc, #260]	@ (8004ed0 <HAL_RCC_OscConfig+0x934>)
 8004dcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004dd6:	2102      	movs	r1, #2
 8004dd8:	6019      	str	r1, [r3, #0]
 8004dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dde:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	fa93 f1a3 	rbit	r1, r3
 8004de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004df0:	6019      	str	r1, [r3, #0]
  return result;
 8004df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d197      	bne.n	8004d48 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 81a1 	beq.w	8005170 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e34:	4b26      	ldr	r3, [pc, #152]	@ (8004ed0 <HAL_RCC_OscConfig+0x934>)
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d116      	bne.n	8004e6e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e40:	4b23      	ldr	r3, [pc, #140]	@ (8004ed0 <HAL_RCC_OscConfig+0x934>)
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	4a22      	ldr	r2, [pc, #136]	@ (8004ed0 <HAL_RCC_OscConfig+0x934>)
 8004e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	61d3      	str	r3, [r2, #28]
 8004e4c:	4b20      	ldr	r3, [pc, #128]	@ (8004ed0 <HAL_RCC_OscConfig+0x934>)
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e58:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e62:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004e66:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <HAL_RCC_OscConfig+0x93c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11a      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e7a:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <HAL_RCC_OscConfig+0x93c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a16      	ldr	r2, [pc, #88]	@ (8004ed8 <HAL_RCC_OscConfig+0x93c>)
 8004e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e86:	f7fc fde1 	bl	8001a4c <HAL_GetTick>
 8004e8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8e:	e009      	b.n	8004ea4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e90:	f7fc fddc 	bl	8001a4c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b64      	cmp	r3, #100	@ 0x64
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e3b1      	b.n	8005608 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <HAL_RCC_OscConfig+0x93c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ef      	beq.n	8004e90 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d10d      	bne.n	8004edc <HAL_RCC_OscConfig+0x940>
 8004ec0:	4b03      	ldr	r3, [pc, #12]	@ (8004ed0 <HAL_RCC_OscConfig+0x934>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	4a02      	ldr	r2, [pc, #8]	@ (8004ed0 <HAL_RCC_OscConfig+0x934>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6213      	str	r3, [r2, #32]
 8004ecc:	e03c      	b.n	8004f48 <HAL_RCC_OscConfig+0x9ac>
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	10908120 	.word	0x10908120
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10c      	bne.n	8004f06 <HAL_RCC_OscConfig+0x96a>
 8004eec:	4bc1      	ldr	r3, [pc, #772]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	4ac0      	ldr	r2, [pc, #768]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6213      	str	r3, [r2, #32]
 8004ef8:	4bbe      	ldr	r3, [pc, #760]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	4abd      	ldr	r2, [pc, #756]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004efe:	f023 0304 	bic.w	r3, r3, #4
 8004f02:	6213      	str	r3, [r2, #32]
 8004f04:	e020      	b.n	8004f48 <HAL_RCC_OscConfig+0x9ac>
 8004f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x994>
 8004f16:	4bb7      	ldr	r3, [pc, #732]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	4ab6      	ldr	r2, [pc, #728]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004f1c:	f043 0304 	orr.w	r3, r3, #4
 8004f20:	6213      	str	r3, [r2, #32]
 8004f22:	4bb4      	ldr	r3, [pc, #720]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	4ab3      	ldr	r2, [pc, #716]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6213      	str	r3, [r2, #32]
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCC_OscConfig+0x9ac>
 8004f30:	4bb0      	ldr	r3, [pc, #704]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	4aaf      	ldr	r2, [pc, #700]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	6213      	str	r3, [r2, #32]
 8004f3c:	4bad      	ldr	r3, [pc, #692]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	4aac      	ldr	r2, [pc, #688]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004f42:	f023 0304 	bic.w	r3, r3, #4
 8004f46:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8081 	beq.w	800505c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5a:	f7fc fd77 	bl	8001a4c <HAL_GetTick>
 8004f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f62:	e00b      	b.n	8004f7c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fc fd72 	bl	8001a4c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e345      	b.n	8005608 <HAL_RCC_OscConfig+0x106c>
 8004f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f80:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004f84:	2202      	movs	r2, #2
 8004f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	fa93 f2a3 	rbit	r2, r3
 8004f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004fa8:	2202      	movs	r2, #2
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	fa93 f2a3 	rbit	r2, r3
 8004fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004fc2:	601a      	str	r2, [r3, #0]
  return result;
 8004fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004fcc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCC_OscConfig+0xa4c>
 8004fe2:	4b84      	ldr	r3, [pc, #528]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	e013      	b.n	8005010 <HAL_RCC_OscConfig+0xa74>
 8004fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ff8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	fa93 f2a3 	rbit	r2, r3
 8005002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005006:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	4b79      	ldr	r3, [pc, #484]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005014:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005018:	2102      	movs	r1, #2
 800501a:	6011      	str	r1, [r2, #0]
 800501c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005020:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	fa92 f1a2 	rbit	r1, r2
 800502a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800502e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005032:	6011      	str	r1, [r2, #0]
  return result;
 8005034:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005038:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	fab2 f282 	clz	r2, r2
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	f002 021f 	and.w	r2, r2, #31
 800504e:	2101      	movs	r1, #1
 8005050:	fa01 f202 	lsl.w	r2, r1, r2
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d084      	beq.n	8004f64 <HAL_RCC_OscConfig+0x9c8>
 800505a:	e07f      	b.n	800515c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505c:	f7fc fcf6 	bl	8001a4c <HAL_GetTick>
 8005060:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005064:	e00b      	b.n	800507e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fc fcf1 	bl	8001a4c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e2c4      	b.n	8005608 <HAL_RCC_OscConfig+0x106c>
 800507e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005082:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005086:	2202      	movs	r2, #2
 8005088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800508e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	fa93 f2a3 	rbit	r2, r3
 8005098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800509c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80050aa:	2202      	movs	r2, #2
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	fa93 f2a3 	rbit	r2, r3
 80050bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050c0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80050c4:	601a      	str	r2, [r3, #0]
  return result;
 80050c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80050ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d0:	fab3 f383 	clz	r3, r3
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f043 0302 	orr.w	r3, r3, #2
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d102      	bne.n	80050ea <HAL_RCC_OscConfig+0xb4e>
 80050e4:	4b43      	ldr	r3, [pc, #268]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	e013      	b.n	8005112 <HAL_RCC_OscConfig+0xb76>
 80050ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80050f2:	2202      	movs	r2, #2
 80050f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	fa93 f2a3 	rbit	r2, r3
 8005104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005108:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	4b39      	ldr	r3, [pc, #228]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005112:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005116:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800511a:	2102      	movs	r1, #2
 800511c:	6011      	str	r1, [r2, #0]
 800511e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005122:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	fa92 f1a2 	rbit	r1, r2
 800512c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005130:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005134:	6011      	str	r1, [r2, #0]
  return result;
 8005136:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800513a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	fab2 f282 	clz	r2, r2
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	f002 021f 	and.w	r2, r2, #31
 8005150:	2101      	movs	r1, #1
 8005152:	fa01 f202 	lsl.w	r2, r1, r2
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d184      	bne.n	8005066 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800515c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005160:	2b01      	cmp	r3, #1
 8005162:	d105      	bne.n	8005170 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005164:	4b23      	ldr	r3, [pc, #140]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	4a22      	ldr	r2, [pc, #136]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 800516a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800516e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005174:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8242 	beq.w	8005606 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005182:	4b1c      	ldr	r3, [pc, #112]	@ (80051f4 <HAL_RCC_OscConfig+0xc58>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 030c 	and.w	r3, r3, #12
 800518a:	2b08      	cmp	r3, #8
 800518c:	f000 8213 	beq.w	80055b6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005194:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	2b02      	cmp	r3, #2
 800519e:	f040 8162 	bne.w	8005466 <HAL_RCC_OscConfig+0xeca>
 80051a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051a6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80051aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051b4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	fa93 f2a3 	rbit	r2, r3
 80051be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051c2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80051c6:	601a      	str	r2, [r3, #0]
  return result;
 80051c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051cc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80051d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	fab3 f383 	clz	r3, r3
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80051dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	2300      	movs	r3, #0
 80051e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fc fc30 	bl	8001a4c <HAL_GetTick>
 80051ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f0:	e00c      	b.n	800520c <HAL_RCC_OscConfig+0xc70>
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fc fc28 	bl	8001a4c <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e1fd      	b.n	8005608 <HAL_RCC_OscConfig+0x106c>
 800520c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005210:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005214:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800521e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	fa93 f2a3 	rbit	r2, r3
 8005228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800522c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005230:	601a      	str	r2, [r3, #0]
  return result;
 8005232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005236:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800523a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	b2db      	uxtb	r3, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d102      	bne.n	8005256 <HAL_RCC_OscConfig+0xcba>
 8005250:	4bb0      	ldr	r3, [pc, #704]	@ (8005514 <HAL_RCC_OscConfig+0xf78>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	e027      	b.n	80052a6 <HAL_RCC_OscConfig+0xd0a>
 8005256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800525a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800525e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005268:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	fa93 f2a3 	rbit	r2, r3
 8005272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005276:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005280:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005284:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800528e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	fa93 f2a3 	rbit	r2, r3
 8005298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800529c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	4b9c      	ldr	r3, [pc, #624]	@ (8005514 <HAL_RCC_OscConfig+0xf78>)
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052aa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80052ae:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80052b2:	6011      	str	r1, [r2, #0]
 80052b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052b8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	fa92 f1a2 	rbit	r1, r2
 80052c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052c6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80052ca:	6011      	str	r1, [r2, #0]
  return result;
 80052cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052d0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	fab2 f282 	clz	r2, r2
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	f042 0220 	orr.w	r2, r2, #32
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	f002 021f 	and.w	r2, r2, #31
 80052e6:	2101      	movs	r1, #1
 80052e8:	fa01 f202 	lsl.w	r2, r1, r2
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d182      	bne.n	80051f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f2:	4b88      	ldr	r3, [pc, #544]	@ (8005514 <HAL_RCC_OscConfig+0xf78>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80052fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800530a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	430b      	orrs	r3, r1
 8005314:	497f      	ldr	r1, [pc, #508]	@ (8005514 <HAL_RCC_OscConfig+0xf78>)
 8005316:	4313      	orrs	r3, r2
 8005318:	604b      	str	r3, [r1, #4]
 800531a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800531e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005322:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800532c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	fa93 f2a3 	rbit	r2, r3
 8005336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800533a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800533e:	601a      	str	r2, [r3, #0]
  return result;
 8005340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005344:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005348:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800534a:	fab3 f383 	clz	r3, r3
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005354:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	461a      	mov	r2, r3
 800535c:	2301      	movs	r3, #1
 800535e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fc fb74 	bl	8001a4c <HAL_GetTick>
 8005364:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005368:	e009      	b.n	800537e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536a:	f7fc fb6f 	bl	8001a4c <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e144      	b.n	8005608 <HAL_RCC_OscConfig+0x106c>
 800537e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005382:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005386:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800538a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005390:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	fa93 f2a3 	rbit	r2, r3
 800539a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800539e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80053a2:	601a      	str	r2, [r3, #0]
  return result;
 80053a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053a8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80053ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d102      	bne.n	80053c8 <HAL_RCC_OscConfig+0xe2c>
 80053c2:	4b54      	ldr	r3, [pc, #336]	@ (8005514 <HAL_RCC_OscConfig+0xf78>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	e027      	b.n	8005418 <HAL_RCC_OscConfig+0xe7c>
 80053c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053cc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80053d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053da:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	fa93 f2a3 	rbit	r2, r3
 80053e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80053f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005400:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	fa93 f2a3 	rbit	r2, r3
 800540a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800540e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	4b3f      	ldr	r3, [pc, #252]	@ (8005514 <HAL_RCC_OscConfig+0xf78>)
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800541c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005420:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005424:	6011      	str	r1, [r2, #0]
 8005426:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800542a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	fa92 f1a2 	rbit	r1, r2
 8005434:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005438:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800543c:	6011      	str	r1, [r2, #0]
  return result;
 800543e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005442:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	fab2 f282 	clz	r2, r2
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	f042 0220 	orr.w	r2, r2, #32
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	f002 021f 	and.w	r2, r2, #31
 8005458:	2101      	movs	r1, #1
 800545a:	fa01 f202 	lsl.w	r2, r1, r2
 800545e:	4013      	ands	r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d082      	beq.n	800536a <HAL_RCC_OscConfig+0xdce>
 8005464:	e0cf      	b.n	8005606 <HAL_RCC_OscConfig+0x106a>
 8005466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800546a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800546e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005478:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	fa93 f2a3 	rbit	r2, r3
 8005482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005486:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800548a:	601a      	str	r2, [r3, #0]
  return result;
 800548c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005490:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005494:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005496:	fab3 f383 	clz	r3, r3
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80054a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	461a      	mov	r2, r3
 80054a8:	2300      	movs	r3, #0
 80054aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fc face 	bl	8001a4c <HAL_GetTick>
 80054b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054b4:	e009      	b.n	80054ca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b6:	f7fc fac9 	bl	8001a4c <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e09e      	b.n	8005608 <HAL_RCC_OscConfig+0x106c>
 80054ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054ce:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80054d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80054d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054dc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	fa93 f2a3 	rbit	r2, r3
 80054e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054ea:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80054ee:	601a      	str	r2, [r3, #0]
  return result;
 80054f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054f4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80054f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d104      	bne.n	8005518 <HAL_RCC_OscConfig+0xf7c>
 800550e:	4b01      	ldr	r3, [pc, #4]	@ (8005514 <HAL_RCC_OscConfig+0xf78>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	e029      	b.n	8005568 <HAL_RCC_OscConfig+0xfcc>
 8005514:	40021000 	.word	0x40021000
 8005518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800551c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005520:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800552a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	fa93 f2a3 	rbit	r2, r3
 8005534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005538:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005542:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005546:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005550:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	fa93 f2a3 	rbit	r2, r3
 800555a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800555e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	4b2b      	ldr	r3, [pc, #172]	@ (8005614 <HAL_RCC_OscConfig+0x1078>)
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800556c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005570:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005574:	6011      	str	r1, [r2, #0]
 8005576:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800557a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	fa92 f1a2 	rbit	r1, r2
 8005584:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005588:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800558c:	6011      	str	r1, [r2, #0]
  return result;
 800558e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005592:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	fab2 f282 	clz	r2, r2
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	f042 0220 	orr.w	r2, r2, #32
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	f002 021f 	and.w	r2, r2, #31
 80055a8:	2101      	movs	r1, #1
 80055aa:	fa01 f202 	lsl.w	r2, r1, r2
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d180      	bne.n	80054b6 <HAL_RCC_OscConfig+0xf1a>
 80055b4:	e027      	b.n	8005606 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e01e      	b.n	8005608 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055ca:	4b12      	ldr	r3, [pc, #72]	@ (8005614 <HAL_RCC_OscConfig+0x1078>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80055d6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80055da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d10b      	bne.n	8005602 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80055ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80055ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80055f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055fe:	429a      	cmp	r2, r3
 8005600:	d001      	beq.n	8005606 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000

08005618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b09e      	sub	sp, #120	@ 0x78
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e162      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b90      	ldr	r3, [pc, #576]	@ (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d910      	bls.n	8005660 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b8d      	ldr	r3, [pc, #564]	@ (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f023 0207 	bic.w	r2, r3, #7
 8005646:	498b      	ldr	r1, [pc, #556]	@ (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	4b89      	ldr	r3, [pc, #548]	@ (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e14a      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800566c:	4b82      	ldr	r3, [pc, #520]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	497f      	ldr	r1, [pc, #508]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 800567a:	4313      	orrs	r3, r2
 800567c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 80dc 	beq.w	8005844 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d13c      	bne.n	800570e <HAL_RCC_ClockConfig+0xf6>
 8005694:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005698:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800569c:	fa93 f3a3 	rbit	r3, r3
 80056a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80056a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a4:	fab3 f383 	clz	r3, r3
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d102      	bne.n	80056be <HAL_RCC_ClockConfig+0xa6>
 80056b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	e00f      	b.n	80056de <HAL_RCC_ClockConfig+0xc6>
 80056be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056c6:	fa93 f3a3 	rbit	r3, r3
 80056ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80056cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80056d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056d4:	fa93 f3a3 	rbit	r3, r3
 80056d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056da:	4b67      	ldr	r3, [pc, #412]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056e6:	fa92 f2a2 	rbit	r2, r2
 80056ea:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80056ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056ee:	fab2 f282 	clz	r2, r2
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	f042 0220 	orr.w	r2, r2, #32
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	f002 021f 	and.w	r2, r2, #31
 80056fe:	2101      	movs	r1, #1
 8005700:	fa01 f202 	lsl.w	r2, r1, r2
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d17b      	bne.n	8005802 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e0f3      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d13c      	bne.n	8005790 <HAL_RCC_ClockConfig+0x178>
 8005716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800571a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800571e:	fa93 f3a3 	rbit	r3, r3
 8005722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005726:	fab3 f383 	clz	r3, r3
 800572a:	b2db      	uxtb	r3, r3
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d102      	bne.n	8005740 <HAL_RCC_ClockConfig+0x128>
 800573a:	4b4f      	ldr	r3, [pc, #316]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	e00f      	b.n	8005760 <HAL_RCC_ClockConfig+0x148>
 8005740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005744:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005748:	fa93 f3a3 	rbit	r3, r3
 800574c:	647b      	str	r3, [r7, #68]	@ 0x44
 800574e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005752:	643b      	str	r3, [r7, #64]	@ 0x40
 8005754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005756:	fa93 f3a3 	rbit	r3, r3
 800575a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800575c:	4b46      	ldr	r3, [pc, #280]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005764:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005766:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005768:	fa92 f2a2 	rbit	r2, r2
 800576c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800576e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005770:	fab2 f282 	clz	r2, r2
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	f042 0220 	orr.w	r2, r2, #32
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	f002 021f 	and.w	r2, r2, #31
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f202 	lsl.w	r2, r1, r2
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d13a      	bne.n	8005802 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0b2      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2de>
 8005790:	2302      	movs	r3, #2
 8005792:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	fa93 f3a3 	rbit	r3, r3
 800579a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800579c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579e:	fab3 f383 	clz	r3, r3
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f043 0301 	orr.w	r3, r3, #1
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d102      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x1a0>
 80057b2:	4b31      	ldr	r3, [pc, #196]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	e00d      	b.n	80057d4 <HAL_RCC_ClockConfig+0x1bc>
 80057b8:	2302      	movs	r3, #2
 80057ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057be:	fa93 f3a3 	rbit	r3, r3
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c4:	2302      	movs	r3, #2
 80057c6:	623b      	str	r3, [r7, #32]
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	fa93 f3a3 	rbit	r3, r3
 80057ce:	61fb      	str	r3, [r7, #28]
 80057d0:	4b29      	ldr	r3, [pc, #164]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	2202      	movs	r2, #2
 80057d6:	61ba      	str	r2, [r7, #24]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	fa92 f2a2 	rbit	r2, r2
 80057de:	617a      	str	r2, [r7, #20]
  return result;
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	fab2 f282 	clz	r2, r2
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	f042 0220 	orr.w	r2, r2, #32
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	f002 021f 	and.w	r2, r2, #31
 80057f2:	2101      	movs	r1, #1
 80057f4:	fa01 f202 	lsl.w	r2, r1, r2
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e079      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005802:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f023 0203 	bic.w	r2, r3, #3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	491a      	ldr	r1, [pc, #104]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005810:	4313      	orrs	r3, r2
 8005812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005814:	f7fc f91a 	bl	8001a4c <HAL_GetTick>
 8005818:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581a:	e00a      	b.n	8005832 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581c:	f7fc f916 	bl	8001a4c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e061      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005832:	4b11      	ldr	r3, [pc, #68]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f003 020c 	and.w	r2, r3, #12
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	429a      	cmp	r2, r3
 8005842:	d1eb      	bne.n	800581c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005844:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d214      	bcs.n	800587c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005852:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 0207 	bic.w	r2, r3, #7
 800585a:	4906      	ldr	r1, [pc, #24]	@ (8005874 <HAL_RCC_ClockConfig+0x25c>)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	4313      	orrs	r3, r2
 8005860:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005862:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d005      	beq.n	800587c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e040      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2de>
 8005874:	40022000 	.word	0x40022000
 8005878:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005888:	4b1d      	ldr	r3, [pc, #116]	@ (8005900 <HAL_RCC_ClockConfig+0x2e8>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	491a      	ldr	r1, [pc, #104]	@ (8005900 <HAL_RCC_ClockConfig+0x2e8>)
 8005896:	4313      	orrs	r3, r2
 8005898:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058a6:	4b16      	ldr	r3, [pc, #88]	@ (8005900 <HAL_RCC_ClockConfig+0x2e8>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4912      	ldr	r1, [pc, #72]	@ (8005900 <HAL_RCC_ClockConfig+0x2e8>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80058ba:	f000 f829 	bl	8005910 <HAL_RCC_GetSysClockFreq>
 80058be:	4601      	mov	r1, r0
 80058c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005900 <HAL_RCC_ClockConfig+0x2e8>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058c8:	22f0      	movs	r2, #240	@ 0xf0
 80058ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	fa92 f2a2 	rbit	r2, r2
 80058d2:	60fa      	str	r2, [r7, #12]
  return result;
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	fab2 f282 	clz	r2, r2
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	40d3      	lsrs	r3, r2
 80058de:	4a09      	ldr	r2, [pc, #36]	@ (8005904 <HAL_RCC_ClockConfig+0x2ec>)
 80058e0:	5cd3      	ldrb	r3, [r2, r3]
 80058e2:	fa21 f303 	lsr.w	r3, r1, r3
 80058e6:	4a08      	ldr	r2, [pc, #32]	@ (8005908 <HAL_RCC_ClockConfig+0x2f0>)
 80058e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80058ea:	4b08      	ldr	r3, [pc, #32]	@ (800590c <HAL_RCC_ClockConfig+0x2f4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fc f868 	bl	80019c4 <HAL_InitTick>
  
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3778      	adds	r7, #120	@ 0x78
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000
 8005904:	0800e96c 	.word	0x0800e96c
 8005908:	20000000 	.word	0x20000000
 800590c:	20000004 	.word	0x20000004

08005910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	2300      	movs	r3, #0
 8005924:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800592a:	4b1e      	ldr	r3, [pc, #120]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b04      	cmp	r3, #4
 8005938:	d002      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0x30>
 800593a:	2b08      	cmp	r3, #8
 800593c:	d003      	beq.n	8005946 <HAL_RCC_GetSysClockFreq+0x36>
 800593e:	e026      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005940:	4b19      	ldr	r3, [pc, #100]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005942:	613b      	str	r3, [r7, #16]
      break;
 8005944:	e026      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	0c9b      	lsrs	r3, r3, #18
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	4a17      	ldr	r2, [pc, #92]	@ (80059ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005950:	5cd3      	ldrb	r3, [r2, r3]
 8005952:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005954:	4b13      	ldr	r3, [pc, #76]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	4a14      	ldr	r2, [pc, #80]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800595e:	5cd3      	ldrb	r3, [r2, r3]
 8005960:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800596c:	4a0e      	ldr	r2, [pc, #56]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x98>)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	fbb2 f2f3 	udiv	r2, r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e004      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a0c      	ldr	r2, [pc, #48]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	613b      	str	r3, [r7, #16]
      break;
 800598c:	e002      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800598e:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005990:	613b      	str	r3, [r7, #16]
      break;
 8005992:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005994:	693b      	ldr	r3, [r7, #16]
}
 8005996:	4618      	mov	r0, r3
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000
 80059a8:	007a1200 	.word	0x007a1200
 80059ac:	0800e97c 	.word	0x0800e97c
 80059b0:	0800e98c 	.word	0x0800e98c
 80059b4:	003d0900 	.word	0x003d0900

080059b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b092      	sub	sp, #72	@ 0x48
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80d4 	beq.w	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10e      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	61d3      	str	r3, [r2, #28]
 80059f4:	4b48      	ldr	r3, [pc, #288]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a06:	4b45      	ldr	r3, [pc, #276]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d118      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a12:	4b42      	ldr	r3, [pc, #264]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a41      	ldr	r2, [pc, #260]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a1e:	f7fc f815 	bl	8001a4c <HAL_GetTick>
 8005a22:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a24:	e008      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a26:	f7fc f811 	bl	8001a4c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b64      	cmp	r3, #100	@ 0x64
 8005a32:	d901      	bls.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e169      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a38:	4b38      	ldr	r3, [pc, #224]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a44:	4b34      	ldr	r3, [pc, #208]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8084 	beq.w	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d07c      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a64:	4b2c      	ldr	r3, [pc, #176]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	fa93 f3a3 	rbit	r3, r3
 8005a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a7e:	fab3 f383 	clz	r3, r3
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	4b26      	ldr	r3, [pc, #152]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2301      	movs	r3, #1
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9a:	fa93 f3a3 	rbit	r3, r3
 8005a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005aa2:	fab3 f383 	clz	r3, r3
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ab6:	4a18      	ldr	r2, [pc, #96]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04b      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac6:	f7fb ffc1 	bl	8001a4c <HAL_GetTick>
 8005aca:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fb ffbd 	bl	8001a4c <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e113      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aea:	fa93 f3a3 	rbit	r3, r3
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af0:	2302      	movs	r3, #2
 8005af2:	623b      	str	r3, [r7, #32]
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	fa93 f3a3 	rbit	r3, r3
 8005afa:	61fb      	str	r3, [r7, #28]
  return result;
 8005afc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afe:	fab3 f383 	clz	r3, r3
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f043 0302 	orr.w	r3, r3, #2
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d108      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005b12:	4b01      	ldr	r3, [pc, #4]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	e00d      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	40007000 	.word	0x40007000
 8005b20:	10908100 	.word	0x10908100
 8005b24:	2302      	movs	r3, #2
 8005b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	fa93 f3a3 	rbit	r3, r3
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	4b78      	ldr	r3, [pc, #480]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b34:	2202      	movs	r2, #2
 8005b36:	613a      	str	r2, [r7, #16]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	fa92 f2a2 	rbit	r2, r2
 8005b3e:	60fa      	str	r2, [r7, #12]
  return result;
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	fab2 f282 	clz	r2, r2
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	f002 021f 	and.w	r2, r2, #31
 8005b52:	2101      	movs	r1, #1
 8005b54:	fa01 f202 	lsl.w	r2, r1, r2
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0b7      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	496a      	ldr	r1, [pc, #424]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d105      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b78:	4b66      	ldr	r3, [pc, #408]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	4a65      	ldr	r2, [pc, #404]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b90:	4b60      	ldr	r3, [pc, #384]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	f023 0203 	bic.w	r2, r3, #3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	495d      	ldr	r1, [pc, #372]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d008      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bae:	4b59      	ldr	r3, [pc, #356]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	4956      	ldr	r1, [pc, #344]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d008      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bcc:	4b51      	ldr	r3, [pc, #324]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	494e      	ldr	r1, [pc, #312]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d008      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bea:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bee:	f023 0210 	bic.w	r2, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	4947      	ldr	r1, [pc, #284]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d008      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005c08:	4b42      	ldr	r3, [pc, #264]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c14:	493f      	ldr	r1, [pc, #252]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d008      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c26:	4b3b      	ldr	r3, [pc, #236]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2a:	f023 0220 	bic.w	r2, r3, #32
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	4938      	ldr	r1, [pc, #224]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c44:	4b33      	ldr	r3, [pc, #204]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	4930      	ldr	r1, [pc, #192]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c62:	4b2c      	ldr	r3, [pc, #176]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	4929      	ldr	r1, [pc, #164]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c80:	4b24      	ldr	r3, [pc, #144]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	4921      	ldr	r1, [pc, #132]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	491a      	ldr	r1, [pc, #104]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005cbc:	4b15      	ldr	r3, [pc, #84]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc8:	4912      	ldr	r1, [pc, #72]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005cda:	4b0e      	ldr	r3, [pc, #56]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cde:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce6:	490b      	ldr	r1, [pc, #44]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005cf8:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d04:	4903      	ldr	r1, [pc, #12]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3748      	adds	r7, #72	@ 0x48
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40021000 	.word	0x40021000

08005d18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d28:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005d2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d4e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005d52:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	43db      	mvns	r3, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4013      	ands	r3, r2
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b09d      	sub	sp, #116	@ 0x74
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dde:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	78db      	ldrb	r3, [r3, #3]
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d81f      	bhi.n	8005e2a <USB_ActivateEndpoint+0x72>
 8005dea:	a201      	add	r2, pc, #4	@ (adr r2, 8005df0 <USB_ActivateEndpoint+0x38>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e01 	.word	0x08005e01
 8005df4:	08005e1d 	.word	0x08005e1d
 8005df8:	08005e33 	.word	0x08005e33
 8005dfc:	08005e0f 	.word	0x08005e0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005e0c:	e012      	b.n	8005e34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e12:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005e16:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005e1a:	e00b      	b.n	8005e34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005e28:	e004      	b.n	8005e34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005e30:	e000      	b.n	8005e34 <USB_ActivateEndpoint+0x7c>
      break;
 8005e32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	441a      	add	r2, r3
 8005e3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	b21b      	sxth	r3, r3
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6e:	b21a      	sxth	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	b21b      	sxth	r3, r3
 8005e76:	4313      	orrs	r3, r2
 8005e78:	b21b      	sxth	r3, r3
 8005e7a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	7b1b      	ldrb	r3, [r3, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 8178 	bne.w	800619a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	785b      	ldrb	r3, [r3, #1]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8084 	beq.w	8005fbc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	011a      	lsls	r2, r3, #4
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	88db      	ldrh	r3, [r3, #6]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	827b      	strh	r3, [r7, #18]
 8005ef6:	8a7b      	ldrh	r3, [r7, #18]
 8005ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <USB_ActivateEndpoint+0x180>
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f16:	823b      	strh	r3, [r7, #16]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	8a3b      	ldrh	r3, [r7, #16]
 8005f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	78db      	ldrb	r3, [r3, #3]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d020      	beq.n	8005f82 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f56:	81bb      	strh	r3, [r7, #12]
 8005f58:	89bb      	ldrh	r3, [r7, #12]
 8005f5a:	f083 0320 	eor.w	r3, r3, #32
 8005f5e:	81bb      	strh	r3, [r7, #12]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	89bb      	ldrh	r3, [r7, #12]
 8005f6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8013      	strh	r3, [r2, #0]
 8005f80:	e2d5      	b.n	800652e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f98:	81fb      	strh	r3, [r7, #14]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	441a      	add	r2, r3
 8005fa4:	89fb      	ldrh	r3, [r7, #14]
 8005fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	8013      	strh	r3, [r2, #0]
 8005fba:	e2b8      	b.n	800652e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fcc:	4413      	add	r3, r2
 8005fce:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	011a      	lsls	r2, r3, #4
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	88db      	ldrh	r3, [r3, #6]
 8005fe4:	085b      	lsrs	r3, r3, #1
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	4413      	add	r3, r2
 8006002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	011a      	lsls	r2, r3, #4
 800600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600c:	4413      	add	r3, r2
 800600e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800601e:	b29a      	uxth	r2, r3
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <USB_ActivateEndpoint+0x28a>
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603a:	b29a      	uxth	r2, r3
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	801a      	strh	r2, [r3, #0]
 8006040:	e039      	b.n	80060b6 <USB_ActivateEndpoint+0x2fe>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b3e      	cmp	r3, #62	@ 0x3e
 8006048:	d818      	bhi.n	800607c <USB_ActivateEndpoint+0x2c4>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <USB_ActivateEndpoint+0x2ac>
 800605e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006060:	3301      	adds	r3, #1
 8006062:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29a      	uxth	r2, r3
 800606a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800606c:	b29b      	uxth	r3, r3
 800606e:	029b      	lsls	r3, r3, #10
 8006070:	b29b      	uxth	r3, r3
 8006072:	4313      	orrs	r3, r2
 8006074:	b29a      	uxth	r2, r3
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e01c      	b.n	80060b6 <USB_ActivateEndpoint+0x2fe>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <USB_ActivateEndpoint+0x2de>
 8006090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006092:	3b01      	subs	r3, #1
 8006094:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29a      	uxth	r2, r3
 800609c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800609e:	b29b      	uxth	r3, r3
 80060a0:	029b      	lsls	r3, r3, #10
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80060c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01b      	beq.n	8006106 <USB_ActivateEndpoint+0x34e>
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e4:	843b      	strh	r3, [r7, #32]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	441a      	add	r2, r3
 80060f0:	8c3b      	ldrh	r3, [r7, #32]
 80060f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006102:	b29b      	uxth	r3, r3
 8006104:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d124      	bne.n	8006158 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006124:	83bb      	strh	r3, [r7, #28]
 8006126:	8bbb      	ldrh	r3, [r7, #28]
 8006128:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800612c:	83bb      	strh	r3, [r7, #28]
 800612e:	8bbb      	ldrh	r3, [r7, #28]
 8006130:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006134:	83bb      	strh	r3, [r7, #28]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	441a      	add	r2, r3
 8006140:	8bbb      	ldrh	r3, [r7, #28]
 8006142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800614a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800614e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006152:	b29b      	uxth	r3, r3
 8006154:	8013      	strh	r3, [r2, #0]
 8006156:	e1ea      	b.n	800652e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800616a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616e:	83fb      	strh	r3, [r7, #30]
 8006170:	8bfb      	ldrh	r3, [r7, #30]
 8006172:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006176:	83fb      	strh	r3, [r7, #30]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	441a      	add	r2, r3
 8006182:	8bfb      	ldrh	r3, [r7, #30]
 8006184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800618c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006194:	b29b      	uxth	r3, r3
 8006196:	8013      	strh	r3, [r2, #0]
 8006198:	e1c9      	b.n	800652e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d11e      	bne.n	80061e0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80061ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061d2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80061d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061da:	b29b      	uxth	r3, r3
 80061dc:	8013      	strh	r3, [r2, #0]
 80061de:	e01d      	b.n	800621c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80061f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	441a      	add	r2, r3
 8006204:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800620c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006218:	b29b      	uxth	r3, r3
 800621a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006226:	b29b      	uxth	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800622c:	4413      	add	r3, r2
 800622e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	011a      	lsls	r2, r3, #4
 8006236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006238:	4413      	add	r3, r2
 800623a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800623e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	891b      	ldrh	r3, [r3, #8]
 8006244:	085b      	lsrs	r3, r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	657b      	str	r3, [r7, #84]	@ 0x54
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800625a:	b29b      	uxth	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006260:	4413      	add	r3, r2
 8006262:	657b      	str	r3, [r7, #84]	@ 0x54
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	011a      	lsls	r2, r3, #4
 800626a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800626c:	4413      	add	r3, r2
 800626e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006272:	653b      	str	r3, [r7, #80]	@ 0x50
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	895b      	ldrh	r3, [r3, #10]
 8006278:	085b      	lsrs	r3, r3, #1
 800627a:	b29b      	uxth	r3, r3
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006282:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f040 8093 	bne.w	80063b4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800629e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80062a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01b      	beq.n	80062e2 <USB_ActivateEndpoint+0x52a>
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80062f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80062f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01b      	beq.n	8006332 <USB_ActivateEndpoint+0x57a>
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800630c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006310:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	441a      	add	r2, r3
 800631c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800631e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800632a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800632e:	b29b      	uxth	r3, r3
 8006330:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006348:	873b      	strh	r3, [r7, #56]	@ 0x38
 800634a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800634c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006350:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006352:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006354:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006358:	873b      	strh	r3, [r7, #56]	@ 0x38
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	441a      	add	r2, r3
 8006364:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006366:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800636a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800636e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006376:	b29b      	uxth	r3, r3
 8006378:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800638c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006390:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800639e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	8013      	strh	r3, [r2, #0]
 80063b2:	e0bc      	b.n	800652e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80063c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80063c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01d      	beq.n	800640c <USB_ActivateEndpoint+0x654>
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	441a      	add	r2, r3
 80063f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80063f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006400:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006408:	b29b      	uxth	r3, r3
 800640a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800641c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01d      	beq.n	8006464 <USB_ActivateEndpoint+0x6ac>
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800643a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	441a      	add	r2, r3
 800644c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800645c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006460:	b29b      	uxth	r3, r3
 8006462:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	78db      	ldrb	r3, [r3, #3]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d024      	beq.n	80064b6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800647e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006482:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006486:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800648a:	f083 0320 	eor.w	r3, r3, #32
 800648e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80064a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	8013      	strh	r3, [r2, #0]
 80064b4:	e01d      	b.n	80064f2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006508:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800651a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800651e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652a:	b29b      	uxth	r3, r3
 800652c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800652e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006532:	4618      	mov	r0, r3
 8006534:	3774      	adds	r7, #116	@ 0x74
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop

08006540 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006540:	b480      	push	{r7}
 8006542:	b08d      	sub	sp, #52	@ 0x34
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	7b1b      	ldrb	r3, [r3, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f040 808e 	bne.w	8006670 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d044      	beq.n	80065e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	81bb      	strh	r3, [r7, #12]
 800656a:	89bb      	ldrh	r3, [r7, #12]
 800656c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01b      	beq.n	80065ac <USB_DeactivateEndpoint+0x6c>
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658a:	817b      	strh	r3, [r7, #10]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	441a      	add	r2, r3
 8006596:	897b      	ldrh	r3, [r7, #10]
 8006598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800659c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c2:	813b      	strh	r3, [r7, #8]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	441a      	add	r2, r3
 80065ce:	893b      	ldrh	r3, [r7, #8]
 80065d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	8013      	strh	r3, [r2, #0]
 80065e4:	e192      	b.n	800690c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	827b      	strh	r3, [r7, #18]
 80065f4:	8a7b      	ldrh	r3, [r7, #18]
 80065f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01b      	beq.n	8006636 <USB_DeactivateEndpoint+0xf6>
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006614:	823b      	strh	r3, [r7, #16]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	8a3b      	ldrh	r3, [r7, #16]
 8006622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800662a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800662e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664c:	81fb      	strh	r3, [r7, #14]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	441a      	add	r2, r3
 8006658:	89fb      	ldrh	r3, [r7, #14]
 800665a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800665e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800666a:	b29b      	uxth	r3, r3
 800666c:	8013      	strh	r3, [r2, #0]
 800666e:	e14d      	b.n	800690c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f040 80a5 	bne.w	80067c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	843b      	strh	r3, [r7, #32]
 8006688:	8c3b      	ldrh	r3, [r7, #32]
 800668a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01b      	beq.n	80066ca <USB_DeactivateEndpoint+0x18a>
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a8:	83fb      	strh	r3, [r7, #30]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	8bfb      	ldrh	r3, [r7, #30]
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	83bb      	strh	r3, [r7, #28]
 80066d8:	8bbb      	ldrh	r3, [r7, #28]
 80066da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01b      	beq.n	800671a <USB_DeactivateEndpoint+0x1da>
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f8:	837b      	strh	r3, [r7, #26]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	441a      	add	r2, r3
 8006704:	8b7b      	ldrh	r3, [r7, #26]
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800670e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006712:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800672c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006730:	833b      	strh	r3, [r7, #24]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	8b3b      	ldrh	r3, [r7, #24]
 800673e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800674e:	b29b      	uxth	r3, r3
 8006750:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006768:	82fb      	strh	r3, [r7, #22]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	441a      	add	r2, r3
 8006774:	8afb      	ldrh	r3, [r7, #22]
 8006776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800677a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800677e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006786:	b29b      	uxth	r3, r3
 8006788:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800679c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067a0:	82bb      	strh	r3, [r7, #20]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	8abb      	ldrh	r3, [r7, #20]
 80067ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067be:	b29b      	uxth	r3, r3
 80067c0:	8013      	strh	r3, [r2, #0]
 80067c2:	e0a3      	b.n	800690c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80067d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80067d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01b      	beq.n	8006814 <USB_DeactivateEndpoint+0x2d4>
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800680c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006822:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01b      	beq.n	8006864 <USB_DeactivateEndpoint+0x324>
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800683e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006842:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006850:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006854:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006860:	b29b      	uxth	r3, r3
 8006862:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	441a      	add	r2, r3
 8006886:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800688c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006890:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006898:	b29b      	uxth	r3, r3
 800689a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	441a      	add	r2, r3
 80068be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ea:	847b      	strh	r3, [r7, #34]	@ 0x22
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80068f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006908:	b29b      	uxth	r3, r3
 800690a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3734      	adds	r7, #52	@ 0x34
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b0c2      	sub	sp, #264	@ 0x108
 800691e:	af00      	add	r7, sp, #0
 8006920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006928:	6018      	str	r0, [r3, #0]
 800692a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006932:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b01      	cmp	r3, #1
 8006942:	f040 86b7 	bne.w	80076b4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	429a      	cmp	r2, r3
 8006960:	d908      	bls.n	8006974 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006972:	e007      	b.n	8006984 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	7b1b      	ldrb	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d13a      	bne.n	8006a0a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6959      	ldr	r1, [r3, #20]
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	88da      	ldrh	r2, [r3, #6]
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069ba:	6800      	ldr	r0, [r0, #0]
 80069bc:	f001 fc8d 	bl	80082da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069da:	b29b      	uxth	r3, r3
 80069dc:	461a      	mov	r2, r3
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	4413      	add	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	011a      	lsls	r2, r3, #4
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	f000 be1f 	b.w	8007648 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	78db      	ldrb	r3, [r3, #3]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	f040 8462 	bne.w	80072e0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a1a      	ldr	r2, [r3, #32]
 8006a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	f240 83df 	bls.w	80071f8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a60:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6a1a      	ldr	r2, [r3, #32]
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa6:	1ad2      	subs	r2, r2, r3
 8006aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 81c7 	beq.w	8006e6a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d177      	bne.n	8006be8 <USB_EPStartXfer+0x2ce>
 8006af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	4413      	add	r3, r2
 8006b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	011a      	lsls	r2, r3, #4
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <USB_EPStartXfer+0x248>
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	801a      	strh	r2, [r3, #0]
 8006b60:	e067      	b.n	8006c32 <USB_EPStartXfer+0x318>
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b66:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b68:	d81c      	bhi.n	8006ba4 <USB_EPStartXfer+0x28a>
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d004      	beq.n	8006b8a <USB_EPStartXfer+0x270>
 8006b80:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006b84:	3301      	adds	r3, #1
 8006b86:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	029b      	lsls	r3, r3, #10
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	e046      	b.n	8006c32 <USB_EPStartXfer+0x318>
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <USB_EPStartXfer+0x2aa>
 8006bba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	e024      	b.n	8006c32 <USB_EPStartXfer+0x318>
 8006be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d11c      	bne.n	8006c32 <USB_EPStartXfer+0x318>
 8006bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	4413      	add	r3, r2
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	011a      	lsls	r2, r3, #4
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	4413      	add	r3, r2
 8006c22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	895b      	ldrh	r3, [r3, #10]
 8006c3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6959      	ldr	r1, [r3, #20]
 8006c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c60:	6800      	ldr	r0, [r0, #0]
 8006c62:	f001 fb3a 	bl	80082da <USB_WritePMA>
            ep->xfer_buff += len;
 8006c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695a      	ldr	r2, [r3, #20]
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c76:	441a      	add	r2, r3
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6a1a      	ldr	r2, [r3, #32]
 8006c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d90f      	bls.n	8006cc0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a1a      	ldr	r2, [r3, #32]
 8006cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	621a      	str	r2, [r3, #32]
 8006cbe:	e00e      	b.n	8006cde <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d177      	bne.n	8006dde <USB_EPStartXfer+0x4c4>
 8006cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	4413      	add	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	011a      	lsls	r2, r3, #4
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4413      	add	r3, r2
 8006d24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	801a      	strh	r2, [r3, #0]
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <USB_EPStartXfer+0x43e>
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	e06d      	b.n	8006e34 <USB_EPStartXfer+0x51a>
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d5e:	d81c      	bhi.n	8006d9a <USB_EPStartXfer+0x480>
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <USB_EPStartXfer+0x466>
 8006d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	029b      	lsls	r3, r3, #10
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	4313      	orrs	r3, r2
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e04c      	b.n	8006e34 <USB_EPStartXfer+0x51a>
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <USB_EPStartXfer+0x4a0>
 8006db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006db4:	3b01      	subs	r3, #1
 8006db6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	029b      	lsls	r3, r3, #10
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	801a      	strh	r2, [r3, #0]
 8006ddc:	e02a      	b.n	8006e34 <USB_EPStartXfer+0x51a>
 8006dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d122      	bne.n	8006e34 <USB_EPStartXfer+0x51a>
 8006dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	623b      	str	r3, [r7, #32]
 8006dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	4413      	add	r3, r2
 8006e10:	623b      	str	r3, [r7, #32]
 8006e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	011a      	lsls	r2, r3, #4
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	4413      	add	r3, r2
 8006e24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	891b      	ldrh	r3, [r3, #8]
 8006e40:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6959      	ldr	r1, [r3, #20]
 8006e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e5a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e5e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e62:	6800      	ldr	r0, [r0, #0]
 8006e64:	f001 fa39 	bl	80082da <USB_WritePMA>
 8006e68:	e3ee      	b.n	8007648 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	785b      	ldrb	r3, [r3, #1]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d177      	bne.n	8006f6a <USB_EPStartXfer+0x650>
 8006e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e9a:	4413      	add	r3, r2
 8006e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	011a      	lsls	r2, r3, #4
 8006eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eae:	4413      	add	r3, r2
 8006eb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <USB_EPStartXfer+0x5ca>
 8006ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ee0:	801a      	strh	r2, [r3, #0]
 8006ee2:	e06d      	b.n	8006fc0 <USB_EPStartXfer+0x6a6>
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eea:	d81c      	bhi.n	8006f26 <USB_EPStartXfer+0x60c>
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <USB_EPStartXfer+0x5f2>
 8006f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f06:	3301      	adds	r3, #1
 8006f08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	e04c      	b.n	8006fc0 <USB_EPStartXfer+0x6a6>
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <USB_EPStartXfer+0x62c>
 8006f3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f40:	3b01      	subs	r3, #1
 8006f42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	029b      	lsls	r3, r3, #10
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	4313      	orrs	r3, r2
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	e02a      	b.n	8006fc0 <USB_EPStartXfer+0x6a6>
 8006f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d122      	bne.n	8006fc0 <USB_EPStartXfer+0x6a6>
 8006f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f9a:	4413      	add	r3, r2
 8006f9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	011a      	lsls	r2, r3, #4
 8006fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fae:	4413      	add	r3, r2
 8006fb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	891b      	ldrh	r3, [r3, #8]
 8006fcc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6959      	ldr	r1, [r3, #20]
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fe6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006fea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006fee:	6800      	ldr	r0, [r0, #0]
 8006ff0:	f001 f973 	bl	80082da <USB_WritePMA>
            ep->xfer_buff += len;
 8006ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	695a      	ldr	r2, [r3, #20]
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	441a      	add	r2, r3
 8007006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6a1a      	ldr	r2, [r3, #32]
 800701e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	429a      	cmp	r2, r3
 800702c:	d90f      	bls.n	800704e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	621a      	str	r2, [r3, #32]
 800704c:	e00e      	b.n	800706c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800704e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2200      	movs	r2, #0
 800706a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	643b      	str	r3, [r7, #64]	@ 0x40
 8007078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d177      	bne.n	8007178 <USB_EPStartXfer+0x85e>
 8007088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a8:	4413      	add	r3, r2
 80070aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	011a      	lsls	r2, r3, #4
 80070ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070bc:	4413      	add	r3, r2
 80070be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <USB_EPStartXfer+0x7d8>
 80070dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ee:	801a      	strh	r2, [r3, #0]
 80070f0:	e067      	b.n	80071c2 <USB_EPStartXfer+0x8a8>
 80070f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80070f8:	d81c      	bhi.n	8007134 <USB_EPStartXfer+0x81a>
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fe:	085b      	lsrs	r3, r3, #1
 8007100:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <USB_EPStartXfer+0x800>
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007114:	3301      	adds	r3, #1
 8007116:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800711a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007124:	b29b      	uxth	r3, r3
 8007126:	029b      	lsls	r3, r3, #10
 8007128:	b29b      	uxth	r3, r3
 800712a:	4313      	orrs	r3, r2
 800712c:	b29a      	uxth	r2, r3
 800712e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007130:	801a      	strh	r2, [r3, #0]
 8007132:	e046      	b.n	80071c2 <USB_EPStartXfer+0x8a8>
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800713e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <USB_EPStartXfer+0x83a>
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714e:	3b01      	subs	r3, #1
 8007150:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29a      	uxth	r2, r3
 800715a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715e:	b29b      	uxth	r3, r3
 8007160:	029b      	lsls	r3, r3, #10
 8007162:	b29b      	uxth	r3, r3
 8007164:	4313      	orrs	r3, r2
 8007166:	b29b      	uxth	r3, r3
 8007168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007170:	b29a      	uxth	r2, r3
 8007172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	e024      	b.n	80071c2 <USB_EPStartXfer+0x8a8>
 8007178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d11c      	bne.n	80071c2 <USB_EPStartXfer+0x8a8>
 8007188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719c:	4413      	add	r3, r2
 800719e:	643b      	str	r3, [r7, #64]	@ 0x40
 80071a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	011a      	lsls	r2, r3, #4
 80071ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b0:	4413      	add	r3, r2
 80071b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071bc:	b29a      	uxth	r2, r3
 80071be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	895b      	ldrh	r3, [r3, #10]
 80071ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6959      	ldr	r1, [r3, #20]
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80071e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80071ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80071f0:	6800      	ldr	r0, [r0, #0]
 80071f2:	f001 f872 	bl	80082da <USB_WritePMA>
 80071f6:	e227      	b.n	8007648 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80071f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800722a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	441a      	add	r2, r3
 800724c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800725c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007260:	b29b      	uxth	r3, r3
 8007262:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800727e:	b29b      	uxth	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007284:	4413      	add	r3, r2
 8007286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	011a      	lsls	r2, r3, #4
 8007296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007298:	4413      	add	r3, r2
 800729a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800729e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	891b      	ldrh	r3, [r3, #8]
 80072b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6959      	ldr	r1, [r3, #20]
 80072c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072d8:	6800      	ldr	r0, [r0, #0]
 80072da:	f000 fffe 	bl	80082da <USB_WritePMA>
 80072de:	e1b3      	b.n	8007648 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80072e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	1ad2      	subs	r2, r2, r3
 80072f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80c6 	beq.w	80074b2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	673b      	str	r3, [r7, #112]	@ 0x70
 8007332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d177      	bne.n	8007432 <USB_EPStartXfer+0xb18>
 8007342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800734e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800735c:	b29b      	uxth	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007362:	4413      	add	r3, r2
 8007364:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	011a      	lsls	r2, r3, #4
 8007374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007376:	4413      	add	r3, r2
 8007378:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800737c:	667b      	str	r3, [r7, #100]	@ 0x64
 800737e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007388:	b29a      	uxth	r2, r3
 800738a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800738c:	801a      	strh	r2, [r3, #0]
 800738e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <USB_EPStartXfer+0xa92>
 8007396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	e067      	b.n	800747c <USB_EPStartXfer+0xb62>
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80073b2:	d81c      	bhi.n	80073ee <USB_EPStartXfer+0xad4>
 80073b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d004      	beq.n	80073d4 <USB_EPStartXfer+0xaba>
 80073ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80073ce:	3301      	adds	r3, #1
 80073d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29a      	uxth	r2, r3
 80073da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80073de:	b29b      	uxth	r3, r3
 80073e0:	029b      	lsls	r3, r3, #10
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	4313      	orrs	r3, r2
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ea:	801a      	strh	r2, [r3, #0]
 80073ec:	e046      	b.n	800747c <USB_EPStartXfer+0xb62>
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <USB_EPStartXfer+0xaf4>
 8007404:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007408:	3b01      	subs	r3, #1
 800740a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800740e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29a      	uxth	r2, r3
 8007414:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007418:	b29b      	uxth	r3, r3
 800741a:	029b      	lsls	r3, r3, #10
 800741c:	b29b      	uxth	r3, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	b29b      	uxth	r3, r3
 8007422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742a:	b29a      	uxth	r2, r3
 800742c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e024      	b.n	800747c <USB_EPStartXfer+0xb62>
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d11c      	bne.n	800747c <USB_EPStartXfer+0xb62>
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007450:	b29b      	uxth	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007456:	4413      	add	r3, r2
 8007458:	673b      	str	r3, [r7, #112]	@ 0x70
 800745a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	011a      	lsls	r2, r3, #4
 8007468:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800746a:	4413      	add	r3, r2
 800746c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007470:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007476:	b29a      	uxth	r2, r3
 8007478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800747a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800747c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	895b      	ldrh	r3, [r3, #10]
 8007488:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800748c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6959      	ldr	r1, [r3, #20]
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749c:	b29b      	uxth	r3, r3
 800749e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	f000 ff15 	bl	80082da <USB_WritePMA>
 80074b0:	e0ca      	b.n	8007648 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d177      	bne.n	80075b2 <USB_EPStartXfer+0xc98>
 80074c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074dc:	b29b      	uxth	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074e2:	4413      	add	r3, r2
 80074e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	011a      	lsls	r2, r3, #4
 80074f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074f6:	4413      	add	r3, r2
 80074f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007508:	b29a      	uxth	r2, r3
 800750a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <USB_EPStartXfer+0xc12>
 8007516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007524:	b29a      	uxth	r2, r3
 8007526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	e073      	b.n	8007614 <USB_EPStartXfer+0xcfa>
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007530:	2b3e      	cmp	r3, #62	@ 0x3e
 8007532:	d81c      	bhi.n	800756e <USB_EPStartXfer+0xc54>
 8007534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <USB_EPStartXfer+0xc3a>
 800754a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800754e:	3301      	adds	r3, #1
 8007550:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007554:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29a      	uxth	r2, r3
 800755a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800755e:	b29b      	uxth	r3, r3
 8007560:	029b      	lsls	r3, r3, #10
 8007562:	b29b      	uxth	r3, r3
 8007564:	4313      	orrs	r3, r2
 8007566:	b29a      	uxth	r2, r3
 8007568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	e052      	b.n	8007614 <USB_EPStartXfer+0xcfa>
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	2b00      	cmp	r3, #0
 8007582:	d104      	bne.n	800758e <USB_EPStartXfer+0xc74>
 8007584:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007588:	3b01      	subs	r3, #1
 800758a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800758e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29a      	uxth	r2, r3
 8007594:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007598:	b29b      	uxth	r3, r3
 800759a:	029b      	lsls	r3, r3, #10
 800759c:	b29b      	uxth	r3, r3
 800759e:	4313      	orrs	r3, r2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075ae:	801a      	strh	r2, [r3, #0]
 80075b0:	e030      	b.n	8007614 <USB_EPStartXfer+0xcfa>
 80075b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d128      	bne.n	8007614 <USB_EPStartXfer+0xcfa>
 80075c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075e6:	4413      	add	r3, r2
 80075e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	011a      	lsls	r2, r3, #4
 80075fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075fe:	4413      	add	r3, r2
 8007600:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	b29a      	uxth	r2, r3
 800760e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007612:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	891b      	ldrh	r3, [r3, #8]
 8007620:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6959      	ldr	r1, [r3, #20]
 8007630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007634:	b29b      	uxth	r3, r3
 8007636:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800763a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800763e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007642:	6800      	ldr	r0, [r0, #0]
 8007644:	f000 fe49 	bl	80082da <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800766a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800766e:	817b      	strh	r3, [r7, #10]
 8007670:	897b      	ldrh	r3, [r7, #10]
 8007672:	f083 0310 	eor.w	r3, r3, #16
 8007676:	817b      	strh	r3, [r7, #10]
 8007678:	897b      	ldrh	r3, [r7, #10]
 800767a:	f083 0320 	eor.w	r3, r3, #32
 800767e:	817b      	strh	r3, [r7, #10]
 8007680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	441a      	add	r2, r3
 800769a:	897b      	ldrh	r3, [r7, #10]
 800769c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	8013      	strh	r3, [r2, #0]
 80076b0:	f000 bcdf 	b.w	8008072 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	7b1b      	ldrb	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 80bc 	bne.w	800783e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80076c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699a      	ldr	r2, [r3, #24]
 80076d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d917      	bls.n	8007712 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80076e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80076f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007702:	1ad2      	subs	r2, r2, r3
 8007704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	619a      	str	r2, [r3, #24]
 8007710:	e00e      	b.n	8007730 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2200      	movs	r2, #0
 800772e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800774c:	b29b      	uxth	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007754:	4413      	add	r3, r2
 8007756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800775a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	011a      	lsls	r2, r3, #4
 8007768:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800776c:	4413      	add	r3, r2
 800776e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007772:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007782:	b29a      	uxth	r2, r3
 8007784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007788:	801a      	strh	r2, [r3, #0]
 800778a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10d      	bne.n	80077ae <USB_EPStartXfer+0xe94>
 8007792:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077a8:	801a      	strh	r2, [r3, #0]
 80077aa:	f000 bc28 	b.w	8007ffe <USB_EPStartXfer+0x16e4>
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80077b4:	d81f      	bhi.n	80077f6 <USB_EPStartXfer+0xedc>
 80077b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ba:	085b      	lsrs	r3, r3, #1
 80077bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <USB_EPStartXfer+0xebc>
 80077cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80077d0:	3301      	adds	r3, #1
 80077d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	029b      	lsls	r3, r3, #10
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	f000 bc04 	b.w	8007ffe <USB_EPStartXfer+0x16e4>
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fa:	095b      	lsrs	r3, r3, #5
 80077fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	2b00      	cmp	r3, #0
 800780a:	d104      	bne.n	8007816 <USB_EPStartXfer+0xefc>
 800780c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007810:	3b01      	subs	r3, #1
 8007812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29a      	uxth	r2, r3
 800781e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007822:	b29b      	uxth	r3, r3
 8007824:	029b      	lsls	r3, r3, #10
 8007826:	b29b      	uxth	r3, r3
 8007828:	4313      	orrs	r3, r2
 800782a:	b29b      	uxth	r3, r3
 800782c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	e3df      	b.n	8007ffe <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800783e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	78db      	ldrb	r3, [r3, #3]
 800784a:	2b02      	cmp	r3, #2
 800784c:	f040 8218 	bne.w	8007c80 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f040 809d 	bne.w	800799c <USB_EPStartXfer+0x1082>
 8007862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800787e:	b29b      	uxth	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007886:	4413      	add	r3, r2
 8007888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800788c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	011a      	lsls	r2, r3, #4
 800789a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800789e:	4413      	add	r3, r2
 80078a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10c      	bne.n	80078e6 <USB_EPStartXfer+0xfcc>
 80078cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e08f      	b.n	8007a06 <USB_EPStartXfer+0x10ec>
 80078e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80078f4:	d826      	bhi.n	8007944 <USB_EPStartXfer+0x102a>
 80078f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	085b      	lsrs	r3, r3, #1
 8007904:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <USB_EPStartXfer+0x100c>
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007920:	3301      	adds	r3, #1
 8007922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	b29a      	uxth	r2, r3
 800792e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007932:	b29b      	uxth	r3, r3
 8007934:	029b      	lsls	r3, r3, #10
 8007936:	b29b      	uxth	r3, r3
 8007938:	4313      	orrs	r3, r2
 800793a:	b29a      	uxth	r2, r3
 800793c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007940:	801a      	strh	r2, [r3, #0]
 8007942:	e060      	b.n	8007a06 <USB_EPStartXfer+0x10ec>
 8007944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <USB_EPStartXfer+0x105a>
 800796a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800796e:	3b01      	subs	r3, #1
 8007970:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	b29a      	uxth	r2, r3
 800797c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007980:	b29b      	uxth	r3, r3
 8007982:	029b      	lsls	r3, r3, #10
 8007984:	b29b      	uxth	r3, r3
 8007986:	4313      	orrs	r3, r2
 8007988:	b29b      	uxth	r3, r3
 800798a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007992:	b29a      	uxth	r2, r3
 8007994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007998:	801a      	strh	r2, [r3, #0]
 800799a:	e034      	b.n	8007a06 <USB_EPStartXfer+0x10ec>
 800799c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d12c      	bne.n	8007a06 <USB_EPStartXfer+0x10ec>
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079d0:	4413      	add	r3, r2
 80079d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	011a      	lsls	r2, r3, #4
 80079e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079e8:	4413      	add	r3, r2
 80079ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007a04:	801a      	strh	r2, [r3, #0]
 8007a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 809d 	bne.w	8007b60 <USB_EPStartXfer+0x1246>
 8007a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	011a      	lsls	r2, r3, #4
 8007a5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a62:	4413      	add	r3, r2
 8007a64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10c      	bne.n	8007aaa <USB_EPStartXfer+0x1190>
 8007a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007aa6:	801a      	strh	r2, [r3, #0]
 8007aa8:	e088      	b.n	8007bbc <USB_EPStartXfer+0x12a2>
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ab8:	d826      	bhi.n	8007b08 <USB_EPStartXfer+0x11ee>
 8007aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	085b      	lsrs	r3, r3, #1
 8007ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <USB_EPStartXfer+0x11d0>
 8007ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	029b      	lsls	r3, r3, #10
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4313      	orrs	r3, r2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b04:	801a      	strh	r2, [r3, #0]
 8007b06:	e059      	b.n	8007bbc <USB_EPStartXfer+0x12a2>
 8007b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 031f 	and.w	r3, r3, #31
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <USB_EPStartXfer+0x121e>
 8007b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b32:	3b01      	subs	r3, #1
 8007b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	029b      	lsls	r3, r3, #10
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b5c:	801a      	strh	r2, [r3, #0]
 8007b5e:	e02d      	b.n	8007bbc <USB_EPStartXfer+0x12a2>
 8007b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d125      	bne.n	8007bbc <USB_EPStartXfer+0x12a2>
 8007b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b86:	4413      	add	r3, r2
 8007b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	011a      	lsls	r2, r3, #4
 8007b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 8218 	beq.w	8007ffe <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007bee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <USB_EPStartXfer+0x12ec>
 8007bfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10d      	bne.n	8007c22 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f040 81f5 	bne.w	8007ffe <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 81ee 	bne.w	8007ffe <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c48:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	441a      	add	r2, r3
 8007c66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007c6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	8013      	strh	r3, [r2, #0]
 8007c7e:	e1be      	b.n	8007ffe <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	78db      	ldrb	r3, [r3, #3]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	f040 81b4 	bne.w	8007ffa <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699a      	ldr	r2, [r3, #24]
 8007c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d917      	bls.n	8007cde <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	619a      	str	r2, [r3, #24]
 8007cdc:	e00e      	b.n	8007cfc <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f040 8085 	bne.w	8007e18 <USB_EPStartXfer+0x14fe>
 8007d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d32:	4413      	add	r3, r2
 8007d34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	011a      	lsls	r2, r3, #4
 8007d46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d66:	801a      	strh	r2, [r3, #0]
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10c      	bne.n	8007d8a <USB_EPStartXfer+0x1470>
 8007d70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d86:	801a      	strh	r2, [r3, #0]
 8007d88:	e077      	b.n	8007e7a <USB_EPStartXfer+0x1560>
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d90:	d81e      	bhi.n	8007dd0 <USB_EPStartXfer+0x14b6>
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d004      	beq.n	8007db2 <USB_EPStartXfer+0x1498>
 8007da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dac:	3301      	adds	r3, #1
 8007dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	029b      	lsls	r3, r3, #10
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007dcc:	801a      	strh	r2, [r3, #0]
 8007dce:	e054      	b.n	8007e7a <USB_EPStartXfer+0x1560>
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <USB_EPStartXfer+0x14d6>
 8007de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dea:	3b01      	subs	r3, #1
 8007dec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007df0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	029b      	lsls	r3, r3, #10
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	e030      	b.n	8007e7a <USB_EPStartXfer+0x1560>
 8007e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d128      	bne.n	8007e7a <USB_EPStartXfer+0x1560>
 8007e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	461a      	mov	r2, r3
 8007e48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	011a      	lsls	r2, r3, #4
 8007e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e64:	4413      	add	r3, r2
 8007e66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	785b      	ldrb	r3, [r3, #1]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f040 8085 	bne.w	8007fa4 <USB_EPStartXfer+0x168a>
 8007e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	011a      	lsls	r2, r3, #4
 8007ed2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007edc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ee0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ef2:	801a      	strh	r2, [r3, #0]
 8007ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10c      	bne.n	8007f16 <USB_EPStartXfer+0x15fc>
 8007efc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	e073      	b.n	8007ffe <USB_EPStartXfer+0x16e4>
 8007f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f1c:	d81e      	bhi.n	8007f5c <USB_EPStartXfer+0x1642>
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <USB_EPStartXfer+0x1624>
 8007f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	029b      	lsls	r3, r3, #10
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	e050      	b.n	8007ffe <USB_EPStartXfer+0x16e4>
 8007f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6a:	f003 031f 	and.w	r3, r3, #31
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d104      	bne.n	8007f7c <USB_EPStartXfer+0x1662>
 8007f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f76:	3b01      	subs	r3, #1
 8007f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	029b      	lsls	r3, r3, #10
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	e02c      	b.n	8007ffe <USB_EPStartXfer+0x16e4>
 8007fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d124      	bne.n	8007ffe <USB_EPStartXfer+0x16e4>
 8007fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fca:	4413      	add	r3, r2
 8007fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	011a      	lsls	r2, r3, #4
 8007fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	e001      	b.n	8007ffe <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e03a      	b.n	8008074 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008002:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008024:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008028:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800802c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008030:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008034:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008038:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800803c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008044:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800805e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800806a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806e:	b29b      	uxth	r3, r3
 8008070:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d020      	beq.n	80080d2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080a6:	81bb      	strh	r3, [r7, #12]
 80080a8:	89bb      	ldrh	r3, [r7, #12]
 80080aa:	f083 0310 	eor.w	r3, r3, #16
 80080ae:	81bb      	strh	r3, [r7, #12]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	441a      	add	r2, r3
 80080ba:	89bb      	ldrh	r3, [r7, #12]
 80080bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	8013      	strh	r3, [r2, #0]
 80080d0:	e01f      	b.n	8008112 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080e8:	81fb      	strh	r3, [r7, #14]
 80080ea:	89fb      	ldrh	r3, [r7, #14]
 80080ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80080f0:	81fb      	strh	r3, [r7, #14]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	441a      	add	r2, r3
 80080fc:	89fb      	ldrh	r3, [r7, #14]
 80080fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800810a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800810e:	b29b      	uxth	r3, r3
 8008110:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	7b1b      	ldrb	r3, [r3, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 809d 	bne.w	800826e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d04c      	beq.n	80081d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	823b      	strh	r3, [r7, #16]
 800814a:	8a3b      	ldrh	r3, [r7, #16]
 800814c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <USB_EPClearStall+0x6c>
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	b29b      	uxth	r3, r3
 8008162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800816a:	81fb      	strh	r3, [r7, #14]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	441a      	add	r2, r3
 8008176:	89fb      	ldrh	r3, [r7, #14]
 8008178:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800817c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008184:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008188:	b29b      	uxth	r3, r3
 800818a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	78db      	ldrb	r3, [r3, #3]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d06c      	beq.n	800826e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081aa:	81bb      	strh	r3, [r7, #12]
 80081ac:	89bb      	ldrh	r3, [r7, #12]
 80081ae:	f083 0320 	eor.w	r3, r3, #32
 80081b2:	81bb      	strh	r3, [r7, #12]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	441a      	add	r2, r3
 80081be:	89bb      	ldrh	r3, [r7, #12]
 80081c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	8013      	strh	r3, [r2, #0]
 80081d4:	e04b      	b.n	800826e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	82fb      	strh	r3, [r7, #22]
 80081e4:	8afb      	ldrh	r3, [r7, #22]
 80081e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01b      	beq.n	8008226 <USB_EPClearStall+0x106>
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008204:	82bb      	strh	r3, [r7, #20]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	441a      	add	r2, r3
 8008210:	8abb      	ldrh	r3, [r7, #20]
 8008212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800821a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800821e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008222:	b29b      	uxth	r3, r3
 8008224:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823c:	827b      	strh	r3, [r7, #18]
 800823e:	8a7b      	ldrh	r3, [r7, #18]
 8008240:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008244:	827b      	strh	r3, [r7, #18]
 8008246:	8a7b      	ldrh	r3, [r7, #18]
 8008248:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800824c:	827b      	strh	r3, [r7, #18]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	441a      	add	r2, r3
 8008258:	8a7b      	ldrh	r3, [r7, #18]
 800825a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800825e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800826a:	b29b      	uxth	r3, r3
 800826c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2280      	movs	r2, #128	@ 0x80
 8008292:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80082cc:	68fb      	ldr	r3, [r7, #12]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082da:	b480      	push	{r7}
 80082dc:	b08b      	sub	sp, #44	@ 0x2c
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	4611      	mov	r1, r2
 80082e6:	461a      	mov	r2, r3
 80082e8:	460b      	mov	r3, r1
 80082ea:	80fb      	strh	r3, [r7, #6]
 80082ec:	4613      	mov	r3, r2
 80082ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082f0:	88bb      	ldrh	r3, [r7, #4]
 80082f2:	3301      	adds	r3, #1
 80082f4:	085b      	lsrs	r3, r3, #1
 80082f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	005a      	lsls	r2, r3, #1
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800830c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
 8008312:	e01e      	b.n	8008352 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	3301      	adds	r3, #1
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	b21a      	sxth	r2, r3
 8008324:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008328:	4313      	orrs	r3, r2
 800832a:	b21b      	sxth	r3, r3
 800832c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	8a7a      	ldrh	r2, [r7, #18]
 8008332:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	3302      	adds	r3, #2
 8008338:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	3302      	adds	r3, #2
 800833e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	3301      	adds	r3, #1
 8008344:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	3301      	adds	r3, #1
 800834a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800834c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834e:	3b01      	subs	r3, #1
 8008350:	627b      	str	r3, [r7, #36]	@ 0x24
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1dd      	bne.n	8008314 <USB_WritePMA+0x3a>
  }
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	372c      	adds	r7, #44	@ 0x2c
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008366:	b480      	push	{r7}
 8008368:	b08b      	sub	sp, #44	@ 0x2c
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	4611      	mov	r1, r2
 8008372:	461a      	mov	r2, r3
 8008374:	460b      	mov	r3, r1
 8008376:	80fb      	strh	r3, [r7, #6]
 8008378:	4613      	mov	r3, r2
 800837a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800837c:	88bb      	ldrh	r3, [r7, #4]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	b29b      	uxth	r3, r3
 8008382:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800838c:	88fb      	ldrh	r3, [r7, #6]
 800838e:	005a      	lsls	r2, r3, #1
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008398:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	627b      	str	r3, [r7, #36]	@ 0x24
 800839e:	e01b      	b.n	80083d8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	3302      	adds	r3, #2
 80083ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	3301      	adds	r3, #1
 80083ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	0a1b      	lsrs	r3, r3, #8
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	3301      	adds	r3, #1
 80083ca:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	3302      	adds	r3, #2
 80083d0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	3b01      	subs	r3, #1
 80083d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80083d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e0      	bne.n	80083a0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80083de:	88bb      	ldrh	r3, [r7, #4]
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	701a      	strb	r2, [r3, #0]
  }
}
 80083fa:	bf00      	nop
 80083fc:	372c      	adds	r7, #44	@ 0x2c
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	460b      	mov	r3, r1
 8008410:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008412:	2304      	movs	r3, #4
 8008414:	2203      	movs	r2, #3
 8008416:	2181      	movs	r1, #129	@ 0x81
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 fcb0 	bl	8009d7e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008424:	2010      	movs	r0, #16
 8008426:	f001 fdbf 	bl	8009fa8 <USBD_static_malloc>
 800842a:	4602      	mov	r2, r0
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800843c:	2302      	movs	r3, #2
 800843e:	e005      	b.n	800844c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008446:	2200      	movs	r2, #0
 8008448:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008460:	2181      	movs	r1, #129	@ 0x81
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 fcb1 	bl	8009dca <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800847e:	4618      	mov	r0, r3
 8008480:	f001 fda0 	bl	8009fc4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084a8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d045      	beq.n	8008552 <USBD_HID_Setup+0xba>
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	f040 80d3 	bne.w	8008672 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	785b      	ldrb	r3, [r3, #1]
 80084d0:	3b02      	subs	r3, #2
 80084d2:	2b09      	cmp	r3, #9
 80084d4:	d835      	bhi.n	8008542 <USBD_HID_Setup+0xaa>
 80084d6:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <USBD_HID_Setup+0x44>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	08008533 	.word	0x08008533
 80084e0:	08008513 	.word	0x08008513
 80084e4:	08008543 	.word	0x08008543
 80084e8:	08008543 	.word	0x08008543
 80084ec:	08008543 	.word	0x08008543
 80084f0:	08008543 	.word	0x08008543
 80084f4:	08008543 	.word	0x08008543
 80084f8:	08008543 	.word	0x08008543
 80084fc:	08008521 	.word	0x08008521
 8008500:	08008505 	.word	0x08008505
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	885b      	ldrh	r3, [r3, #2]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	461a      	mov	r2, r3
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	601a      	str	r2, [r3, #0]
          break;
 8008510:	e01e      	b.n	8008550 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	2201      	movs	r2, #1
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 f949 	bl	80097b0 <USBD_CtlSendData>
          break;
 800851e:	e017      	b.n	8008550 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	885b      	ldrh	r3, [r3, #2]
 8008524:	0a1b      	lsrs	r3, r3, #8
 8008526:	b29b      	uxth	r3, r3
 8008528:	b2db      	uxtb	r3, r3
 800852a:	461a      	mov	r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	605a      	str	r2, [r3, #4]
          break;
 8008530:	e00e      	b.n	8008550 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	3304      	adds	r3, #4
 8008536:	2201      	movs	r2, #1
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 f938 	bl	80097b0 <USBD_CtlSendData>
          break;
 8008540:	e006      	b.n	8008550 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f8c8 	bl	80096da <USBD_CtlError>
          ret = USBD_FAIL;
 800854a:	2302      	movs	r3, #2
 800854c:	75fb      	strb	r3, [r7, #23]
          break;
 800854e:	bf00      	nop
      }
      break;
 8008550:	e096      	b.n	8008680 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b0b      	cmp	r3, #11
 8008558:	f200 8083 	bhi.w	8008662 <USBD_HID_Setup+0x1ca>
 800855c:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <USBD_HID_Setup+0xcc>)
 800855e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008562:	bf00      	nop
 8008564:	08008595 	.word	0x08008595
 8008568:	08008663 	.word	0x08008663
 800856c:	08008663 	.word	0x08008663
 8008570:	08008663 	.word	0x08008663
 8008574:	08008663 	.word	0x08008663
 8008578:	08008663 	.word	0x08008663
 800857c:	080085bd 	.word	0x080085bd
 8008580:	08008663 	.word	0x08008663
 8008584:	08008663 	.word	0x08008663
 8008588:	08008663 	.word	0x08008663
 800858c:	08008615 	.word	0x08008615
 8008590:	0800863d 	.word	0x0800863d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800859a:	2b03      	cmp	r3, #3
 800859c:	d107      	bne.n	80085ae <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800859e:	f107 030e 	add.w	r3, r7, #14
 80085a2:	2202      	movs	r2, #2
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 f902 	bl	80097b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085ac:	e060      	b.n	8008670 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 f892 	bl	80096da <USBD_CtlError>
            ret = USBD_FAIL;
 80085b6:	2302      	movs	r3, #2
 80085b8:	75fb      	strb	r3, [r7, #23]
          break;
 80085ba:	e059      	b.n	8008670 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	885b      	ldrh	r3, [r3, #2]
 80085c0:	0a1b      	lsrs	r3, r3, #8
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b22      	cmp	r3, #34	@ 0x22
 80085c6:	d108      	bne.n	80085da <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	88db      	ldrh	r3, [r3, #6]
 80085cc:	2b4a      	cmp	r3, #74	@ 0x4a
 80085ce:	bf28      	it	cs
 80085d0:	234a      	movcs	r3, #74	@ 0x4a
 80085d2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80085d4:	4b2d      	ldr	r3, [pc, #180]	@ (800868c <USBD_HID_Setup+0x1f4>)
 80085d6:	61bb      	str	r3, [r7, #24]
 80085d8:	e015      	b.n	8008606 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	885b      	ldrh	r3, [r3, #2]
 80085de:	0a1b      	lsrs	r3, r3, #8
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b21      	cmp	r3, #33	@ 0x21
 80085e4:	d108      	bne.n	80085f8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80085e6:	4b2a      	ldr	r3, [pc, #168]	@ (8008690 <USBD_HID_Setup+0x1f8>)
 80085e8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	88db      	ldrh	r3, [r3, #6]
 80085ee:	2b09      	cmp	r3, #9
 80085f0:	bf28      	it	cs
 80085f2:	2309      	movcs	r3, #9
 80085f4:	83fb      	strh	r3, [r7, #30]
 80085f6:	e006      	b.n	8008606 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 f86d 	bl	80096da <USBD_CtlError>
            ret = USBD_FAIL;
 8008600:	2302      	movs	r3, #2
 8008602:	75fb      	strb	r3, [r7, #23]
            break;
 8008604:	e034      	b.n	8008670 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008606:	8bfb      	ldrh	r3, [r7, #30]
 8008608:	461a      	mov	r2, r3
 800860a:	69b9      	ldr	r1, [r7, #24]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f8cf 	bl	80097b0 <USBD_CtlSendData>
          break;
 8008612:	e02d      	b.n	8008670 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800861a:	2b03      	cmp	r3, #3
 800861c:	d107      	bne.n	800862e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	3308      	adds	r3, #8
 8008622:	2201      	movs	r2, #1
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f8c2 	bl	80097b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800862c:	e020      	b.n	8008670 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f852 	bl	80096da <USBD_CtlError>
            ret = USBD_FAIL;
 8008636:	2302      	movs	r3, #2
 8008638:	75fb      	strb	r3, [r7, #23]
          break;
 800863a:	e019      	b.n	8008670 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008642:	2b03      	cmp	r3, #3
 8008644:	d106      	bne.n	8008654 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	461a      	mov	r2, r3
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008652:	e00d      	b.n	8008670 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 f83f 	bl	80096da <USBD_CtlError>
            ret = USBD_FAIL;
 800865c:	2302      	movs	r3, #2
 800865e:	75fb      	strb	r3, [r7, #23]
          break;
 8008660:	e006      	b.n	8008670 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 f838 	bl	80096da <USBD_CtlError>
          ret = USBD_FAIL;
 800866a:	2302      	movs	r3, #2
 800866c:	75fb      	strb	r3, [r7, #23]
          break;
 800866e:	bf00      	nop
      }
      break;
 8008670:	e006      	b.n	8008680 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f830 	bl	80096da <USBD_CtlError>
      ret = USBD_FAIL;
 800867a:	2302      	movs	r3, #2
 800867c:	75fb      	strb	r3, [r7, #23]
      break;
 800867e:	bf00      	nop
  }

  return ret;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3720      	adds	r7, #32
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200000c8 	.word	0x200000c8
 8008690:	200000b0 	.word	0x200000b0

08008694 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	4613      	mov	r3, r2
 80086a0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086a8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d10c      	bne.n	80086ce <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	7b1b      	ldrb	r3, [r3, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d108      	bne.n	80086ce <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2201      	movs	r2, #1
 80086c0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80086c2:	88fb      	ldrh	r3, [r7, #6]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	2181      	movs	r1, #129	@ 0x81
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f001 fc26 	bl	8009f1a <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2222      	movs	r2, #34	@ 0x22
 80086e4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80086e6:	4b03      	ldr	r3, [pc, #12]	@ (80086f4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	20000044 	.word	0x20000044

080086f8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2222      	movs	r2, #34	@ 0x22
 8008704:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008706:	4b03      	ldr	r3, [pc, #12]	@ (8008714 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	20000068 	.word	0x20000068

08008718 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2222      	movs	r2, #34	@ 0x22
 8008724:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008726:	4b03      	ldr	r3, [pc, #12]	@ (8008734 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	2000008c 	.word	0x2000008c

08008738 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800874a:	2200      	movs	r2, #0
 800874c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	220a      	movs	r2, #10
 8008768:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800876a:	4b03      	ldr	r3, [pc, #12]	@ (8008778 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	200000bc 	.word	0x200000bc

0800877c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008790:	2302      	movs	r3, #2
 8008792:	e01a      	b.n	80087ca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	79fa      	ldrb	r2, [r7, #7]
 80087c0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f001 fa78 	bl	8009cb8 <USBD_LL_Init>

  return USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d006      	beq.n	80087f4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
 80087f2:	e001      	b.n	80087f8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80087f4:	2302      	movs	r3, #2
 80087f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 fa9a 	bl	8009d48 <USBD_LL_Start>

  return USBD_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008840:	2302      	movs	r3, #2
 8008842:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00c      	beq.n	8008868 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	4611      	mov	r1, r2
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	4611      	mov	r1, r2
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	4798      	blx	r3

  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fedb 	bl	8009666 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80088cc:	f003 031f 	and.w	r3, r3, #31
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d016      	beq.n	8008902 <USBD_LL_SetupStage+0x6a>
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d81c      	bhi.n	8008912 <USBD_LL_SetupStage+0x7a>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <USBD_LL_SetupStage+0x4a>
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d008      	beq.n	80088f2 <USBD_LL_SetupStage+0x5a>
 80088e0:	e017      	b.n	8008912 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f9ce 	bl	8008c8c <USBD_StdDevReq>
      break;
 80088f0:	e01a      	b.n	8008928 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fa30 	bl	8008d60 <USBD_StdItfReq>
      break;
 8008900:	e012      	b.n	8008928 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa70 	bl	8008df0 <USBD_StdEPReq>
      break;
 8008910:	e00a      	b.n	8008928 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008918:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800891c:	b2db      	uxtb	r3, r3
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 fa71 	bl	8009e08 <USBD_LL_StallEP>
      break;
 8008926:	bf00      	nop
  }

  return USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b086      	sub	sp, #24
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	460b      	mov	r3, r1
 800893c:	607a      	str	r2, [r7, #4]
 800893e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d14b      	bne.n	80089de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800894c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008954:	2b03      	cmp	r3, #3
 8008956:	d134      	bne.n	80089c2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	68da      	ldr	r2, [r3, #12]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	429a      	cmp	r2, r3
 8008962:	d919      	bls.n	8008998 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	1ad2      	subs	r2, r2, r3
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800897a:	429a      	cmp	r2, r3
 800897c:	d203      	bcs.n	8008986 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008982:	b29b      	uxth	r3, r3
 8008984:	e002      	b.n	800898c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800898a:	b29b      	uxth	r3, r3
 800898c:	461a      	mov	r2, r3
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 ff3b 	bl	800980c <USBD_CtlContinueRx>
 8008996:	e038      	b.n	8008a0a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d105      	bne.n	80089ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 ff38 	bl	8009830 <USBD_CtlSendStatus>
 80089c0:	e023      	b.n	8008a0a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089c8:	2b05      	cmp	r3, #5
 80089ca:	d11e      	bne.n	8008a0a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80089d4:	2100      	movs	r1, #0
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f001 fa16 	bl	8009e08 <USBD_LL_StallEP>
 80089dc:	e015      	b.n	8008a0a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00d      	beq.n	8008a06 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d108      	bne.n	8008a06 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	7afa      	ldrb	r2, [r7, #11]
 80089fe:	4611      	mov	r1, r2
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	4798      	blx	r3
 8008a04:	e001      	b.n	8008a0a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a06:	2302      	movs	r3, #2
 8008a08:	e000      	b.n	8008a0c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a22:	7afb      	ldrb	r3, [r7, #11]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d17f      	bne.n	8008b28 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3314      	adds	r3, #20
 8008a2c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d15c      	bne.n	8008af2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d915      	bls.n	8008a70 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	1ad2      	subs	r2, r2, r3
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fec3 	bl	80097e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a62:	2300      	movs	r3, #0
 8008a64:	2200      	movs	r2, #0
 8008a66:	2100      	movs	r1, #0
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f001 fa79 	bl	8009f60 <USBD_LL_PrepareReceive>
 8008a6e:	e04e      	b.n	8008b0e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	6912      	ldr	r2, [r2, #16]
 8008a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a7c:	fb01 f202 	mul.w	r2, r1, r2
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d11c      	bne.n	8008ac0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d316      	bcc.n	8008ac0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	689a      	ldr	r2, [r3, #8]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d20f      	bcs.n	8008ac0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 fe9f 	bl	80097e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f001 fa51 	bl	8009f60 <USBD_LL_PrepareReceive>
 8008abe:	e026      	b.n	8008b0e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00a      	beq.n	8008ae2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d105      	bne.n	8008ae2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008ae2:	2180      	movs	r1, #128	@ 0x80
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f001 f98f 	bl	8009e08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 feb3 	bl	8009856 <USBD_CtlReceiveStatus>
 8008af0:	e00d      	b.n	8008b0e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	d004      	beq.n	8008b06 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d103      	bne.n	8008b0e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008b06:	2180      	movs	r1, #128	@ 0x80
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f001 f97d 	bl	8009e08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d11d      	bne.n	8008b54 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f7ff fe80 	bl	800881e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008b26:	e015      	b.n	8008b54 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00d      	beq.n	8008b50 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d108      	bne.n	8008b50 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	7afa      	ldrb	r2, [r7, #11]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	4798      	blx	r3
 8008b4e:	e001      	b.n	8008b54 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b50:	2302      	movs	r3, #2
 8008b52:	e000      	b.n	8008b56 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b082      	sub	sp, #8
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b66:	2340      	movs	r3, #64	@ 0x40
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 f906 	bl	8009d7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2240      	movs	r2, #64	@ 0x40
 8008b7e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b82:	2340      	movs	r3, #64	@ 0x40
 8008b84:	2200      	movs	r2, #0
 8008b86:	2180      	movs	r1, #128	@ 0x80
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 f8f8 	bl	8009d7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2240      	movs	r2, #64	@ 0x40
 8008b98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6852      	ldr	r2, [r2, #4]
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
  }

  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	78fa      	ldrb	r2, [r7, #3]
 8008bf0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2204      	movs	r2, #4
 8008c18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d105      	bne.n	8008c48 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d10b      	bne.n	8008c80 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d005      	beq.n	8008c80 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ca2:	2b40      	cmp	r3, #64	@ 0x40
 8008ca4:	d005      	beq.n	8008cb2 <USBD_StdDevReq+0x26>
 8008ca6:	2b40      	cmp	r3, #64	@ 0x40
 8008ca8:	d84f      	bhi.n	8008d4a <USBD_StdDevReq+0xbe>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d009      	beq.n	8008cc2 <USBD_StdDevReq+0x36>
 8008cae:	2b20      	cmp	r3, #32
 8008cb0:	d14b      	bne.n	8008d4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
      break;
 8008cc0:	e048      	b.n	8008d54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	2b09      	cmp	r3, #9
 8008cc8:	d839      	bhi.n	8008d3e <USBD_StdDevReq+0xb2>
 8008cca:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd0 <USBD_StdDevReq+0x44>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008d21 	.word	0x08008d21
 8008cd4:	08008d35 	.word	0x08008d35
 8008cd8:	08008d3f 	.word	0x08008d3f
 8008cdc:	08008d2b 	.word	0x08008d2b
 8008ce0:	08008d3f 	.word	0x08008d3f
 8008ce4:	08008d03 	.word	0x08008d03
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008d3f 	.word	0x08008d3f
 8008cf0:	08008d17 	.word	0x08008d17
 8008cf4:	08008d0d 	.word	0x08008d0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f9dc 	bl	80090b8 <USBD_GetDescriptor>
          break;
 8008d00:	e022      	b.n	8008d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fb3f 	bl	8009388 <USBD_SetAddress>
          break;
 8008d0a:	e01d      	b.n	8008d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fb7e 	bl	8009410 <USBD_SetConfig>
          break;
 8008d14:	e018      	b.n	8008d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fc07 	bl	800952c <USBD_GetConfig>
          break;
 8008d1e:	e013      	b.n	8008d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fc37 	bl	8009596 <USBD_GetStatus>
          break;
 8008d28:	e00e      	b.n	8008d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fc65 	bl	80095fc <USBD_SetFeature>
          break;
 8008d32:	e009      	b.n	8008d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fc74 	bl	8009624 <USBD_ClrFeature>
          break;
 8008d3c:	e004      	b.n	8008d48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fcca 	bl	80096da <USBD_CtlError>
          break;
 8008d46:	bf00      	nop
      }
      break;
 8008d48:	e004      	b.n	8008d54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fcc4 	bl	80096da <USBD_CtlError>
      break;
 8008d52:	bf00      	nop
  }

  return ret;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop

08008d60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d76:	2b40      	cmp	r3, #64	@ 0x40
 8008d78:	d005      	beq.n	8008d86 <USBD_StdItfReq+0x26>
 8008d7a:	2b40      	cmp	r3, #64	@ 0x40
 8008d7c:	d82e      	bhi.n	8008ddc <USBD_StdItfReq+0x7c>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <USBD_StdItfReq+0x26>
 8008d82:	2b20      	cmp	r3, #32
 8008d84:	d12a      	bne.n	8008ddc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d81d      	bhi.n	8008dce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	889b      	ldrh	r3, [r3, #4]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d813      	bhi.n	8008dc4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
 8008daa:	4603      	mov	r3, r0
 8008dac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	88db      	ldrh	r3, [r3, #6]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d110      	bne.n	8008dd8 <USBD_StdItfReq+0x78>
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10d      	bne.n	8008dd8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fd37 	bl	8009830 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008dc2:	e009      	b.n	8008dd8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fc87 	bl	80096da <USBD_CtlError>
          break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fc82 	bl	80096da <USBD_CtlError>
          break;
 8008dd6:	e000      	b.n	8008dda <USBD_StdItfReq+0x7a>
          break;
 8008dd8:	bf00      	nop
      }
      break;
 8008dda:	e004      	b.n	8008de6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fc7b 	bl	80096da <USBD_CtlError>
      break;
 8008de4:	bf00      	nop
  }

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	889b      	ldrh	r3, [r3, #4]
 8008e02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e0c:	2b40      	cmp	r3, #64	@ 0x40
 8008e0e:	d007      	beq.n	8008e20 <USBD_StdEPReq+0x30>
 8008e10:	2b40      	cmp	r3, #64	@ 0x40
 8008e12:	f200 8146 	bhi.w	80090a2 <USBD_StdEPReq+0x2b2>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <USBD_StdEPReq+0x40>
 8008e1a:	2b20      	cmp	r3, #32
 8008e1c:	f040 8141 	bne.w	80090a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	4798      	blx	r3
      break;
 8008e2e:	e13d      	b.n	80090ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	d10a      	bne.n	8008e52 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	4798      	blx	r3
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	e12d      	b.n	80090ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d007      	beq.n	8008e6a <USBD_StdEPReq+0x7a>
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	f300 811b 	bgt.w	8009096 <USBD_StdEPReq+0x2a6>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d072      	beq.n	8008f4a <USBD_StdEPReq+0x15a>
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d03a      	beq.n	8008ede <USBD_StdEPReq+0xee>
 8008e68:	e115      	b.n	8009096 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d002      	beq.n	8008e7a <USBD_StdEPReq+0x8a>
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d015      	beq.n	8008ea4 <USBD_StdEPReq+0xb4>
 8008e78:	e02b      	b.n	8008ed2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00c      	beq.n	8008e9a <USBD_StdEPReq+0xaa>
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b80      	cmp	r3, #128	@ 0x80
 8008e84:	d009      	beq.n	8008e9a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 ffbc 	bl	8009e08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e90:	2180      	movs	r1, #128	@ 0x80
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 ffb8 	bl	8009e08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e98:	e020      	b.n	8008edc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fc1c 	bl	80096da <USBD_CtlError>
              break;
 8008ea2:	e01b      	b.n	8008edc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	885b      	ldrh	r3, [r3, #2]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10e      	bne.n	8008eca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <USBD_StdEPReq+0xda>
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b80      	cmp	r3, #128	@ 0x80
 8008eb6:	d008      	beq.n	8008eca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	88db      	ldrh	r3, [r3, #6]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d104      	bne.n	8008eca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 ff9f 	bl	8009e08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fcb0 	bl	8009830 <USBD_CtlSendStatus>

              break;
 8008ed0:	e004      	b.n	8008edc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fc00 	bl	80096da <USBD_CtlError>
              break;
 8008eda:	bf00      	nop
          }
          break;
 8008edc:	e0e0      	b.n	80090a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d002      	beq.n	8008eee <USBD_StdEPReq+0xfe>
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d015      	beq.n	8008f18 <USBD_StdEPReq+0x128>
 8008eec:	e026      	b.n	8008f3c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00c      	beq.n	8008f0e <USBD_StdEPReq+0x11e>
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	2b80      	cmp	r3, #128	@ 0x80
 8008ef8:	d009      	beq.n	8008f0e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 ff82 	bl	8009e08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f04:	2180      	movs	r1, #128	@ 0x80
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 ff7e 	bl	8009e08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f0c:	e01c      	b.n	8008f48 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fbe2 	bl	80096da <USBD_CtlError>
              break;
 8008f16:	e017      	b.n	8008f48 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	885b      	ldrh	r3, [r3, #2]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d112      	bne.n	8008f46 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d004      	beq.n	8008f34 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 ff89 	bl	8009e46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fc7b 	bl	8009830 <USBD_CtlSendStatus>
              }
              break;
 8008f3a:	e004      	b.n	8008f46 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fbcb 	bl	80096da <USBD_CtlError>
              break;
 8008f44:	e000      	b.n	8008f48 <USBD_StdEPReq+0x158>
              break;
 8008f46:	bf00      	nop
          }
          break;
 8008f48:	e0aa      	b.n	80090a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d002      	beq.n	8008f5a <USBD_StdEPReq+0x16a>
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d032      	beq.n	8008fbe <USBD_StdEPReq+0x1ce>
 8008f58:	e097      	b.n	800908a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <USBD_StdEPReq+0x180>
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	2b80      	cmp	r3, #128	@ 0x80
 8008f64:	d004      	beq.n	8008f70 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fbb6 	bl	80096da <USBD_CtlError>
                break;
 8008f6e:	e091      	b.n	8009094 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da0b      	bge.n	8008f90 <USBD_StdEPReq+0x1a0>
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f7e:	4613      	mov	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	3310      	adds	r3, #16
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	e00b      	b.n	8008fa8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fbfa 	bl	80097b0 <USBD_CtlSendData>
              break;
 8008fbc:	e06a      	b.n	8009094 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008fbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	da11      	bge.n	8008fea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008fc6:	7bbb      	ldrb	r3, [r7, #14]
 8008fc8:	f003 020f 	and.w	r2, r3, #15
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	440b      	add	r3, r1
 8008fd8:	3318      	adds	r3, #24
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d117      	bne.n	8009010 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fb79 	bl	80096da <USBD_CtlError>
                  break;
 8008fe8:	e054      	b.n	8009094 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
 8008fec:	f003 020f 	and.w	r2, r3, #15
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	440b      	add	r3, r1
 8008ffc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d104      	bne.n	8009010 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fb66 	bl	80096da <USBD_CtlError>
                  break;
 800900e:	e041      	b.n	8009094 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009014:	2b00      	cmp	r3, #0
 8009016:	da0b      	bge.n	8009030 <USBD_StdEPReq+0x240>
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	3310      	adds	r3, #16
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	4413      	add	r3, r2
 800902c:	3304      	adds	r3, #4
 800902e:	e00b      	b.n	8009048 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	4413      	add	r3, r2
 8009046:	3304      	adds	r3, #4
 8009048:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <USBD_StdEPReq+0x266>
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b80      	cmp	r3, #128	@ 0x80
 8009054:	d103      	bne.n	800905e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	e00e      	b.n	800907c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 ff0e 	bl	8009e84 <USBD_LL_IsStallEP>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2201      	movs	r2, #1
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e002      	b.n	800907c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2202      	movs	r2, #2
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fb94 	bl	80097b0 <USBD_CtlSendData>
              break;
 8009088:	e004      	b.n	8009094 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fb24 	bl	80096da <USBD_CtlError>
              break;
 8009092:	bf00      	nop
          }
          break;
 8009094:	e004      	b.n	80090a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fb1e 	bl	80096da <USBD_CtlError>
          break;
 800909e:	bf00      	nop
      }
      break;
 80090a0:	e004      	b.n	80090ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fb18 	bl	80096da <USBD_CtlError>
      break;
 80090aa:	bf00      	nop
  }

  return ret;
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	885b      	ldrh	r3, [r3, #2]
 80090d2:	0a1b      	lsrs	r3, r3, #8
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	3b01      	subs	r3, #1
 80090d8:	2b06      	cmp	r3, #6
 80090da:	f200 8128 	bhi.w	800932e <USBD_GetDescriptor+0x276>
 80090de:	a201      	add	r2, pc, #4	@ (adr r2, 80090e4 <USBD_GetDescriptor+0x2c>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	08009101 	.word	0x08009101
 80090e8:	08009119 	.word	0x08009119
 80090ec:	08009159 	.word	0x08009159
 80090f0:	0800932f 	.word	0x0800932f
 80090f4:	0800932f 	.word	0x0800932f
 80090f8:	080092cf 	.word	0x080092cf
 80090fc:	080092fb 	.word	0x080092fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	7c12      	ldrb	r2, [r2, #16]
 800910c:	f107 0108 	add.w	r1, r7, #8
 8009110:	4610      	mov	r0, r2
 8009112:	4798      	blx	r3
 8009114:	60f8      	str	r0, [r7, #12]
      break;
 8009116:	e112      	b.n	800933e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	7c1b      	ldrb	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10d      	bne.n	800913c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009128:	f107 0208 	add.w	r2, r7, #8
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
 8009130:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3301      	adds	r3, #1
 8009136:	2202      	movs	r2, #2
 8009138:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800913a:	e100      	b.n	800933e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	f107 0208 	add.w	r2, r7, #8
 8009148:	4610      	mov	r0, r2
 800914a:	4798      	blx	r3
 800914c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	2202      	movs	r2, #2
 8009154:	701a      	strb	r2, [r3, #0]
      break;
 8009156:	e0f2      	b.n	800933e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	885b      	ldrh	r3, [r3, #2]
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b05      	cmp	r3, #5
 8009160:	f200 80ac 	bhi.w	80092bc <USBD_GetDescriptor+0x204>
 8009164:	a201      	add	r2, pc, #4	@ (adr r2, 800916c <USBD_GetDescriptor+0xb4>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	08009185 	.word	0x08009185
 8009170:	080091b9 	.word	0x080091b9
 8009174:	080091ed 	.word	0x080091ed
 8009178:	08009221 	.word	0x08009221
 800917c:	08009255 	.word	0x08009255
 8009180:	08009289 	.word	0x08009289
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00b      	beq.n	80091a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	7c12      	ldrb	r2, [r2, #16]
 800919c:	f107 0108 	add.w	r1, r7, #8
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
 80091a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091a6:	e091      	b.n	80092cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fa95 	bl	80096da <USBD_CtlError>
            err++;
 80091b0:	7afb      	ldrb	r3, [r7, #11]
 80091b2:	3301      	adds	r3, #1
 80091b4:	72fb      	strb	r3, [r7, #11]
          break;
 80091b6:	e089      	b.n	80092cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	7c12      	ldrb	r2, [r2, #16]
 80091d0:	f107 0108 	add.w	r1, r7, #8
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
 80091d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091da:	e077      	b.n	80092cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa7b 	bl	80096da <USBD_CtlError>
            err++;
 80091e4:	7afb      	ldrb	r3, [r7, #11]
 80091e6:	3301      	adds	r3, #1
 80091e8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ea:	e06f      	b.n	80092cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	f107 0108 	add.w	r1, r7, #8
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800920e:	e05d      	b.n	80092cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fa61 	bl	80096da <USBD_CtlError>
            err++;
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	3301      	adds	r3, #1
 800921c:	72fb      	strb	r3, [r7, #11]
          break;
 800921e:	e055      	b.n	80092cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	7c12      	ldrb	r2, [r2, #16]
 8009238:	f107 0108 	add.w	r1, r7, #8
 800923c:	4610      	mov	r0, r2
 800923e:	4798      	blx	r3
 8009240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009242:	e043      	b.n	80092cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa47 	bl	80096da <USBD_CtlError>
            err++;
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	3301      	adds	r3, #1
 8009250:	72fb      	strb	r3, [r7, #11]
          break;
 8009252:	e03b      	b.n	80092cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	7c12      	ldrb	r2, [r2, #16]
 800926c:	f107 0108 	add.w	r1, r7, #8
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009276:	e029      	b.n	80092cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa2d 	bl	80096da <USBD_CtlError>
            err++;
 8009280:	7afb      	ldrb	r3, [r7, #11]
 8009282:	3301      	adds	r3, #1
 8009284:	72fb      	strb	r3, [r7, #11]
          break;
 8009286:	e021      	b.n	80092cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	7c12      	ldrb	r2, [r2, #16]
 80092a0:	f107 0108 	add.w	r1, r7, #8
 80092a4:	4610      	mov	r0, r2
 80092a6:	4798      	blx	r3
 80092a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092aa:	e00f      	b.n	80092cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa13 	bl	80096da <USBD_CtlError>
            err++;
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	3301      	adds	r3, #1
 80092b8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ba:	e007      	b.n	80092cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fa0b 	bl	80096da <USBD_CtlError>
          err++;
 80092c4:	7afb      	ldrb	r3, [r7, #11]
 80092c6:	3301      	adds	r3, #1
 80092c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80092ca:	e038      	b.n	800933e <USBD_GetDescriptor+0x286>
 80092cc:	e037      	b.n	800933e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7c1b      	ldrb	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092de:	f107 0208 	add.w	r2, r7, #8
 80092e2:	4610      	mov	r0, r2
 80092e4:	4798      	blx	r3
 80092e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092e8:	e029      	b.n	800933e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f9f4 	bl	80096da <USBD_CtlError>
        err++;
 80092f2:	7afb      	ldrb	r3, [r7, #11]
 80092f4:	3301      	adds	r3, #1
 80092f6:	72fb      	strb	r3, [r7, #11]
      break;
 80092f8:	e021      	b.n	800933e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	7c1b      	ldrb	r3, [r3, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10d      	bne.n	800931e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800930a:	f107 0208 	add.w	r2, r7, #8
 800930e:	4610      	mov	r0, r2
 8009310:	4798      	blx	r3
 8009312:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3301      	adds	r3, #1
 8009318:	2207      	movs	r2, #7
 800931a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800931c:	e00f      	b.n	800933e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f9da 	bl	80096da <USBD_CtlError>
        err++;
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	3301      	adds	r3, #1
 800932a:	72fb      	strb	r3, [r7, #11]
      break;
 800932c:	e007      	b.n	800933e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f9d2 	bl	80096da <USBD_CtlError>
      err++;
 8009336:	7afb      	ldrb	r3, [r7, #11]
 8009338:	3301      	adds	r3, #1
 800933a:	72fb      	strb	r3, [r7, #11]
      break;
 800933c:	bf00      	nop
  }

  if (err != 0U)
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d11c      	bne.n	800937e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009344:	893b      	ldrh	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d011      	beq.n	800936e <USBD_GetDescriptor+0x2b6>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	88db      	ldrh	r3, [r3, #6]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00d      	beq.n	800936e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	88da      	ldrh	r2, [r3, #6]
 8009356:	893b      	ldrh	r3, [r7, #8]
 8009358:	4293      	cmp	r3, r2
 800935a:	bf28      	it	cs
 800935c:	4613      	movcs	r3, r2
 800935e:	b29b      	uxth	r3, r3
 8009360:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009362:	893b      	ldrh	r3, [r7, #8]
 8009364:	461a      	mov	r2, r3
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fa21 	bl	80097b0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	88db      	ldrh	r3, [r3, #6]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d104      	bne.n	8009380 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa5a 	bl	8009830 <USBD_CtlSendStatus>
 800937c:	e000      	b.n	8009380 <USBD_GetDescriptor+0x2c8>
    return;
 800937e:	bf00      	nop
    }
  }
}
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop

08009388 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	889b      	ldrh	r3, [r3, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d130      	bne.n	80093fc <USBD_SetAddress+0x74>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	88db      	ldrh	r3, [r3, #6]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d12c      	bne.n	80093fc <USBD_SetAddress+0x74>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	885b      	ldrh	r3, [r3, #2]
 80093a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80093a8:	d828      	bhi.n	80093fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	885b      	ldrh	r3, [r3, #2]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d104      	bne.n	80093ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f989 	bl	80096da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c8:	e01d      	b.n	8009406 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	7bfa      	ldrb	r2, [r7, #15]
 80093ce:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fd80 	bl	8009edc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fa27 	bl	8009830 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d004      	beq.n	80093f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f0:	e009      	b.n	8009406 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093fa:	e004      	b.n	8009406 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f96b 	bl	80096da <USBD_CtlError>
  }
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
	...

08009410 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	885b      	ldrh	r3, [r3, #2]
 800941e:	b2da      	uxtb	r2, r3
 8009420:	4b41      	ldr	r3, [pc, #260]	@ (8009528 <USBD_SetConfig+0x118>)
 8009422:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009424:	4b40      	ldr	r3, [pc, #256]	@ (8009528 <USBD_SetConfig+0x118>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d904      	bls.n	8009436 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f953 	bl	80096da <USBD_CtlError>
 8009434:	e075      	b.n	8009522 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800943c:	2b02      	cmp	r3, #2
 800943e:	d002      	beq.n	8009446 <USBD_SetConfig+0x36>
 8009440:	2b03      	cmp	r3, #3
 8009442:	d023      	beq.n	800948c <USBD_SetConfig+0x7c>
 8009444:	e062      	b.n	800950c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009446:	4b38      	ldr	r3, [pc, #224]	@ (8009528 <USBD_SetConfig+0x118>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d01a      	beq.n	8009484 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800944e:	4b36      	ldr	r3, [pc, #216]	@ (8009528 <USBD_SetConfig+0x118>)
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2203      	movs	r2, #3
 800945c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009460:	4b31      	ldr	r3, [pc, #196]	@ (8009528 <USBD_SetConfig+0x118>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff f9e4 	bl	8008834 <USBD_SetClassConfig>
 800946c:	4603      	mov	r3, r0
 800946e:	2b02      	cmp	r3, #2
 8009470:	d104      	bne.n	800947c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f930 	bl	80096da <USBD_CtlError>
            return;
 800947a:	e052      	b.n	8009522 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f9d7 	bl	8009830 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009482:	e04e      	b.n	8009522 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f9d3 	bl	8009830 <USBD_CtlSendStatus>
        break;
 800948a:	e04a      	b.n	8009522 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800948c:	4b26      	ldr	r3, [pc, #152]	@ (8009528 <USBD_SetConfig+0x118>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d112      	bne.n	80094ba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800949c:	4b22      	ldr	r3, [pc, #136]	@ (8009528 <USBD_SetConfig+0x118>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	461a      	mov	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80094a6:	4b20      	ldr	r3, [pc, #128]	@ (8009528 <USBD_SetConfig+0x118>)
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff f9e0 	bl	8008872 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f9bc 	bl	8009830 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80094b8:	e033      	b.n	8009522 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80094ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009528 <USBD_SetConfig+0x118>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d01d      	beq.n	8009504 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7ff f9ce 	bl	8008872 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80094d6:	4b14      	ldr	r3, [pc, #80]	@ (8009528 <USBD_SetConfig+0x118>)
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80094e0:	4b11      	ldr	r3, [pc, #68]	@ (8009528 <USBD_SetConfig+0x118>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff f9a4 	bl	8008834 <USBD_SetClassConfig>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d104      	bne.n	80094fc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f8f0 	bl	80096da <USBD_CtlError>
            return;
 80094fa:	e012      	b.n	8009522 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f997 	bl	8009830 <USBD_CtlSendStatus>
        break;
 8009502:	e00e      	b.n	8009522 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f993 	bl	8009830 <USBD_CtlSendStatus>
        break;
 800950a:	e00a      	b.n	8009522 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f8e3 	bl	80096da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009514:	4b04      	ldr	r3, [pc, #16]	@ (8009528 <USBD_SetConfig+0x118>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff f9a9 	bl	8008872 <USBD_ClrClassConfig>
        break;
 8009520:	bf00      	nop
    }
  }
}
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20000458 	.word	0x20000458

0800952c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	88db      	ldrh	r3, [r3, #6]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d004      	beq.n	8009548 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f8ca 	bl	80096da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009546:	e022      	b.n	800958e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800954e:	2b02      	cmp	r3, #2
 8009550:	dc02      	bgt.n	8009558 <USBD_GetConfig+0x2c>
 8009552:	2b00      	cmp	r3, #0
 8009554:	dc03      	bgt.n	800955e <USBD_GetConfig+0x32>
 8009556:	e015      	b.n	8009584 <USBD_GetConfig+0x58>
 8009558:	2b03      	cmp	r3, #3
 800955a:	d00b      	beq.n	8009574 <USBD_GetConfig+0x48>
 800955c:	e012      	b.n	8009584 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3308      	adds	r3, #8
 8009568:	2201      	movs	r2, #1
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f91f 	bl	80097b0 <USBD_CtlSendData>
        break;
 8009572:	e00c      	b.n	800958e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3304      	adds	r3, #4
 8009578:	2201      	movs	r2, #1
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f917 	bl	80097b0 <USBD_CtlSendData>
        break;
 8009582:	e004      	b.n	800958e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f8a7 	bl	80096da <USBD_CtlError>
        break;
 800958c:	bf00      	nop
}
 800958e:	bf00      	nop
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095a6:	3b01      	subs	r3, #1
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d81e      	bhi.n	80095ea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	88db      	ldrh	r3, [r3, #6]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d004      	beq.n	80095be <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f88f 	bl	80096da <USBD_CtlError>
        break;
 80095bc:	e01a      	b.n	80095f4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f043 0202 	orr.w	r2, r3, #2
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	330c      	adds	r3, #12
 80095de:	2202      	movs	r2, #2
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f8e4 	bl	80097b0 <USBD_CtlSendData>
      break;
 80095e8:	e004      	b.n	80095f4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80095ea:	6839      	ldr	r1, [r7, #0]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f874 	bl	80096da <USBD_CtlError>
      break;
 80095f2:	bf00      	nop
  }
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	885b      	ldrh	r3, [r3, #2]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d106      	bne.n	800961c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f90a 	bl	8009830 <USBD_CtlSendStatus>
  }
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009634:	3b01      	subs	r3, #1
 8009636:	2b02      	cmp	r3, #2
 8009638:	d80b      	bhi.n	8009652 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	885b      	ldrh	r3, [r3, #2]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d10c      	bne.n	800965c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f8f0 	bl	8009830 <USBD_CtlSendStatus>
      }
      break;
 8009650:	e004      	b.n	800965c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f840 	bl	80096da <USBD_CtlError>
      break;
 800965a:	e000      	b.n	800965e <USBD_ClrFeature+0x3a>
      break;
 800965c:	bf00      	nop
  }
}
 800965e:	bf00      	nop
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781a      	ldrb	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	785a      	ldrb	r2, [r3, #1]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	3302      	adds	r3, #2
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	3303      	adds	r3, #3
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	021b      	lsls	r3, r3, #8
 8009690:	b29b      	uxth	r3, r3
 8009692:	4413      	add	r3, r2
 8009694:	b29a      	uxth	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	3304      	adds	r3, #4
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	3305      	adds	r3, #5
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	4413      	add	r3, r2
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	3306      	adds	r3, #6
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	3307      	adds	r3, #7
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	021b      	lsls	r3, r3, #8
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	4413      	add	r3, r2
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	80da      	strh	r2, [r3, #6]

}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80096e4:	2180      	movs	r1, #128	@ 0x80
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fb8e 	bl	8009e08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80096ec:	2100      	movs	r1, #0
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fb8a 	bl	8009e08 <USBD_LL_StallEP>
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d032      	beq.n	8009778 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 f834 	bl	8009780 <USBD_GetLen>
 8009718:	4603      	mov	r3, r0
 800971a:	3301      	adds	r3, #1
 800971c:	b29b      	uxth	r3, r3
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	b29a      	uxth	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	75fa      	strb	r2, [r7, #23]
 800972c:	461a      	mov	r2, r3
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	4413      	add	r3, r2
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	7812      	ldrb	r2, [r2, #0]
 8009736:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	75fa      	strb	r2, [r7, #23]
 800973e:	461a      	mov	r2, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	4413      	add	r3, r2
 8009744:	2203      	movs	r2, #3
 8009746:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009748:	e012      	b.n	8009770 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	60fa      	str	r2, [r7, #12]
 8009750:	7dfa      	ldrb	r2, [r7, #23]
 8009752:	1c51      	adds	r1, r2, #1
 8009754:	75f9      	strb	r1, [r7, #23]
 8009756:	4611      	mov	r1, r2
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	440a      	add	r2, r1
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	75fa      	strb	r2, [r7, #23]
 8009766:	461a      	mov	r2, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	4413      	add	r3, r2
 800976c:	2200      	movs	r2, #0
 800976e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1e8      	bne.n	800974a <USBD_GetString+0x4e>
    }
  }
}
 8009778:	bf00      	nop
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800978c:	e005      	b.n	800979a <USBD_GetLen+0x1a>
  {
    len++;
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	3301      	adds	r3, #1
 8009792:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3301      	adds	r3, #1
 8009798:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1f5      	bne.n	800978e <USBD_GetLen+0xe>
  }

  return len;
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	4613      	mov	r3, r2
 80097bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2202      	movs	r2, #2
 80097c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80097c6:	88fa      	ldrh	r2, [r7, #6]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80097cc:	88fa      	ldrh	r2, [r7, #6]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097d2:	88fb      	ldrh	r3, [r7, #6]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	2100      	movs	r1, #0
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 fb9e 	bl	8009f1a <USBD_LL_Transmit>

  return USBD_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	4613      	mov	r3, r2
 80097f4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097f6:	88fb      	ldrh	r3, [r7, #6]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	2100      	movs	r1, #0
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 fb8c 	bl	8009f1a <USBD_LL_Transmit>

  return USBD_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800981a:	88fb      	ldrh	r3, [r7, #6]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	2100      	movs	r1, #0
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 fb9d 	bl	8009f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2204      	movs	r2, #4
 800983c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009840:	2300      	movs	r3, #0
 8009842:	2200      	movs	r2, #0
 8009844:	2100      	movs	r1, #0
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fb67 	bl	8009f1a <USBD_LL_Transmit>

  return USBD_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2205      	movs	r2, #5
 8009862:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009866:	2300      	movs	r3, #0
 8009868:	2200      	movs	r2, #0
 800986a:	2100      	movs	r1, #0
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fb77 	bl	8009f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009880:	2200      	movs	r2, #0
 8009882:	490e      	ldr	r1, [pc, #56]	@ (80098bc <MX_USB_DEVICE_Init+0x40>)
 8009884:	480e      	ldr	r0, [pc, #56]	@ (80098c0 <MX_USB_DEVICE_Init+0x44>)
 8009886:	f7fe ff79 	bl	800877c <USBD_Init>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009890:	f7f7 fb80 	bl	8000f94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009894:	490b      	ldr	r1, [pc, #44]	@ (80098c4 <MX_USB_DEVICE_Init+0x48>)
 8009896:	480a      	ldr	r0, [pc, #40]	@ (80098c0 <MX_USB_DEVICE_Init+0x44>)
 8009898:	f7fe ff9b 	bl	80087d2 <USBD_RegisterClass>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098a2:	f7f7 fb77 	bl	8000f94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098a6:	4806      	ldr	r0, [pc, #24]	@ (80098c0 <MX_USB_DEVICE_Init+0x44>)
 80098a8:	f7fe ffad 	bl	8008806 <USBD_Start>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80098b2:	f7f7 fb6f 	bl	8000f94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098b6:	bf00      	nop
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20000114 	.word	0x20000114
 80098c0:	2000045c 	.word	0x2000045c
 80098c4:	2000000c 	.word	0x2000000c

080098c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	6039      	str	r1, [r7, #0]
 80098d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	2212      	movs	r2, #18
 80098d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098da:	4b03      	ldr	r3, [pc, #12]	@ (80098e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	20000130 	.word	0x20000130

080098ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	6039      	str	r1, [r7, #0]
 80098f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2204      	movs	r2, #4
 80098fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098fe:	4b03      	ldr	r3, [pc, #12]	@ (800990c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009900:	4618      	mov	r0, r3
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	20000144 	.word	0x20000144

08009910 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	4907      	ldr	r1, [pc, #28]	@ (8009944 <USBD_FS_ProductStrDescriptor+0x34>)
 8009926:	4808      	ldr	r0, [pc, #32]	@ (8009948 <USBD_FS_ProductStrDescriptor+0x38>)
 8009928:	f7ff fee8 	bl	80096fc <USBD_GetString>
 800992c:	e004      	b.n	8009938 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	4904      	ldr	r1, [pc, #16]	@ (8009944 <USBD_FS_ProductStrDescriptor+0x34>)
 8009932:	4805      	ldr	r0, [pc, #20]	@ (8009948 <USBD_FS_ProductStrDescriptor+0x38>)
 8009934:	f7ff fee2 	bl	80096fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009938:	4b02      	ldr	r3, [pc, #8]	@ (8009944 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20000720 	.word	0x20000720
 8009948:	0800e924 	.word	0x0800e924

0800994c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	6039      	str	r1, [r7, #0]
 8009956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	4904      	ldr	r1, [pc, #16]	@ (800996c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800995c:	4804      	ldr	r0, [pc, #16]	@ (8009970 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800995e:	f7ff fecd 	bl	80096fc <USBD_GetString>
  return USBD_StrDesc;
 8009962:	4b02      	ldr	r3, [pc, #8]	@ (800996c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20000720 	.word	0x20000720
 8009970:	0800e93c 	.word	0x0800e93c

08009974 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	6039      	str	r1, [r7, #0]
 800997e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	221a      	movs	r2, #26
 8009984:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009986:	f000 f843 	bl	8009a10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800998a:	4b02      	ldr	r3, [pc, #8]	@ (8009994 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800998c:	4618      	mov	r0, r3
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000148 	.word	0x20000148

08009998 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	6039      	str	r1, [r7, #0]
 80099a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099a4:	79fb      	ldrb	r3, [r7, #7]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d105      	bne.n	80099b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	4907      	ldr	r1, [pc, #28]	@ (80099cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80099ae:	4808      	ldr	r0, [pc, #32]	@ (80099d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099b0:	f7ff fea4 	bl	80096fc <USBD_GetString>
 80099b4:	e004      	b.n	80099c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	4904      	ldr	r1, [pc, #16]	@ (80099cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80099ba:	4805      	ldr	r0, [pc, #20]	@ (80099d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099bc:	f7ff fe9e 	bl	80096fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80099c0:	4b02      	ldr	r3, [pc, #8]	@ (80099cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20000720 	.word	0x20000720
 80099d0:	0800e950 	.word	0x0800e950

080099d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	6039      	str	r1, [r7, #0]
 80099de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d105      	bne.n	80099f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	4907      	ldr	r1, [pc, #28]	@ (8009a08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099ea:	4808      	ldr	r0, [pc, #32]	@ (8009a0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099ec:	f7ff fe86 	bl	80096fc <USBD_GetString>
 80099f0:	e004      	b.n	80099fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4904      	ldr	r1, [pc, #16]	@ (8009a08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099f6:	4805      	ldr	r0, [pc, #20]	@ (8009a0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099f8:	f7ff fe80 	bl	80096fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80099fc:	4b02      	ldr	r3, [pc, #8]	@ (8009a08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20000720 	.word	0x20000720
 8009a0c:	0800e95c 	.word	0x0800e95c

08009a10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a16:	4b0f      	ldr	r3, [pc, #60]	@ (8009a54 <Get_SerialNum+0x44>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8009a58 <Get_SerialNum+0x48>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a22:	4b0e      	ldr	r3, [pc, #56]	@ (8009a5c <Get_SerialNum+0x4c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d009      	beq.n	8009a4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a36:	2208      	movs	r2, #8
 8009a38:	4909      	ldr	r1, [pc, #36]	@ (8009a60 <Get_SerialNum+0x50>)
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 f814 	bl	8009a68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a40:	2204      	movs	r2, #4
 8009a42:	4908      	ldr	r1, [pc, #32]	@ (8009a64 <Get_SerialNum+0x54>)
 8009a44:	68b8      	ldr	r0, [r7, #8]
 8009a46:	f000 f80f 	bl	8009a68 <IntToUnicode>
  }
}
 8009a4a:	bf00      	nop
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	1ffff7ac 	.word	0x1ffff7ac
 8009a58:	1ffff7b0 	.word	0x1ffff7b0
 8009a5c:	1ffff7b4 	.word	0x1ffff7b4
 8009a60:	2000014a 	.word	0x2000014a
 8009a64:	2000015a 	.word	0x2000015a

08009a68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	4613      	mov	r3, r2
 8009a74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	75fb      	strb	r3, [r7, #23]
 8009a7e:	e027      	b.n	8009ad0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	0f1b      	lsrs	r3, r3, #28
 8009a84:	2b09      	cmp	r3, #9
 8009a86:	d80b      	bhi.n	8009aa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	0f1b      	lsrs	r3, r3, #28
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	4619      	mov	r1, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	440b      	add	r3, r1
 8009a98:	3230      	adds	r2, #48	@ 0x30
 8009a9a:	b2d2      	uxtb	r2, r2
 8009a9c:	701a      	strb	r2, [r3, #0]
 8009a9e:	e00a      	b.n	8009ab6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	0f1b      	lsrs	r3, r3, #28
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	4619      	mov	r1, r3
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	440b      	add	r3, r1
 8009ab0:	3237      	adds	r2, #55	@ 0x37
 8009ab2:	b2d2      	uxtb	r2, r2
 8009ab4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
 8009acc:	3301      	adds	r3, #1
 8009ace:	75fb      	strb	r3, [r7, #23]
 8009ad0:	7dfa      	ldrb	r2, [r7, #23]
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d3d3      	bcc.n	8009a80 <IntToUnicode+0x18>
  }
}
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
	...

08009ae8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	@ 0x28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009af0:	f107 0314 	add.w	r3, r7, #20
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	605a      	str	r2, [r3, #4]
 8009afa:	609a      	str	r2, [r3, #8]
 8009afc:	60da      	str	r2, [r3, #12]
 8009afe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a1c      	ldr	r2, [pc, #112]	@ (8009b78 <HAL_PCD_MspInit+0x90>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d131      	bne.n	8009b6e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8009b7c <HAL_PCD_MspInit+0x94>)
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009b7c <HAL_PCD_MspInit+0x94>)
 8009b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b14:	6153      	str	r3, [r2, #20]
 8009b16:	4b19      	ldr	r3, [pc, #100]	@ (8009b7c <HAL_PCD_MspInit+0x94>)
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b1e:	613b      	str	r3, [r7, #16]
 8009b20:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b22:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009b30:	2303      	movs	r3, #3
 8009b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009b34:	230e      	movs	r3, #14
 8009b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b38:	f107 0314 	add.w	r3, r7, #20
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009b42:	f7f8 f8c5 	bl	8001cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b46:	4b0d      	ldr	r3, [pc, #52]	@ (8009b7c <HAL_PCD_MspInit+0x94>)
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009b7c <HAL_PCD_MspInit+0x94>)
 8009b4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b50:	61d3      	str	r3, [r2, #28]
 8009b52:	4b0a      	ldr	r3, [pc, #40]	@ (8009b7c <HAL_PCD_MspInit+0x94>)
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2100      	movs	r1, #0
 8009b62:	2014      	movs	r0, #20
 8009b64:	f7f8 f87d 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009b68:	2014      	movs	r0, #20
 8009b6a:	f7f8 f896 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b6e:	bf00      	nop
 8009b70:	3728      	adds	r7, #40	@ 0x28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40005c00 	.word	0x40005c00
 8009b7c:	40021000 	.word	0x40021000

08009b80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7fe fe7e 	bl	8008898 <USBD_LL_SetupStage>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009bb6:	78fa      	ldrb	r2, [r7, #3]
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	440b      	add	r3, r1
 8009bc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f7fe feb0 	bl	8008932 <USBD_LL_DataOutStage>
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b082      	sub	sp, #8
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	460b      	mov	r3, r1
 8009be4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009bec:	78fa      	ldrb	r2, [r7, #3]
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	440b      	add	r3, r1
 8009bfa:	3324      	adds	r3, #36	@ 0x24
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	4619      	mov	r1, r3
 8009c02:	f7fe ff07 	bl	8008a14 <USBD_LL_DataInStage>
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff f81a 	bl	8008c56 <USBD_LL_SOF>
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c32:	2301      	movs	r3, #1
 8009c34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	795b      	ldrb	r3, [r3, #5]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d001      	beq.n	8009c42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c3e:	f7f7 f9a9 	bl	8000f94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009c48:	7bfa      	ldrb	r2, [r7, #15]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7fe ffc7 	bl	8008be0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fe ff80 	bl	8008b5e <USBD_LL_Reset>
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe ffc2 	bl	8008c00 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	7a5b      	ldrb	r3, [r3, #9]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d005      	beq.n	8009c90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c84:	4b04      	ldr	r3, [pc, #16]	@ (8009c98 <HAL_PCD_SuspendCallback+0x30>)
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	4a03      	ldr	r2, [pc, #12]	@ (8009c98 <HAL_PCD_SuspendCallback+0x30>)
 8009c8a:	f043 0306 	orr.w	r3, r3, #6
 8009c8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	e000ed00 	.word	0xe000ed00

08009c9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe ffbd 	bl	8008c2a <USBD_LL_Resume>
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8009d40 <USBD_LL_Init+0x88>)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a1d      	ldr	r2, [pc, #116]	@ (8009d40 <USBD_LL_Init+0x88>)
 8009ccc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8009d40 <USBD_LL_Init+0x88>)
 8009cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8009d44 <USBD_LL_Init+0x8c>)
 8009cd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8009d40 <USBD_LL_Init+0x88>)
 8009cd8:	2208      	movs	r2, #8
 8009cda:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009cdc:	4b18      	ldr	r3, [pc, #96]	@ (8009d40 <USBD_LL_Init+0x88>)
 8009cde:	2202      	movs	r2, #2
 8009ce0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ce2:	4b17      	ldr	r3, [pc, #92]	@ (8009d40 <USBD_LL_Init+0x88>)
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ce8:	4b15      	ldr	r3, [pc, #84]	@ (8009d40 <USBD_LL_Init+0x88>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009cee:	4b14      	ldr	r3, [pc, #80]	@ (8009d40 <USBD_LL_Init+0x88>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009cf4:	4812      	ldr	r0, [pc, #72]	@ (8009d40 <USBD_LL_Init+0x88>)
 8009cf6:	f7f8 ffa0 	bl	8002c3a <HAL_PCD_Init>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009d00:	f7f7 f948 	bl	8000f94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d0a:	2318      	movs	r3, #24
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2100      	movs	r1, #0
 8009d10:	f7fa fc01 	bl	8004516 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d1a:	2358      	movs	r3, #88	@ 0x58
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2180      	movs	r1, #128	@ 0x80
 8009d20:	f7fa fbf9 	bl	8004516 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2181      	movs	r1, #129	@ 0x81
 8009d32:	f7fa fbf0 	bl	8004516 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	20000920 	.word	0x20000920
 8009d44:	40005c00 	.word	0x40005c00

08009d48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f9 f832 	bl	8002dc8 <HAL_PCD_Start>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 f940 	bl	8009ff0 <USBD_Get_USB_Status>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	70fb      	strb	r3, [r7, #3]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70bb      	strb	r3, [r7, #2]
 8009d94:	4613      	mov	r3, r2
 8009d96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009da6:	78bb      	ldrb	r3, [r7, #2]
 8009da8:	883a      	ldrh	r2, [r7, #0]
 8009daa:	78f9      	ldrb	r1, [r7, #3]
 8009dac:	f7f9 f92a 	bl	8003004 <HAL_PCD_EP_Open>
 8009db0:	4603      	mov	r3, r0
 8009db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 f91a 	bl	8009ff0 <USBD_Get_USB_Status>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	4611      	mov	r1, r2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7f9 f968 	bl	80030be <HAL_PCD_EP_Close>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 f8fb 	bl	8009ff0 <USBD_Get_USB_Status>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e22:	78fa      	ldrb	r2, [r7, #3]
 8009e24:	4611      	mov	r1, r2
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7f9 f9f9 	bl	800321e <HAL_PCD_EP_SetStall>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 f8dc 	bl	8009ff0 <USBD_Get_USB_Status>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e60:	78fa      	ldrb	r2, [r7, #3]
 8009e62:	4611      	mov	r1, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7f9 fa2c 	bl	80032c2 <HAL_PCD_EP_ClrStall>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 f8bd 	bl	8009ff0 <USBD_Get_USB_Status>
 8009e76:	4603      	mov	r3, r0
 8009e78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	da0b      	bge.n	8009eb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	440b      	add	r3, r1
 8009eb2:	3312      	adds	r3, #18
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	e00b      	b.n	8009ed0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ebe:	68f9      	ldr	r1, [r7, #12]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	440b      	add	r3, r1
 8009eca:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009ece:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ef6:	78fa      	ldrb	r2, [r7, #3]
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7f9 f85e 	bl	8002fbc <HAL_PCD_SetAddress>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 f872 	bl	8009ff0 <USBD_Get_USB_Status>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b086      	sub	sp, #24
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	60f8      	str	r0, [r7, #12]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	461a      	mov	r2, r3
 8009f26:	460b      	mov	r3, r1
 8009f28:	72fb      	strb	r3, [r7, #11]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f3c:	893b      	ldrh	r3, [r7, #8]
 8009f3e:	7af9      	ldrb	r1, [r7, #11]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	f7f9 f935 	bl	80031b0 <HAL_PCD_EP_Transmit>
 8009f46:	4603      	mov	r3, r0
 8009f48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 f84f 	bl	8009ff0 <USBD_Get_USB_Status>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f56:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	72fb      	strb	r3, [r7, #11]
 8009f70:	4613      	mov	r3, r2
 8009f72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f82:	893b      	ldrh	r3, [r7, #8]
 8009f84:	7af9      	ldrb	r1, [r7, #11]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	f7f9 f8e1 	bl	800314e <HAL_PCD_EP_Receive>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 f82c 	bl	8009ff0 <USBD_Get_USB_Status>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fb0:	4b03      	ldr	r3, [pc, #12]	@ (8009fc0 <USBD_static_malloc+0x18>)
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	20000bf4 	.word	0x20000bf4

08009fc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]

}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	2b03      	cmp	r3, #3
 800a002:	d817      	bhi.n	800a034 <USBD_Get_USB_Status+0x44>
 800a004:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <USBD_Get_USB_Status+0x1c>)
 800a006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00a:	bf00      	nop
 800a00c:	0800a01d 	.word	0x0800a01d
 800a010:	0800a023 	.word	0x0800a023
 800a014:	0800a029 	.word	0x0800a029
 800a018:	0800a02f 	.word	0x0800a02f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
    break;
 800a020:	e00b      	b.n	800a03a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a022:	2302      	movs	r3, #2
 800a024:	73fb      	strb	r3, [r7, #15]
    break;
 800a026:	e008      	b.n	800a03a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a028:	2301      	movs	r3, #1
 800a02a:	73fb      	strb	r3, [r7, #15]
    break;
 800a02c:	e005      	b.n	800a03a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a02e:	2302      	movs	r3, #2
 800a030:	73fb      	strb	r3, [r7, #15]
    break;
 800a032:	e002      	b.n	800a03a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a034:	2302      	movs	r3, #2
 800a036:	73fb      	strb	r3, [r7, #15]
    break;
 800a038:	bf00      	nop
  }
  return usb_status;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <__cvt>:
 800a048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	ec57 6b10 	vmov	r6, r7, d0
 800a050:	2f00      	cmp	r7, #0
 800a052:	460c      	mov	r4, r1
 800a054:	4619      	mov	r1, r3
 800a056:	463b      	mov	r3, r7
 800a058:	bfbb      	ittet	lt
 800a05a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a05e:	461f      	movlt	r7, r3
 800a060:	2300      	movge	r3, #0
 800a062:	232d      	movlt	r3, #45	@ 0x2d
 800a064:	700b      	strb	r3, [r1, #0]
 800a066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a068:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a06c:	4691      	mov	r9, r2
 800a06e:	f023 0820 	bic.w	r8, r3, #32
 800a072:	bfbc      	itt	lt
 800a074:	4632      	movlt	r2, r6
 800a076:	4616      	movlt	r6, r2
 800a078:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a07c:	d005      	beq.n	800a08a <__cvt+0x42>
 800a07e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a082:	d100      	bne.n	800a086 <__cvt+0x3e>
 800a084:	3401      	adds	r4, #1
 800a086:	2102      	movs	r1, #2
 800a088:	e000      	b.n	800a08c <__cvt+0x44>
 800a08a:	2103      	movs	r1, #3
 800a08c:	ab03      	add	r3, sp, #12
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	ab02      	add	r3, sp, #8
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	ec47 6b10 	vmov	d0, r6, r7
 800a098:	4653      	mov	r3, sl
 800a09a:	4622      	mov	r2, r4
 800a09c:	f001 f968 	bl	800b370 <_dtoa_r>
 800a0a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	d119      	bne.n	800a0dc <__cvt+0x94>
 800a0a8:	f019 0f01 	tst.w	r9, #1
 800a0ac:	d00e      	beq.n	800a0cc <__cvt+0x84>
 800a0ae:	eb00 0904 	add.w	r9, r0, r4
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	f7f6 fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0be:	b108      	cbz	r0, 800a0c4 <__cvt+0x7c>
 800a0c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0c4:	2230      	movs	r2, #48	@ 0x30
 800a0c6:	9b03      	ldr	r3, [sp, #12]
 800a0c8:	454b      	cmp	r3, r9
 800a0ca:	d31e      	bcc.n	800a10a <__cvt+0xc2>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0d0:	1b5b      	subs	r3, r3, r5
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	b004      	add	sp, #16
 800a0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a0e0:	eb00 0904 	add.w	r9, r0, r4
 800a0e4:	d1e5      	bne.n	800a0b2 <__cvt+0x6a>
 800a0e6:	7803      	ldrb	r3, [r0, #0]
 800a0e8:	2b30      	cmp	r3, #48	@ 0x30
 800a0ea:	d10a      	bne.n	800a102 <__cvt+0xba>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	f7f6 fce8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0f8:	b918      	cbnz	r0, 800a102 <__cvt+0xba>
 800a0fa:	f1c4 0401 	rsb	r4, r4, #1
 800a0fe:	f8ca 4000 	str.w	r4, [sl]
 800a102:	f8da 3000 	ldr.w	r3, [sl]
 800a106:	4499      	add	r9, r3
 800a108:	e7d3      	b.n	800a0b2 <__cvt+0x6a>
 800a10a:	1c59      	adds	r1, r3, #1
 800a10c:	9103      	str	r1, [sp, #12]
 800a10e:	701a      	strb	r2, [r3, #0]
 800a110:	e7d9      	b.n	800a0c6 <__cvt+0x7e>

0800a112 <__exponent>:
 800a112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a114:	2900      	cmp	r1, #0
 800a116:	bfba      	itte	lt
 800a118:	4249      	neglt	r1, r1
 800a11a:	232d      	movlt	r3, #45	@ 0x2d
 800a11c:	232b      	movge	r3, #43	@ 0x2b
 800a11e:	2909      	cmp	r1, #9
 800a120:	7002      	strb	r2, [r0, #0]
 800a122:	7043      	strb	r3, [r0, #1]
 800a124:	dd29      	ble.n	800a17a <__exponent+0x68>
 800a126:	f10d 0307 	add.w	r3, sp, #7
 800a12a:	461d      	mov	r5, r3
 800a12c:	270a      	movs	r7, #10
 800a12e:	461a      	mov	r2, r3
 800a130:	fbb1 f6f7 	udiv	r6, r1, r7
 800a134:	fb07 1416 	mls	r4, r7, r6, r1
 800a138:	3430      	adds	r4, #48	@ 0x30
 800a13a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a13e:	460c      	mov	r4, r1
 800a140:	2c63      	cmp	r4, #99	@ 0x63
 800a142:	f103 33ff 	add.w	r3, r3, #4294967295
 800a146:	4631      	mov	r1, r6
 800a148:	dcf1      	bgt.n	800a12e <__exponent+0x1c>
 800a14a:	3130      	adds	r1, #48	@ 0x30
 800a14c:	1e94      	subs	r4, r2, #2
 800a14e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a152:	1c41      	adds	r1, r0, #1
 800a154:	4623      	mov	r3, r4
 800a156:	42ab      	cmp	r3, r5
 800a158:	d30a      	bcc.n	800a170 <__exponent+0x5e>
 800a15a:	f10d 0309 	add.w	r3, sp, #9
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	42ac      	cmp	r4, r5
 800a162:	bf88      	it	hi
 800a164:	2300      	movhi	r3, #0
 800a166:	3302      	adds	r3, #2
 800a168:	4403      	add	r3, r0
 800a16a:	1a18      	subs	r0, r3, r0
 800a16c:	b003      	add	sp, #12
 800a16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a170:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a174:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a178:	e7ed      	b.n	800a156 <__exponent+0x44>
 800a17a:	2330      	movs	r3, #48	@ 0x30
 800a17c:	3130      	adds	r1, #48	@ 0x30
 800a17e:	7083      	strb	r3, [r0, #2]
 800a180:	70c1      	strb	r1, [r0, #3]
 800a182:	1d03      	adds	r3, r0, #4
 800a184:	e7f1      	b.n	800a16a <__exponent+0x58>
	...

0800a188 <_printf_float>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	b08d      	sub	sp, #52	@ 0x34
 800a18e:	460c      	mov	r4, r1
 800a190:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a194:	4616      	mov	r6, r2
 800a196:	461f      	mov	r7, r3
 800a198:	4605      	mov	r5, r0
 800a19a:	f000 ffe1 	bl	800b160 <_localeconv_r>
 800a19e:	6803      	ldr	r3, [r0, #0]
 800a1a0:	9304      	str	r3, [sp, #16]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7f6 f864 	bl	8000270 <strlen>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b0:	9005      	str	r0, [sp, #20]
 800a1b2:	3307      	adds	r3, #7
 800a1b4:	f023 0307 	bic.w	r3, r3, #7
 800a1b8:	f103 0208 	add.w	r2, r3, #8
 800a1bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a1c0:	f8d4 b000 	ldr.w	fp, [r4]
 800a1c4:	f8c8 2000 	str.w	r2, [r8]
 800a1c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a1d0:	9307      	str	r3, [sp, #28]
 800a1d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a1da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1de:	4b9c      	ldr	r3, [pc, #624]	@ (800a450 <_printf_float+0x2c8>)
 800a1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e4:	f7f6 fca2 	bl	8000b2c <__aeabi_dcmpun>
 800a1e8:	bb70      	cbnz	r0, 800a248 <_printf_float+0xc0>
 800a1ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1ee:	4b98      	ldr	r3, [pc, #608]	@ (800a450 <_printf_float+0x2c8>)
 800a1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f4:	f7f6 fc7c 	bl	8000af0 <__aeabi_dcmple>
 800a1f8:	bb30      	cbnz	r0, 800a248 <_printf_float+0xc0>
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	4640      	mov	r0, r8
 800a200:	4649      	mov	r1, r9
 800a202:	f7f6 fc6b 	bl	8000adc <__aeabi_dcmplt>
 800a206:	b110      	cbz	r0, 800a20e <_printf_float+0x86>
 800a208:	232d      	movs	r3, #45	@ 0x2d
 800a20a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a20e:	4a91      	ldr	r2, [pc, #580]	@ (800a454 <_printf_float+0x2cc>)
 800a210:	4b91      	ldr	r3, [pc, #580]	@ (800a458 <_printf_float+0x2d0>)
 800a212:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a216:	bf94      	ite	ls
 800a218:	4690      	movls	r8, r2
 800a21a:	4698      	movhi	r8, r3
 800a21c:	2303      	movs	r3, #3
 800a21e:	6123      	str	r3, [r4, #16]
 800a220:	f02b 0304 	bic.w	r3, fp, #4
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	f04f 0900 	mov.w	r9, #0
 800a22a:	9700      	str	r7, [sp, #0]
 800a22c:	4633      	mov	r3, r6
 800a22e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a230:	4621      	mov	r1, r4
 800a232:	4628      	mov	r0, r5
 800a234:	f000 f9d2 	bl	800a5dc <_printf_common>
 800a238:	3001      	adds	r0, #1
 800a23a:	f040 808d 	bne.w	800a358 <_printf_float+0x1d0>
 800a23e:	f04f 30ff 	mov.w	r0, #4294967295
 800a242:	b00d      	add	sp, #52	@ 0x34
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	4642      	mov	r2, r8
 800a24a:	464b      	mov	r3, r9
 800a24c:	4640      	mov	r0, r8
 800a24e:	4649      	mov	r1, r9
 800a250:	f7f6 fc6c 	bl	8000b2c <__aeabi_dcmpun>
 800a254:	b140      	cbz	r0, 800a268 <_printf_float+0xe0>
 800a256:	464b      	mov	r3, r9
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bfbc      	itt	lt
 800a25c:	232d      	movlt	r3, #45	@ 0x2d
 800a25e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a262:	4a7e      	ldr	r2, [pc, #504]	@ (800a45c <_printf_float+0x2d4>)
 800a264:	4b7e      	ldr	r3, [pc, #504]	@ (800a460 <_printf_float+0x2d8>)
 800a266:	e7d4      	b.n	800a212 <_printf_float+0x8a>
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a26e:	9206      	str	r2, [sp, #24]
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	d13b      	bne.n	800a2ec <_printf_float+0x164>
 800a274:	2306      	movs	r3, #6
 800a276:	6063      	str	r3, [r4, #4]
 800a278:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a27c:	2300      	movs	r3, #0
 800a27e:	6022      	str	r2, [r4, #0]
 800a280:	9303      	str	r3, [sp, #12]
 800a282:	ab0a      	add	r3, sp, #40	@ 0x28
 800a284:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a288:	ab09      	add	r3, sp, #36	@ 0x24
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	6861      	ldr	r1, [r4, #4]
 800a28e:	ec49 8b10 	vmov	d0, r8, r9
 800a292:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a296:	4628      	mov	r0, r5
 800a298:	f7ff fed6 	bl	800a048 <__cvt>
 800a29c:	9b06      	ldr	r3, [sp, #24]
 800a29e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2a0:	2b47      	cmp	r3, #71	@ 0x47
 800a2a2:	4680      	mov	r8, r0
 800a2a4:	d129      	bne.n	800a2fa <_printf_float+0x172>
 800a2a6:	1cc8      	adds	r0, r1, #3
 800a2a8:	db02      	blt.n	800a2b0 <_printf_float+0x128>
 800a2aa:	6863      	ldr	r3, [r4, #4]
 800a2ac:	4299      	cmp	r1, r3
 800a2ae:	dd41      	ble.n	800a334 <_printf_float+0x1ac>
 800a2b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a2b4:	fa5f fa8a 	uxtb.w	sl, sl
 800a2b8:	3901      	subs	r1, #1
 800a2ba:	4652      	mov	r2, sl
 800a2bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a2c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2c2:	f7ff ff26 	bl	800a112 <__exponent>
 800a2c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2c8:	1813      	adds	r3, r2, r0
 800a2ca:	2a01      	cmp	r2, #1
 800a2cc:	4681      	mov	r9, r0
 800a2ce:	6123      	str	r3, [r4, #16]
 800a2d0:	dc02      	bgt.n	800a2d8 <_printf_float+0x150>
 800a2d2:	6822      	ldr	r2, [r4, #0]
 800a2d4:	07d2      	lsls	r2, r2, #31
 800a2d6:	d501      	bpl.n	800a2dc <_printf_float+0x154>
 800a2d8:	3301      	adds	r3, #1
 800a2da:	6123      	str	r3, [r4, #16]
 800a2dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0a2      	beq.n	800a22a <_printf_float+0xa2>
 800a2e4:	232d      	movs	r3, #45	@ 0x2d
 800a2e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2ea:	e79e      	b.n	800a22a <_printf_float+0xa2>
 800a2ec:	9a06      	ldr	r2, [sp, #24]
 800a2ee:	2a47      	cmp	r2, #71	@ 0x47
 800a2f0:	d1c2      	bne.n	800a278 <_printf_float+0xf0>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1c0      	bne.n	800a278 <_printf_float+0xf0>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e7bd      	b.n	800a276 <_printf_float+0xee>
 800a2fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2fe:	d9db      	bls.n	800a2b8 <_printf_float+0x130>
 800a300:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a304:	d118      	bne.n	800a338 <_printf_float+0x1b0>
 800a306:	2900      	cmp	r1, #0
 800a308:	6863      	ldr	r3, [r4, #4]
 800a30a:	dd0b      	ble.n	800a324 <_printf_float+0x19c>
 800a30c:	6121      	str	r1, [r4, #16]
 800a30e:	b913      	cbnz	r3, 800a316 <_printf_float+0x18e>
 800a310:	6822      	ldr	r2, [r4, #0]
 800a312:	07d0      	lsls	r0, r2, #31
 800a314:	d502      	bpl.n	800a31c <_printf_float+0x194>
 800a316:	3301      	adds	r3, #1
 800a318:	440b      	add	r3, r1
 800a31a:	6123      	str	r3, [r4, #16]
 800a31c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a31e:	f04f 0900 	mov.w	r9, #0
 800a322:	e7db      	b.n	800a2dc <_printf_float+0x154>
 800a324:	b913      	cbnz	r3, 800a32c <_printf_float+0x1a4>
 800a326:	6822      	ldr	r2, [r4, #0]
 800a328:	07d2      	lsls	r2, r2, #31
 800a32a:	d501      	bpl.n	800a330 <_printf_float+0x1a8>
 800a32c:	3302      	adds	r3, #2
 800a32e:	e7f4      	b.n	800a31a <_printf_float+0x192>
 800a330:	2301      	movs	r3, #1
 800a332:	e7f2      	b.n	800a31a <_printf_float+0x192>
 800a334:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a33a:	4299      	cmp	r1, r3
 800a33c:	db05      	blt.n	800a34a <_printf_float+0x1c2>
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	6121      	str	r1, [r4, #16]
 800a342:	07d8      	lsls	r0, r3, #31
 800a344:	d5ea      	bpl.n	800a31c <_printf_float+0x194>
 800a346:	1c4b      	adds	r3, r1, #1
 800a348:	e7e7      	b.n	800a31a <_printf_float+0x192>
 800a34a:	2900      	cmp	r1, #0
 800a34c:	bfd4      	ite	le
 800a34e:	f1c1 0202 	rsble	r2, r1, #2
 800a352:	2201      	movgt	r2, #1
 800a354:	4413      	add	r3, r2
 800a356:	e7e0      	b.n	800a31a <_printf_float+0x192>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	055a      	lsls	r2, r3, #21
 800a35c:	d407      	bmi.n	800a36e <_printf_float+0x1e6>
 800a35e:	6923      	ldr	r3, [r4, #16]
 800a360:	4642      	mov	r2, r8
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	47b8      	blx	r7
 800a368:	3001      	adds	r0, #1
 800a36a:	d12b      	bne.n	800a3c4 <_printf_float+0x23c>
 800a36c:	e767      	b.n	800a23e <_printf_float+0xb6>
 800a36e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a372:	f240 80dd 	bls.w	800a530 <_printf_float+0x3a8>
 800a376:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a37a:	2200      	movs	r2, #0
 800a37c:	2300      	movs	r3, #0
 800a37e:	f7f6 fba3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a382:	2800      	cmp	r0, #0
 800a384:	d033      	beq.n	800a3ee <_printf_float+0x266>
 800a386:	4a37      	ldr	r2, [pc, #220]	@ (800a464 <_printf_float+0x2dc>)
 800a388:	2301      	movs	r3, #1
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b8      	blx	r7
 800a390:	3001      	adds	r0, #1
 800a392:	f43f af54 	beq.w	800a23e <_printf_float+0xb6>
 800a396:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a39a:	4543      	cmp	r3, r8
 800a39c:	db02      	blt.n	800a3a4 <_printf_float+0x21c>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	07d8      	lsls	r0, r3, #31
 800a3a2:	d50f      	bpl.n	800a3c4 <_printf_float+0x23c>
 800a3a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	47b8      	blx	r7
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	f43f af45 	beq.w	800a23e <_printf_float+0xb6>
 800a3b4:	f04f 0900 	mov.w	r9, #0
 800a3b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3bc:	f104 0a1a 	add.w	sl, r4, #26
 800a3c0:	45c8      	cmp	r8, r9
 800a3c2:	dc09      	bgt.n	800a3d8 <_printf_float+0x250>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	079b      	lsls	r3, r3, #30
 800a3c8:	f100 8103 	bmi.w	800a5d2 <_printf_float+0x44a>
 800a3cc:	68e0      	ldr	r0, [r4, #12]
 800a3ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3d0:	4298      	cmp	r0, r3
 800a3d2:	bfb8      	it	lt
 800a3d4:	4618      	movlt	r0, r3
 800a3d6:	e734      	b.n	800a242 <_printf_float+0xba>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	4652      	mov	r2, sl
 800a3dc:	4631      	mov	r1, r6
 800a3de:	4628      	mov	r0, r5
 800a3e0:	47b8      	blx	r7
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	f43f af2b 	beq.w	800a23e <_printf_float+0xb6>
 800a3e8:	f109 0901 	add.w	r9, r9, #1
 800a3ec:	e7e8      	b.n	800a3c0 <_printf_float+0x238>
 800a3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	dc39      	bgt.n	800a468 <_printf_float+0x2e0>
 800a3f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a464 <_printf_float+0x2dc>)
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	47b8      	blx	r7
 800a3fe:	3001      	adds	r0, #1
 800a400:	f43f af1d 	beq.w	800a23e <_printf_float+0xb6>
 800a404:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a408:	ea59 0303 	orrs.w	r3, r9, r3
 800a40c:	d102      	bne.n	800a414 <_printf_float+0x28c>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	07d9      	lsls	r1, r3, #31
 800a412:	d5d7      	bpl.n	800a3c4 <_printf_float+0x23c>
 800a414:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a418:	4631      	mov	r1, r6
 800a41a:	4628      	mov	r0, r5
 800a41c:	47b8      	blx	r7
 800a41e:	3001      	adds	r0, #1
 800a420:	f43f af0d 	beq.w	800a23e <_printf_float+0xb6>
 800a424:	f04f 0a00 	mov.w	sl, #0
 800a428:	f104 0b1a 	add.w	fp, r4, #26
 800a42c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a42e:	425b      	negs	r3, r3
 800a430:	4553      	cmp	r3, sl
 800a432:	dc01      	bgt.n	800a438 <_printf_float+0x2b0>
 800a434:	464b      	mov	r3, r9
 800a436:	e793      	b.n	800a360 <_printf_float+0x1d8>
 800a438:	2301      	movs	r3, #1
 800a43a:	465a      	mov	r2, fp
 800a43c:	4631      	mov	r1, r6
 800a43e:	4628      	mov	r0, r5
 800a440:	47b8      	blx	r7
 800a442:	3001      	adds	r0, #1
 800a444:	f43f aefb 	beq.w	800a23e <_printf_float+0xb6>
 800a448:	f10a 0a01 	add.w	sl, sl, #1
 800a44c:	e7ee      	b.n	800a42c <_printf_float+0x2a4>
 800a44e:	bf00      	nop
 800a450:	7fefffff 	.word	0x7fefffff
 800a454:	0800e99c 	.word	0x0800e99c
 800a458:	0800e9a0 	.word	0x0800e9a0
 800a45c:	0800e9a4 	.word	0x0800e9a4
 800a460:	0800e9a8 	.word	0x0800e9a8
 800a464:	0800e9ac 	.word	0x0800e9ac
 800a468:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a46a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a46e:	4553      	cmp	r3, sl
 800a470:	bfa8      	it	ge
 800a472:	4653      	movge	r3, sl
 800a474:	2b00      	cmp	r3, #0
 800a476:	4699      	mov	r9, r3
 800a478:	dc36      	bgt.n	800a4e8 <_printf_float+0x360>
 800a47a:	f04f 0b00 	mov.w	fp, #0
 800a47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a482:	f104 021a 	add.w	r2, r4, #26
 800a486:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a488:	9306      	str	r3, [sp, #24]
 800a48a:	eba3 0309 	sub.w	r3, r3, r9
 800a48e:	455b      	cmp	r3, fp
 800a490:	dc31      	bgt.n	800a4f6 <_printf_float+0x36e>
 800a492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a494:	459a      	cmp	sl, r3
 800a496:	dc3a      	bgt.n	800a50e <_printf_float+0x386>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	07da      	lsls	r2, r3, #31
 800a49c:	d437      	bmi.n	800a50e <_printf_float+0x386>
 800a49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4a0:	ebaa 0903 	sub.w	r9, sl, r3
 800a4a4:	9b06      	ldr	r3, [sp, #24]
 800a4a6:	ebaa 0303 	sub.w	r3, sl, r3
 800a4aa:	4599      	cmp	r9, r3
 800a4ac:	bfa8      	it	ge
 800a4ae:	4699      	movge	r9, r3
 800a4b0:	f1b9 0f00 	cmp.w	r9, #0
 800a4b4:	dc33      	bgt.n	800a51e <_printf_float+0x396>
 800a4b6:	f04f 0800 	mov.w	r8, #0
 800a4ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4be:	f104 0b1a 	add.w	fp, r4, #26
 800a4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a4c8:	eba3 0309 	sub.w	r3, r3, r9
 800a4cc:	4543      	cmp	r3, r8
 800a4ce:	f77f af79 	ble.w	800a3c4 <_printf_float+0x23c>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	465a      	mov	r2, fp
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	4628      	mov	r0, r5
 800a4da:	47b8      	blx	r7
 800a4dc:	3001      	adds	r0, #1
 800a4de:	f43f aeae 	beq.w	800a23e <_printf_float+0xb6>
 800a4e2:	f108 0801 	add.w	r8, r8, #1
 800a4e6:	e7ec      	b.n	800a4c2 <_printf_float+0x33a>
 800a4e8:	4642      	mov	r2, r8
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	47b8      	blx	r7
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	d1c2      	bne.n	800a47a <_printf_float+0x2f2>
 800a4f4:	e6a3      	b.n	800a23e <_printf_float+0xb6>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	4631      	mov	r1, r6
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	9206      	str	r2, [sp, #24]
 800a4fe:	47b8      	blx	r7
 800a500:	3001      	adds	r0, #1
 800a502:	f43f ae9c 	beq.w	800a23e <_printf_float+0xb6>
 800a506:	9a06      	ldr	r2, [sp, #24]
 800a508:	f10b 0b01 	add.w	fp, fp, #1
 800a50c:	e7bb      	b.n	800a486 <_printf_float+0x2fe>
 800a50e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a512:	4631      	mov	r1, r6
 800a514:	4628      	mov	r0, r5
 800a516:	47b8      	blx	r7
 800a518:	3001      	adds	r0, #1
 800a51a:	d1c0      	bne.n	800a49e <_printf_float+0x316>
 800a51c:	e68f      	b.n	800a23e <_printf_float+0xb6>
 800a51e:	9a06      	ldr	r2, [sp, #24]
 800a520:	464b      	mov	r3, r9
 800a522:	4442      	add	r2, r8
 800a524:	4631      	mov	r1, r6
 800a526:	4628      	mov	r0, r5
 800a528:	47b8      	blx	r7
 800a52a:	3001      	adds	r0, #1
 800a52c:	d1c3      	bne.n	800a4b6 <_printf_float+0x32e>
 800a52e:	e686      	b.n	800a23e <_printf_float+0xb6>
 800a530:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a534:	f1ba 0f01 	cmp.w	sl, #1
 800a538:	dc01      	bgt.n	800a53e <_printf_float+0x3b6>
 800a53a:	07db      	lsls	r3, r3, #31
 800a53c:	d536      	bpl.n	800a5ac <_printf_float+0x424>
 800a53e:	2301      	movs	r3, #1
 800a540:	4642      	mov	r2, r8
 800a542:	4631      	mov	r1, r6
 800a544:	4628      	mov	r0, r5
 800a546:	47b8      	blx	r7
 800a548:	3001      	adds	r0, #1
 800a54a:	f43f ae78 	beq.w	800a23e <_printf_float+0xb6>
 800a54e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a552:	4631      	mov	r1, r6
 800a554:	4628      	mov	r0, r5
 800a556:	47b8      	blx	r7
 800a558:	3001      	adds	r0, #1
 800a55a:	f43f ae70 	beq.w	800a23e <_printf_float+0xb6>
 800a55e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a562:	2200      	movs	r2, #0
 800a564:	2300      	movs	r3, #0
 800a566:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a56a:	f7f6 faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a56e:	b9c0      	cbnz	r0, 800a5a2 <_printf_float+0x41a>
 800a570:	4653      	mov	r3, sl
 800a572:	f108 0201 	add.w	r2, r8, #1
 800a576:	4631      	mov	r1, r6
 800a578:	4628      	mov	r0, r5
 800a57a:	47b8      	blx	r7
 800a57c:	3001      	adds	r0, #1
 800a57e:	d10c      	bne.n	800a59a <_printf_float+0x412>
 800a580:	e65d      	b.n	800a23e <_printf_float+0xb6>
 800a582:	2301      	movs	r3, #1
 800a584:	465a      	mov	r2, fp
 800a586:	4631      	mov	r1, r6
 800a588:	4628      	mov	r0, r5
 800a58a:	47b8      	blx	r7
 800a58c:	3001      	adds	r0, #1
 800a58e:	f43f ae56 	beq.w	800a23e <_printf_float+0xb6>
 800a592:	f108 0801 	add.w	r8, r8, #1
 800a596:	45d0      	cmp	r8, sl
 800a598:	dbf3      	blt.n	800a582 <_printf_float+0x3fa>
 800a59a:	464b      	mov	r3, r9
 800a59c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a5a0:	e6df      	b.n	800a362 <_printf_float+0x1da>
 800a5a2:	f04f 0800 	mov.w	r8, #0
 800a5a6:	f104 0b1a 	add.w	fp, r4, #26
 800a5aa:	e7f4      	b.n	800a596 <_printf_float+0x40e>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	4642      	mov	r2, r8
 800a5b0:	e7e1      	b.n	800a576 <_printf_float+0x3ee>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	464a      	mov	r2, r9
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b8      	blx	r7
 800a5bc:	3001      	adds	r0, #1
 800a5be:	f43f ae3e 	beq.w	800a23e <_printf_float+0xb6>
 800a5c2:	f108 0801 	add.w	r8, r8, #1
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a5ca:	1a5b      	subs	r3, r3, r1
 800a5cc:	4543      	cmp	r3, r8
 800a5ce:	dcf0      	bgt.n	800a5b2 <_printf_float+0x42a>
 800a5d0:	e6fc      	b.n	800a3cc <_printf_float+0x244>
 800a5d2:	f04f 0800 	mov.w	r8, #0
 800a5d6:	f104 0919 	add.w	r9, r4, #25
 800a5da:	e7f4      	b.n	800a5c6 <_printf_float+0x43e>

0800a5dc <_printf_common>:
 800a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	4616      	mov	r6, r2
 800a5e2:	4698      	mov	r8, r3
 800a5e4:	688a      	ldr	r2, [r1, #8]
 800a5e6:	690b      	ldr	r3, [r1, #16]
 800a5e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	bfb8      	it	lt
 800a5f0:	4613      	movlt	r3, r2
 800a5f2:	6033      	str	r3, [r6, #0]
 800a5f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	b10a      	cbz	r2, 800a602 <_printf_common+0x26>
 800a5fe:	3301      	adds	r3, #1
 800a600:	6033      	str	r3, [r6, #0]
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	0699      	lsls	r1, r3, #26
 800a606:	bf42      	ittt	mi
 800a608:	6833      	ldrmi	r3, [r6, #0]
 800a60a:	3302      	addmi	r3, #2
 800a60c:	6033      	strmi	r3, [r6, #0]
 800a60e:	6825      	ldr	r5, [r4, #0]
 800a610:	f015 0506 	ands.w	r5, r5, #6
 800a614:	d106      	bne.n	800a624 <_printf_common+0x48>
 800a616:	f104 0a19 	add.w	sl, r4, #25
 800a61a:	68e3      	ldr	r3, [r4, #12]
 800a61c:	6832      	ldr	r2, [r6, #0]
 800a61e:	1a9b      	subs	r3, r3, r2
 800a620:	42ab      	cmp	r3, r5
 800a622:	dc26      	bgt.n	800a672 <_printf_common+0x96>
 800a624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a628:	6822      	ldr	r2, [r4, #0]
 800a62a:	3b00      	subs	r3, #0
 800a62c:	bf18      	it	ne
 800a62e:	2301      	movne	r3, #1
 800a630:	0692      	lsls	r2, r2, #26
 800a632:	d42b      	bmi.n	800a68c <_printf_common+0xb0>
 800a634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a638:	4641      	mov	r1, r8
 800a63a:	4638      	mov	r0, r7
 800a63c:	47c8      	blx	r9
 800a63e:	3001      	adds	r0, #1
 800a640:	d01e      	beq.n	800a680 <_printf_common+0xa4>
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	6922      	ldr	r2, [r4, #16]
 800a646:	f003 0306 	and.w	r3, r3, #6
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	bf02      	ittt	eq
 800a64e:	68e5      	ldreq	r5, [r4, #12]
 800a650:	6833      	ldreq	r3, [r6, #0]
 800a652:	1aed      	subeq	r5, r5, r3
 800a654:	68a3      	ldr	r3, [r4, #8]
 800a656:	bf0c      	ite	eq
 800a658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a65c:	2500      	movne	r5, #0
 800a65e:	4293      	cmp	r3, r2
 800a660:	bfc4      	itt	gt
 800a662:	1a9b      	subgt	r3, r3, r2
 800a664:	18ed      	addgt	r5, r5, r3
 800a666:	2600      	movs	r6, #0
 800a668:	341a      	adds	r4, #26
 800a66a:	42b5      	cmp	r5, r6
 800a66c:	d11a      	bne.n	800a6a4 <_printf_common+0xc8>
 800a66e:	2000      	movs	r0, #0
 800a670:	e008      	b.n	800a684 <_printf_common+0xa8>
 800a672:	2301      	movs	r3, #1
 800a674:	4652      	mov	r2, sl
 800a676:	4641      	mov	r1, r8
 800a678:	4638      	mov	r0, r7
 800a67a:	47c8      	blx	r9
 800a67c:	3001      	adds	r0, #1
 800a67e:	d103      	bne.n	800a688 <_printf_common+0xac>
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a688:	3501      	adds	r5, #1
 800a68a:	e7c6      	b.n	800a61a <_printf_common+0x3e>
 800a68c:	18e1      	adds	r1, r4, r3
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	2030      	movs	r0, #48	@ 0x30
 800a692:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a696:	4422      	add	r2, r4
 800a698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a69c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a6a0:	3302      	adds	r3, #2
 800a6a2:	e7c7      	b.n	800a634 <_printf_common+0x58>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	4638      	mov	r0, r7
 800a6ac:	47c8      	blx	r9
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d0e6      	beq.n	800a680 <_printf_common+0xa4>
 800a6b2:	3601      	adds	r6, #1
 800a6b4:	e7d9      	b.n	800a66a <_printf_common+0x8e>
	...

0800a6b8 <_printf_i>:
 800a6b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	7e0f      	ldrb	r7, [r1, #24]
 800a6be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6c0:	2f78      	cmp	r7, #120	@ 0x78
 800a6c2:	4691      	mov	r9, r2
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	469a      	mov	sl, r3
 800a6ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6ce:	d807      	bhi.n	800a6e0 <_printf_i+0x28>
 800a6d0:	2f62      	cmp	r7, #98	@ 0x62
 800a6d2:	d80a      	bhi.n	800a6ea <_printf_i+0x32>
 800a6d4:	2f00      	cmp	r7, #0
 800a6d6:	f000 80d2 	beq.w	800a87e <_printf_i+0x1c6>
 800a6da:	2f58      	cmp	r7, #88	@ 0x58
 800a6dc:	f000 80b9 	beq.w	800a852 <_printf_i+0x19a>
 800a6e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6e8:	e03a      	b.n	800a760 <_printf_i+0xa8>
 800a6ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6ee:	2b15      	cmp	r3, #21
 800a6f0:	d8f6      	bhi.n	800a6e0 <_printf_i+0x28>
 800a6f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a6f8 <_printf_i+0x40>)
 800a6f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6f8:	0800a751 	.word	0x0800a751
 800a6fc:	0800a765 	.word	0x0800a765
 800a700:	0800a6e1 	.word	0x0800a6e1
 800a704:	0800a6e1 	.word	0x0800a6e1
 800a708:	0800a6e1 	.word	0x0800a6e1
 800a70c:	0800a6e1 	.word	0x0800a6e1
 800a710:	0800a765 	.word	0x0800a765
 800a714:	0800a6e1 	.word	0x0800a6e1
 800a718:	0800a6e1 	.word	0x0800a6e1
 800a71c:	0800a6e1 	.word	0x0800a6e1
 800a720:	0800a6e1 	.word	0x0800a6e1
 800a724:	0800a865 	.word	0x0800a865
 800a728:	0800a78f 	.word	0x0800a78f
 800a72c:	0800a81f 	.word	0x0800a81f
 800a730:	0800a6e1 	.word	0x0800a6e1
 800a734:	0800a6e1 	.word	0x0800a6e1
 800a738:	0800a887 	.word	0x0800a887
 800a73c:	0800a6e1 	.word	0x0800a6e1
 800a740:	0800a78f 	.word	0x0800a78f
 800a744:	0800a6e1 	.word	0x0800a6e1
 800a748:	0800a6e1 	.word	0x0800a6e1
 800a74c:	0800a827 	.word	0x0800a827
 800a750:	6833      	ldr	r3, [r6, #0]
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6032      	str	r2, [r6, #0]
 800a758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a75c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a760:	2301      	movs	r3, #1
 800a762:	e09d      	b.n	800a8a0 <_printf_i+0x1e8>
 800a764:	6833      	ldr	r3, [r6, #0]
 800a766:	6820      	ldr	r0, [r4, #0]
 800a768:	1d19      	adds	r1, r3, #4
 800a76a:	6031      	str	r1, [r6, #0]
 800a76c:	0606      	lsls	r6, r0, #24
 800a76e:	d501      	bpl.n	800a774 <_printf_i+0xbc>
 800a770:	681d      	ldr	r5, [r3, #0]
 800a772:	e003      	b.n	800a77c <_printf_i+0xc4>
 800a774:	0645      	lsls	r5, r0, #25
 800a776:	d5fb      	bpl.n	800a770 <_printf_i+0xb8>
 800a778:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	da03      	bge.n	800a788 <_printf_i+0xd0>
 800a780:	232d      	movs	r3, #45	@ 0x2d
 800a782:	426d      	negs	r5, r5
 800a784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a788:	4859      	ldr	r0, [pc, #356]	@ (800a8f0 <_printf_i+0x238>)
 800a78a:	230a      	movs	r3, #10
 800a78c:	e011      	b.n	800a7b2 <_printf_i+0xfa>
 800a78e:	6821      	ldr	r1, [r4, #0]
 800a790:	6833      	ldr	r3, [r6, #0]
 800a792:	0608      	lsls	r0, r1, #24
 800a794:	f853 5b04 	ldr.w	r5, [r3], #4
 800a798:	d402      	bmi.n	800a7a0 <_printf_i+0xe8>
 800a79a:	0649      	lsls	r1, r1, #25
 800a79c:	bf48      	it	mi
 800a79e:	b2ad      	uxthmi	r5, r5
 800a7a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a7a2:	4853      	ldr	r0, [pc, #332]	@ (800a8f0 <_printf_i+0x238>)
 800a7a4:	6033      	str	r3, [r6, #0]
 800a7a6:	bf14      	ite	ne
 800a7a8:	230a      	movne	r3, #10
 800a7aa:	2308      	moveq	r3, #8
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7b2:	6866      	ldr	r6, [r4, #4]
 800a7b4:	60a6      	str	r6, [r4, #8]
 800a7b6:	2e00      	cmp	r6, #0
 800a7b8:	bfa2      	ittt	ge
 800a7ba:	6821      	ldrge	r1, [r4, #0]
 800a7bc:	f021 0104 	bicge.w	r1, r1, #4
 800a7c0:	6021      	strge	r1, [r4, #0]
 800a7c2:	b90d      	cbnz	r5, 800a7c8 <_printf_i+0x110>
 800a7c4:	2e00      	cmp	r6, #0
 800a7c6:	d04b      	beq.n	800a860 <_printf_i+0x1a8>
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7ce:	fb03 5711 	mls	r7, r3, r1, r5
 800a7d2:	5dc7      	ldrb	r7, [r0, r7]
 800a7d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7d8:	462f      	mov	r7, r5
 800a7da:	42bb      	cmp	r3, r7
 800a7dc:	460d      	mov	r5, r1
 800a7de:	d9f4      	bls.n	800a7ca <_printf_i+0x112>
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d10b      	bne.n	800a7fc <_printf_i+0x144>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	07df      	lsls	r7, r3, #31
 800a7e8:	d508      	bpl.n	800a7fc <_printf_i+0x144>
 800a7ea:	6923      	ldr	r3, [r4, #16]
 800a7ec:	6861      	ldr	r1, [r4, #4]
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	bfde      	ittt	le
 800a7f2:	2330      	movle	r3, #48	@ 0x30
 800a7f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7fc:	1b92      	subs	r2, r2, r6
 800a7fe:	6122      	str	r2, [r4, #16]
 800a800:	f8cd a000 	str.w	sl, [sp]
 800a804:	464b      	mov	r3, r9
 800a806:	aa03      	add	r2, sp, #12
 800a808:	4621      	mov	r1, r4
 800a80a:	4640      	mov	r0, r8
 800a80c:	f7ff fee6 	bl	800a5dc <_printf_common>
 800a810:	3001      	adds	r0, #1
 800a812:	d14a      	bne.n	800a8aa <_printf_i+0x1f2>
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	b004      	add	sp, #16
 800a81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	f043 0320 	orr.w	r3, r3, #32
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	4833      	ldr	r0, [pc, #204]	@ (800a8f4 <_printf_i+0x23c>)
 800a828:	2778      	movs	r7, #120	@ 0x78
 800a82a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	6831      	ldr	r1, [r6, #0]
 800a832:	061f      	lsls	r7, r3, #24
 800a834:	f851 5b04 	ldr.w	r5, [r1], #4
 800a838:	d402      	bmi.n	800a840 <_printf_i+0x188>
 800a83a:	065f      	lsls	r7, r3, #25
 800a83c:	bf48      	it	mi
 800a83e:	b2ad      	uxthmi	r5, r5
 800a840:	6031      	str	r1, [r6, #0]
 800a842:	07d9      	lsls	r1, r3, #31
 800a844:	bf44      	itt	mi
 800a846:	f043 0320 	orrmi.w	r3, r3, #32
 800a84a:	6023      	strmi	r3, [r4, #0]
 800a84c:	b11d      	cbz	r5, 800a856 <_printf_i+0x19e>
 800a84e:	2310      	movs	r3, #16
 800a850:	e7ac      	b.n	800a7ac <_printf_i+0xf4>
 800a852:	4827      	ldr	r0, [pc, #156]	@ (800a8f0 <_printf_i+0x238>)
 800a854:	e7e9      	b.n	800a82a <_printf_i+0x172>
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	f023 0320 	bic.w	r3, r3, #32
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	e7f6      	b.n	800a84e <_printf_i+0x196>
 800a860:	4616      	mov	r6, r2
 800a862:	e7bd      	b.n	800a7e0 <_printf_i+0x128>
 800a864:	6833      	ldr	r3, [r6, #0]
 800a866:	6825      	ldr	r5, [r4, #0]
 800a868:	6961      	ldr	r1, [r4, #20]
 800a86a:	1d18      	adds	r0, r3, #4
 800a86c:	6030      	str	r0, [r6, #0]
 800a86e:	062e      	lsls	r6, r5, #24
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	d501      	bpl.n	800a878 <_printf_i+0x1c0>
 800a874:	6019      	str	r1, [r3, #0]
 800a876:	e002      	b.n	800a87e <_printf_i+0x1c6>
 800a878:	0668      	lsls	r0, r5, #25
 800a87a:	d5fb      	bpl.n	800a874 <_printf_i+0x1bc>
 800a87c:	8019      	strh	r1, [r3, #0]
 800a87e:	2300      	movs	r3, #0
 800a880:	6123      	str	r3, [r4, #16]
 800a882:	4616      	mov	r6, r2
 800a884:	e7bc      	b.n	800a800 <_printf_i+0x148>
 800a886:	6833      	ldr	r3, [r6, #0]
 800a888:	1d1a      	adds	r2, r3, #4
 800a88a:	6032      	str	r2, [r6, #0]
 800a88c:	681e      	ldr	r6, [r3, #0]
 800a88e:	6862      	ldr	r2, [r4, #4]
 800a890:	2100      	movs	r1, #0
 800a892:	4630      	mov	r0, r6
 800a894:	f7f5 fc9c 	bl	80001d0 <memchr>
 800a898:	b108      	cbz	r0, 800a89e <_printf_i+0x1e6>
 800a89a:	1b80      	subs	r0, r0, r6
 800a89c:	6060      	str	r0, [r4, #4]
 800a89e:	6863      	ldr	r3, [r4, #4]
 800a8a0:	6123      	str	r3, [r4, #16]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8a8:	e7aa      	b.n	800a800 <_printf_i+0x148>
 800a8aa:	6923      	ldr	r3, [r4, #16]
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	47d0      	blx	sl
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d0ad      	beq.n	800a814 <_printf_i+0x15c>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	079b      	lsls	r3, r3, #30
 800a8bc:	d413      	bmi.n	800a8e6 <_printf_i+0x22e>
 800a8be:	68e0      	ldr	r0, [r4, #12]
 800a8c0:	9b03      	ldr	r3, [sp, #12]
 800a8c2:	4298      	cmp	r0, r3
 800a8c4:	bfb8      	it	lt
 800a8c6:	4618      	movlt	r0, r3
 800a8c8:	e7a6      	b.n	800a818 <_printf_i+0x160>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	47d0      	blx	sl
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d09d      	beq.n	800a814 <_printf_i+0x15c>
 800a8d8:	3501      	adds	r5, #1
 800a8da:	68e3      	ldr	r3, [r4, #12]
 800a8dc:	9903      	ldr	r1, [sp, #12]
 800a8de:	1a5b      	subs	r3, r3, r1
 800a8e0:	42ab      	cmp	r3, r5
 800a8e2:	dcf2      	bgt.n	800a8ca <_printf_i+0x212>
 800a8e4:	e7eb      	b.n	800a8be <_printf_i+0x206>
 800a8e6:	2500      	movs	r5, #0
 800a8e8:	f104 0619 	add.w	r6, r4, #25
 800a8ec:	e7f5      	b.n	800a8da <_printf_i+0x222>
 800a8ee:	bf00      	nop
 800a8f0:	0800e9ae 	.word	0x0800e9ae
 800a8f4:	0800e9bf 	.word	0x0800e9bf

0800a8f8 <_scanf_float>:
 800a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	b087      	sub	sp, #28
 800a8fe:	4617      	mov	r7, r2
 800a900:	9303      	str	r3, [sp, #12]
 800a902:	688b      	ldr	r3, [r1, #8]
 800a904:	1e5a      	subs	r2, r3, #1
 800a906:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a90a:	bf81      	itttt	hi
 800a90c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a910:	eb03 0b05 	addhi.w	fp, r3, r5
 800a914:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a918:	608b      	strhi	r3, [r1, #8]
 800a91a:	680b      	ldr	r3, [r1, #0]
 800a91c:	460a      	mov	r2, r1
 800a91e:	f04f 0500 	mov.w	r5, #0
 800a922:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a926:	f842 3b1c 	str.w	r3, [r2], #28
 800a92a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a92e:	4680      	mov	r8, r0
 800a930:	460c      	mov	r4, r1
 800a932:	bf98      	it	ls
 800a934:	f04f 0b00 	movls.w	fp, #0
 800a938:	9201      	str	r2, [sp, #4]
 800a93a:	4616      	mov	r6, r2
 800a93c:	46aa      	mov	sl, r5
 800a93e:	46a9      	mov	r9, r5
 800a940:	9502      	str	r5, [sp, #8]
 800a942:	68a2      	ldr	r2, [r4, #8]
 800a944:	b152      	cbz	r2, 800a95c <_scanf_float+0x64>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a94c:	d864      	bhi.n	800aa18 <_scanf_float+0x120>
 800a94e:	2b40      	cmp	r3, #64	@ 0x40
 800a950:	d83c      	bhi.n	800a9cc <_scanf_float+0xd4>
 800a952:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a956:	b2c8      	uxtb	r0, r1
 800a958:	280e      	cmp	r0, #14
 800a95a:	d93a      	bls.n	800a9d2 <_scanf_float+0xda>
 800a95c:	f1b9 0f00 	cmp.w	r9, #0
 800a960:	d003      	beq.n	800a96a <_scanf_float+0x72>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a96e:	f1ba 0f01 	cmp.w	sl, #1
 800a972:	f200 8117 	bhi.w	800aba4 <_scanf_float+0x2ac>
 800a976:	9b01      	ldr	r3, [sp, #4]
 800a978:	429e      	cmp	r6, r3
 800a97a:	f200 8108 	bhi.w	800ab8e <_scanf_float+0x296>
 800a97e:	2001      	movs	r0, #1
 800a980:	b007      	add	sp, #28
 800a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a986:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a98a:	2a0d      	cmp	r2, #13
 800a98c:	d8e6      	bhi.n	800a95c <_scanf_float+0x64>
 800a98e:	a101      	add	r1, pc, #4	@ (adr r1, 800a994 <_scanf_float+0x9c>)
 800a990:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a994:	0800aadb 	.word	0x0800aadb
 800a998:	0800a95d 	.word	0x0800a95d
 800a99c:	0800a95d 	.word	0x0800a95d
 800a9a0:	0800a95d 	.word	0x0800a95d
 800a9a4:	0800ab3b 	.word	0x0800ab3b
 800a9a8:	0800ab13 	.word	0x0800ab13
 800a9ac:	0800a95d 	.word	0x0800a95d
 800a9b0:	0800a95d 	.word	0x0800a95d
 800a9b4:	0800aae9 	.word	0x0800aae9
 800a9b8:	0800a95d 	.word	0x0800a95d
 800a9bc:	0800a95d 	.word	0x0800a95d
 800a9c0:	0800a95d 	.word	0x0800a95d
 800a9c4:	0800a95d 	.word	0x0800a95d
 800a9c8:	0800aaa1 	.word	0x0800aaa1
 800a9cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a9d0:	e7db      	b.n	800a98a <_scanf_float+0x92>
 800a9d2:	290e      	cmp	r1, #14
 800a9d4:	d8c2      	bhi.n	800a95c <_scanf_float+0x64>
 800a9d6:	a001      	add	r0, pc, #4	@ (adr r0, 800a9dc <_scanf_float+0xe4>)
 800a9d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a9dc:	0800aa91 	.word	0x0800aa91
 800a9e0:	0800a95d 	.word	0x0800a95d
 800a9e4:	0800aa91 	.word	0x0800aa91
 800a9e8:	0800ab27 	.word	0x0800ab27
 800a9ec:	0800a95d 	.word	0x0800a95d
 800a9f0:	0800aa39 	.word	0x0800aa39
 800a9f4:	0800aa77 	.word	0x0800aa77
 800a9f8:	0800aa77 	.word	0x0800aa77
 800a9fc:	0800aa77 	.word	0x0800aa77
 800aa00:	0800aa77 	.word	0x0800aa77
 800aa04:	0800aa77 	.word	0x0800aa77
 800aa08:	0800aa77 	.word	0x0800aa77
 800aa0c:	0800aa77 	.word	0x0800aa77
 800aa10:	0800aa77 	.word	0x0800aa77
 800aa14:	0800aa77 	.word	0x0800aa77
 800aa18:	2b6e      	cmp	r3, #110	@ 0x6e
 800aa1a:	d809      	bhi.n	800aa30 <_scanf_float+0x138>
 800aa1c:	2b60      	cmp	r3, #96	@ 0x60
 800aa1e:	d8b2      	bhi.n	800a986 <_scanf_float+0x8e>
 800aa20:	2b54      	cmp	r3, #84	@ 0x54
 800aa22:	d07b      	beq.n	800ab1c <_scanf_float+0x224>
 800aa24:	2b59      	cmp	r3, #89	@ 0x59
 800aa26:	d199      	bne.n	800a95c <_scanf_float+0x64>
 800aa28:	2d07      	cmp	r5, #7
 800aa2a:	d197      	bne.n	800a95c <_scanf_float+0x64>
 800aa2c:	2508      	movs	r5, #8
 800aa2e:	e02c      	b.n	800aa8a <_scanf_float+0x192>
 800aa30:	2b74      	cmp	r3, #116	@ 0x74
 800aa32:	d073      	beq.n	800ab1c <_scanf_float+0x224>
 800aa34:	2b79      	cmp	r3, #121	@ 0x79
 800aa36:	e7f6      	b.n	800aa26 <_scanf_float+0x12e>
 800aa38:	6821      	ldr	r1, [r4, #0]
 800aa3a:	05c8      	lsls	r0, r1, #23
 800aa3c:	d51b      	bpl.n	800aa76 <_scanf_float+0x17e>
 800aa3e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800aa42:	6021      	str	r1, [r4, #0]
 800aa44:	f109 0901 	add.w	r9, r9, #1
 800aa48:	f1bb 0f00 	cmp.w	fp, #0
 800aa4c:	d003      	beq.n	800aa56 <_scanf_float+0x15e>
 800aa4e:	3201      	adds	r2, #1
 800aa50:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa54:	60a2      	str	r2, [r4, #8]
 800aa56:	68a3      	ldr	r3, [r4, #8]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	60a3      	str	r3, [r4, #8]
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	6123      	str	r3, [r4, #16]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	3b01      	subs	r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	607b      	str	r3, [r7, #4]
 800aa6a:	f340 8087 	ble.w	800ab7c <_scanf_float+0x284>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	3301      	adds	r3, #1
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	e765      	b.n	800a942 <_scanf_float+0x4a>
 800aa76:	eb1a 0105 	adds.w	r1, sl, r5
 800aa7a:	f47f af6f 	bne.w	800a95c <_scanf_float+0x64>
 800aa7e:	6822      	ldr	r2, [r4, #0]
 800aa80:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800aa84:	6022      	str	r2, [r4, #0]
 800aa86:	460d      	mov	r5, r1
 800aa88:	468a      	mov	sl, r1
 800aa8a:	f806 3b01 	strb.w	r3, [r6], #1
 800aa8e:	e7e2      	b.n	800aa56 <_scanf_float+0x15e>
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	0610      	lsls	r0, r2, #24
 800aa94:	f57f af62 	bpl.w	800a95c <_scanf_float+0x64>
 800aa98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aa9c:	6022      	str	r2, [r4, #0]
 800aa9e:	e7f4      	b.n	800aa8a <_scanf_float+0x192>
 800aaa0:	f1ba 0f00 	cmp.w	sl, #0
 800aaa4:	d10e      	bne.n	800aac4 <_scanf_float+0x1cc>
 800aaa6:	f1b9 0f00 	cmp.w	r9, #0
 800aaaa:	d10e      	bne.n	800aaca <_scanf_float+0x1d2>
 800aaac:	6822      	ldr	r2, [r4, #0]
 800aaae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aab2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aab6:	d108      	bne.n	800aaca <_scanf_float+0x1d2>
 800aab8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aabc:	6022      	str	r2, [r4, #0]
 800aabe:	f04f 0a01 	mov.w	sl, #1
 800aac2:	e7e2      	b.n	800aa8a <_scanf_float+0x192>
 800aac4:	f1ba 0f02 	cmp.w	sl, #2
 800aac8:	d055      	beq.n	800ab76 <_scanf_float+0x27e>
 800aaca:	2d01      	cmp	r5, #1
 800aacc:	d002      	beq.n	800aad4 <_scanf_float+0x1dc>
 800aace:	2d04      	cmp	r5, #4
 800aad0:	f47f af44 	bne.w	800a95c <_scanf_float+0x64>
 800aad4:	3501      	adds	r5, #1
 800aad6:	b2ed      	uxtb	r5, r5
 800aad8:	e7d7      	b.n	800aa8a <_scanf_float+0x192>
 800aada:	f1ba 0f01 	cmp.w	sl, #1
 800aade:	f47f af3d 	bne.w	800a95c <_scanf_float+0x64>
 800aae2:	f04f 0a02 	mov.w	sl, #2
 800aae6:	e7d0      	b.n	800aa8a <_scanf_float+0x192>
 800aae8:	b97d      	cbnz	r5, 800ab0a <_scanf_float+0x212>
 800aaea:	f1b9 0f00 	cmp.w	r9, #0
 800aaee:	f47f af38 	bne.w	800a962 <_scanf_float+0x6a>
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aaf8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aafc:	f040 8108 	bne.w	800ad10 <_scanf_float+0x418>
 800ab00:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ab04:	6022      	str	r2, [r4, #0]
 800ab06:	2501      	movs	r5, #1
 800ab08:	e7bf      	b.n	800aa8a <_scanf_float+0x192>
 800ab0a:	2d03      	cmp	r5, #3
 800ab0c:	d0e2      	beq.n	800aad4 <_scanf_float+0x1dc>
 800ab0e:	2d05      	cmp	r5, #5
 800ab10:	e7de      	b.n	800aad0 <_scanf_float+0x1d8>
 800ab12:	2d02      	cmp	r5, #2
 800ab14:	f47f af22 	bne.w	800a95c <_scanf_float+0x64>
 800ab18:	2503      	movs	r5, #3
 800ab1a:	e7b6      	b.n	800aa8a <_scanf_float+0x192>
 800ab1c:	2d06      	cmp	r5, #6
 800ab1e:	f47f af1d 	bne.w	800a95c <_scanf_float+0x64>
 800ab22:	2507      	movs	r5, #7
 800ab24:	e7b1      	b.n	800aa8a <_scanf_float+0x192>
 800ab26:	6822      	ldr	r2, [r4, #0]
 800ab28:	0591      	lsls	r1, r2, #22
 800ab2a:	f57f af17 	bpl.w	800a95c <_scanf_float+0x64>
 800ab2e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ab32:	6022      	str	r2, [r4, #0]
 800ab34:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab38:	e7a7      	b.n	800aa8a <_scanf_float+0x192>
 800ab3a:	6822      	ldr	r2, [r4, #0]
 800ab3c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ab40:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ab44:	d006      	beq.n	800ab54 <_scanf_float+0x25c>
 800ab46:	0550      	lsls	r0, r2, #21
 800ab48:	f57f af08 	bpl.w	800a95c <_scanf_float+0x64>
 800ab4c:	f1b9 0f00 	cmp.w	r9, #0
 800ab50:	f000 80de 	beq.w	800ad10 <_scanf_float+0x418>
 800ab54:	0591      	lsls	r1, r2, #22
 800ab56:	bf58      	it	pl
 800ab58:	9902      	ldrpl	r1, [sp, #8]
 800ab5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ab5e:	bf58      	it	pl
 800ab60:	eba9 0101 	subpl.w	r1, r9, r1
 800ab64:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ab68:	bf58      	it	pl
 800ab6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ab6e:	6022      	str	r2, [r4, #0]
 800ab70:	f04f 0900 	mov.w	r9, #0
 800ab74:	e789      	b.n	800aa8a <_scanf_float+0x192>
 800ab76:	f04f 0a03 	mov.w	sl, #3
 800ab7a:	e786      	b.n	800aa8a <_scanf_float+0x192>
 800ab7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ab80:	4639      	mov	r1, r7
 800ab82:	4640      	mov	r0, r8
 800ab84:	4798      	blx	r3
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f43f aedb 	beq.w	800a942 <_scanf_float+0x4a>
 800ab8c:	e6e6      	b.n	800a95c <_scanf_float+0x64>
 800ab8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab96:	463a      	mov	r2, r7
 800ab98:	4640      	mov	r0, r8
 800ab9a:	4798      	blx	r3
 800ab9c:	6923      	ldr	r3, [r4, #16]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	6123      	str	r3, [r4, #16]
 800aba2:	e6e8      	b.n	800a976 <_scanf_float+0x7e>
 800aba4:	1e6b      	subs	r3, r5, #1
 800aba6:	2b06      	cmp	r3, #6
 800aba8:	d824      	bhi.n	800abf4 <_scanf_float+0x2fc>
 800abaa:	2d02      	cmp	r5, #2
 800abac:	d836      	bhi.n	800ac1c <_scanf_float+0x324>
 800abae:	9b01      	ldr	r3, [sp, #4]
 800abb0:	429e      	cmp	r6, r3
 800abb2:	f67f aee4 	bls.w	800a97e <_scanf_float+0x86>
 800abb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800abba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800abbe:	463a      	mov	r2, r7
 800abc0:	4640      	mov	r0, r8
 800abc2:	4798      	blx	r3
 800abc4:	6923      	ldr	r3, [r4, #16]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	e7f0      	b.n	800abae <_scanf_float+0x2b6>
 800abcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800abd0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800abd4:	463a      	mov	r2, r7
 800abd6:	4640      	mov	r0, r8
 800abd8:	4798      	blx	r3
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	3b01      	subs	r3, #1
 800abde:	6123      	str	r3, [r4, #16]
 800abe0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abe4:	fa5f fa8a 	uxtb.w	sl, sl
 800abe8:	f1ba 0f02 	cmp.w	sl, #2
 800abec:	d1ee      	bne.n	800abcc <_scanf_float+0x2d4>
 800abee:	3d03      	subs	r5, #3
 800abf0:	b2ed      	uxtb	r5, r5
 800abf2:	1b76      	subs	r6, r6, r5
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	05da      	lsls	r2, r3, #23
 800abf8:	d530      	bpl.n	800ac5c <_scanf_float+0x364>
 800abfa:	055b      	lsls	r3, r3, #21
 800abfc:	d511      	bpl.n	800ac22 <_scanf_float+0x32a>
 800abfe:	9b01      	ldr	r3, [sp, #4]
 800ac00:	429e      	cmp	r6, r3
 800ac02:	f67f aebc 	bls.w	800a97e <_scanf_float+0x86>
 800ac06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac0e:	463a      	mov	r2, r7
 800ac10:	4640      	mov	r0, r8
 800ac12:	4798      	blx	r3
 800ac14:	6923      	ldr	r3, [r4, #16]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	6123      	str	r3, [r4, #16]
 800ac1a:	e7f0      	b.n	800abfe <_scanf_float+0x306>
 800ac1c:	46aa      	mov	sl, r5
 800ac1e:	46b3      	mov	fp, r6
 800ac20:	e7de      	b.n	800abe0 <_scanf_float+0x2e8>
 800ac22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ac26:	6923      	ldr	r3, [r4, #16]
 800ac28:	2965      	cmp	r1, #101	@ 0x65
 800ac2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac2e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ac32:	6123      	str	r3, [r4, #16]
 800ac34:	d00c      	beq.n	800ac50 <_scanf_float+0x358>
 800ac36:	2945      	cmp	r1, #69	@ 0x45
 800ac38:	d00a      	beq.n	800ac50 <_scanf_float+0x358>
 800ac3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac3e:	463a      	mov	r2, r7
 800ac40:	4640      	mov	r0, r8
 800ac42:	4798      	blx	r3
 800ac44:	6923      	ldr	r3, [r4, #16]
 800ac46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	1eb5      	subs	r5, r6, #2
 800ac4e:	6123      	str	r3, [r4, #16]
 800ac50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac54:	463a      	mov	r2, r7
 800ac56:	4640      	mov	r0, r8
 800ac58:	4798      	blx	r3
 800ac5a:	462e      	mov	r6, r5
 800ac5c:	6822      	ldr	r2, [r4, #0]
 800ac5e:	f012 0210 	ands.w	r2, r2, #16
 800ac62:	d001      	beq.n	800ac68 <_scanf_float+0x370>
 800ac64:	2000      	movs	r0, #0
 800ac66:	e68b      	b.n	800a980 <_scanf_float+0x88>
 800ac68:	7032      	strb	r2, [r6, #0]
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ac70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac74:	d11c      	bne.n	800acb0 <_scanf_float+0x3b8>
 800ac76:	9b02      	ldr	r3, [sp, #8]
 800ac78:	454b      	cmp	r3, r9
 800ac7a:	eba3 0209 	sub.w	r2, r3, r9
 800ac7e:	d123      	bne.n	800acc8 <_scanf_float+0x3d0>
 800ac80:	9901      	ldr	r1, [sp, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	4640      	mov	r0, r8
 800ac86:	f002 fceb 	bl	800d660 <_strtod_r>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	6821      	ldr	r1, [r4, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f011 0f02 	tst.w	r1, #2
 800ac94:	ec57 6b10 	vmov	r6, r7, d0
 800ac98:	f103 0204 	add.w	r2, r3, #4
 800ac9c:	d01f      	beq.n	800acde <_scanf_float+0x3e6>
 800ac9e:	9903      	ldr	r1, [sp, #12]
 800aca0:	600a      	str	r2, [r1, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	e9c3 6700 	strd	r6, r7, [r3]
 800aca8:	68e3      	ldr	r3, [r4, #12]
 800acaa:	3301      	adds	r3, #1
 800acac:	60e3      	str	r3, [r4, #12]
 800acae:	e7d9      	b.n	800ac64 <_scanf_float+0x36c>
 800acb0:	9b04      	ldr	r3, [sp, #16]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0e4      	beq.n	800ac80 <_scanf_float+0x388>
 800acb6:	9905      	ldr	r1, [sp, #20]
 800acb8:	230a      	movs	r3, #10
 800acba:	3101      	adds	r1, #1
 800acbc:	4640      	mov	r0, r8
 800acbe:	f002 fd4f 	bl	800d760 <_strtol_r>
 800acc2:	9b04      	ldr	r3, [sp, #16]
 800acc4:	9e05      	ldr	r6, [sp, #20]
 800acc6:	1ac2      	subs	r2, r0, r3
 800acc8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800accc:	429e      	cmp	r6, r3
 800acce:	bf28      	it	cs
 800acd0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800acd4:	4910      	ldr	r1, [pc, #64]	@ (800ad18 <_scanf_float+0x420>)
 800acd6:	4630      	mov	r0, r6
 800acd8:	f000 f942 	bl	800af60 <siprintf>
 800acdc:	e7d0      	b.n	800ac80 <_scanf_float+0x388>
 800acde:	f011 0f04 	tst.w	r1, #4
 800ace2:	9903      	ldr	r1, [sp, #12]
 800ace4:	600a      	str	r2, [r1, #0]
 800ace6:	d1dc      	bne.n	800aca2 <_scanf_float+0x3aa>
 800ace8:	681d      	ldr	r5, [r3, #0]
 800acea:	4632      	mov	r2, r6
 800acec:	463b      	mov	r3, r7
 800acee:	4630      	mov	r0, r6
 800acf0:	4639      	mov	r1, r7
 800acf2:	f7f5 ff1b 	bl	8000b2c <__aeabi_dcmpun>
 800acf6:	b128      	cbz	r0, 800ad04 <_scanf_float+0x40c>
 800acf8:	4808      	ldr	r0, [pc, #32]	@ (800ad1c <_scanf_float+0x424>)
 800acfa:	f000 faa9 	bl	800b250 <nanf>
 800acfe:	ed85 0a00 	vstr	s0, [r5]
 800ad02:	e7d1      	b.n	800aca8 <_scanf_float+0x3b0>
 800ad04:	4630      	mov	r0, r6
 800ad06:	4639      	mov	r1, r7
 800ad08:	f7f5 ff6e 	bl	8000be8 <__aeabi_d2f>
 800ad0c:	6028      	str	r0, [r5, #0]
 800ad0e:	e7cb      	b.n	800aca8 <_scanf_float+0x3b0>
 800ad10:	f04f 0900 	mov.w	r9, #0
 800ad14:	e629      	b.n	800a96a <_scanf_float+0x72>
 800ad16:	bf00      	nop
 800ad18:	0800e9d0 	.word	0x0800e9d0
 800ad1c:	0800ed65 	.word	0x0800ed65

0800ad20 <std>:
 800ad20:	2300      	movs	r3, #0
 800ad22:	b510      	push	{r4, lr}
 800ad24:	4604      	mov	r4, r0
 800ad26:	e9c0 3300 	strd	r3, r3, [r0]
 800ad2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad2e:	6083      	str	r3, [r0, #8]
 800ad30:	8181      	strh	r1, [r0, #12]
 800ad32:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad34:	81c2      	strh	r2, [r0, #14]
 800ad36:	6183      	str	r3, [r0, #24]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	2208      	movs	r2, #8
 800ad3c:	305c      	adds	r0, #92	@ 0x5c
 800ad3e:	f000 fa07 	bl	800b150 <memset>
 800ad42:	4b0d      	ldr	r3, [pc, #52]	@ (800ad78 <std+0x58>)
 800ad44:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad46:	4b0d      	ldr	r3, [pc, #52]	@ (800ad7c <std+0x5c>)
 800ad48:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad80 <std+0x60>)
 800ad4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad84 <std+0x64>)
 800ad50:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad52:	4b0d      	ldr	r3, [pc, #52]	@ (800ad88 <std+0x68>)
 800ad54:	6224      	str	r4, [r4, #32]
 800ad56:	429c      	cmp	r4, r3
 800ad58:	d006      	beq.n	800ad68 <std+0x48>
 800ad5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad5e:	4294      	cmp	r4, r2
 800ad60:	d002      	beq.n	800ad68 <std+0x48>
 800ad62:	33d0      	adds	r3, #208	@ 0xd0
 800ad64:	429c      	cmp	r4, r3
 800ad66:	d105      	bne.n	800ad74 <std+0x54>
 800ad68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad70:	f000 ba6a 	b.w	800b248 <__retarget_lock_init_recursive>
 800ad74:	bd10      	pop	{r4, pc}
 800ad76:	bf00      	nop
 800ad78:	0800afa1 	.word	0x0800afa1
 800ad7c:	0800afc3 	.word	0x0800afc3
 800ad80:	0800affb 	.word	0x0800affb
 800ad84:	0800b01f 	.word	0x0800b01f
 800ad88:	20000c08 	.word	0x20000c08

0800ad8c <stdio_exit_handler>:
 800ad8c:	4a02      	ldr	r2, [pc, #8]	@ (800ad98 <stdio_exit_handler+0xc>)
 800ad8e:	4903      	ldr	r1, [pc, #12]	@ (800ad9c <stdio_exit_handler+0x10>)
 800ad90:	4803      	ldr	r0, [pc, #12]	@ (800ada0 <stdio_exit_handler+0x14>)
 800ad92:	f000 b869 	b.w	800ae68 <_fwalk_sglue>
 800ad96:	bf00      	nop
 800ad98:	20000164 	.word	0x20000164
 800ad9c:	0800db1d 	.word	0x0800db1d
 800ada0:	20000174 	.word	0x20000174

0800ada4 <cleanup_stdio>:
 800ada4:	6841      	ldr	r1, [r0, #4]
 800ada6:	4b0c      	ldr	r3, [pc, #48]	@ (800add8 <cleanup_stdio+0x34>)
 800ada8:	4299      	cmp	r1, r3
 800adaa:	b510      	push	{r4, lr}
 800adac:	4604      	mov	r4, r0
 800adae:	d001      	beq.n	800adb4 <cleanup_stdio+0x10>
 800adb0:	f002 feb4 	bl	800db1c <_fflush_r>
 800adb4:	68a1      	ldr	r1, [r4, #8]
 800adb6:	4b09      	ldr	r3, [pc, #36]	@ (800addc <cleanup_stdio+0x38>)
 800adb8:	4299      	cmp	r1, r3
 800adba:	d002      	beq.n	800adc2 <cleanup_stdio+0x1e>
 800adbc:	4620      	mov	r0, r4
 800adbe:	f002 fead 	bl	800db1c <_fflush_r>
 800adc2:	68e1      	ldr	r1, [r4, #12]
 800adc4:	4b06      	ldr	r3, [pc, #24]	@ (800ade0 <cleanup_stdio+0x3c>)
 800adc6:	4299      	cmp	r1, r3
 800adc8:	d004      	beq.n	800add4 <cleanup_stdio+0x30>
 800adca:	4620      	mov	r0, r4
 800adcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add0:	f002 bea4 	b.w	800db1c <_fflush_r>
 800add4:	bd10      	pop	{r4, pc}
 800add6:	bf00      	nop
 800add8:	20000c08 	.word	0x20000c08
 800addc:	20000c70 	.word	0x20000c70
 800ade0:	20000cd8 	.word	0x20000cd8

0800ade4 <global_stdio_init.part.0>:
 800ade4:	b510      	push	{r4, lr}
 800ade6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae14 <global_stdio_init.part.0+0x30>)
 800ade8:	4c0b      	ldr	r4, [pc, #44]	@ (800ae18 <global_stdio_init.part.0+0x34>)
 800adea:	4a0c      	ldr	r2, [pc, #48]	@ (800ae1c <global_stdio_init.part.0+0x38>)
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	4620      	mov	r0, r4
 800adf0:	2200      	movs	r2, #0
 800adf2:	2104      	movs	r1, #4
 800adf4:	f7ff ff94 	bl	800ad20 <std>
 800adf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800adfc:	2201      	movs	r2, #1
 800adfe:	2109      	movs	r1, #9
 800ae00:	f7ff ff8e 	bl	800ad20 <std>
 800ae04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae08:	2202      	movs	r2, #2
 800ae0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae0e:	2112      	movs	r1, #18
 800ae10:	f7ff bf86 	b.w	800ad20 <std>
 800ae14:	20000d40 	.word	0x20000d40
 800ae18:	20000c08 	.word	0x20000c08
 800ae1c:	0800ad8d 	.word	0x0800ad8d

0800ae20 <__sfp_lock_acquire>:
 800ae20:	4801      	ldr	r0, [pc, #4]	@ (800ae28 <__sfp_lock_acquire+0x8>)
 800ae22:	f000 ba12 	b.w	800b24a <__retarget_lock_acquire_recursive>
 800ae26:	bf00      	nop
 800ae28:	20000d49 	.word	0x20000d49

0800ae2c <__sfp_lock_release>:
 800ae2c:	4801      	ldr	r0, [pc, #4]	@ (800ae34 <__sfp_lock_release+0x8>)
 800ae2e:	f000 ba0d 	b.w	800b24c <__retarget_lock_release_recursive>
 800ae32:	bf00      	nop
 800ae34:	20000d49 	.word	0x20000d49

0800ae38 <__sinit>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	f7ff fff0 	bl	800ae20 <__sfp_lock_acquire>
 800ae40:	6a23      	ldr	r3, [r4, #32]
 800ae42:	b11b      	cbz	r3, 800ae4c <__sinit+0x14>
 800ae44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae48:	f7ff bff0 	b.w	800ae2c <__sfp_lock_release>
 800ae4c:	4b04      	ldr	r3, [pc, #16]	@ (800ae60 <__sinit+0x28>)
 800ae4e:	6223      	str	r3, [r4, #32]
 800ae50:	4b04      	ldr	r3, [pc, #16]	@ (800ae64 <__sinit+0x2c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1f5      	bne.n	800ae44 <__sinit+0xc>
 800ae58:	f7ff ffc4 	bl	800ade4 <global_stdio_init.part.0>
 800ae5c:	e7f2      	b.n	800ae44 <__sinit+0xc>
 800ae5e:	bf00      	nop
 800ae60:	0800ada5 	.word	0x0800ada5
 800ae64:	20000d40 	.word	0x20000d40

0800ae68 <_fwalk_sglue>:
 800ae68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	4688      	mov	r8, r1
 800ae70:	4614      	mov	r4, r2
 800ae72:	2600      	movs	r6, #0
 800ae74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae78:	f1b9 0901 	subs.w	r9, r9, #1
 800ae7c:	d505      	bpl.n	800ae8a <_fwalk_sglue+0x22>
 800ae7e:	6824      	ldr	r4, [r4, #0]
 800ae80:	2c00      	cmp	r4, #0
 800ae82:	d1f7      	bne.n	800ae74 <_fwalk_sglue+0xc>
 800ae84:	4630      	mov	r0, r6
 800ae86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8a:	89ab      	ldrh	r3, [r5, #12]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d907      	bls.n	800aea0 <_fwalk_sglue+0x38>
 800ae90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae94:	3301      	adds	r3, #1
 800ae96:	d003      	beq.n	800aea0 <_fwalk_sglue+0x38>
 800ae98:	4629      	mov	r1, r5
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	47c0      	blx	r8
 800ae9e:	4306      	orrs	r6, r0
 800aea0:	3568      	adds	r5, #104	@ 0x68
 800aea2:	e7e9      	b.n	800ae78 <_fwalk_sglue+0x10>

0800aea4 <_puts_r>:
 800aea4:	6a03      	ldr	r3, [r0, #32]
 800aea6:	b570      	push	{r4, r5, r6, lr}
 800aea8:	6884      	ldr	r4, [r0, #8]
 800aeaa:	4605      	mov	r5, r0
 800aeac:	460e      	mov	r6, r1
 800aeae:	b90b      	cbnz	r3, 800aeb4 <_puts_r+0x10>
 800aeb0:	f7ff ffc2 	bl	800ae38 <__sinit>
 800aeb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aeb6:	07db      	lsls	r3, r3, #31
 800aeb8:	d405      	bmi.n	800aec6 <_puts_r+0x22>
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	0598      	lsls	r0, r3, #22
 800aebe:	d402      	bmi.n	800aec6 <_puts_r+0x22>
 800aec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aec2:	f000 f9c2 	bl	800b24a <__retarget_lock_acquire_recursive>
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	0719      	lsls	r1, r3, #28
 800aeca:	d502      	bpl.n	800aed2 <_puts_r+0x2e>
 800aecc:	6923      	ldr	r3, [r4, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d135      	bne.n	800af3e <_puts_r+0x9a>
 800aed2:	4621      	mov	r1, r4
 800aed4:	4628      	mov	r0, r5
 800aed6:	f000 f8e5 	bl	800b0a4 <__swsetup_r>
 800aeda:	b380      	cbz	r0, 800af3e <_puts_r+0x9a>
 800aedc:	f04f 35ff 	mov.w	r5, #4294967295
 800aee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aee2:	07da      	lsls	r2, r3, #31
 800aee4:	d405      	bmi.n	800aef2 <_puts_r+0x4e>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	059b      	lsls	r3, r3, #22
 800aeea:	d402      	bmi.n	800aef2 <_puts_r+0x4e>
 800aeec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeee:	f000 f9ad 	bl	800b24c <__retarget_lock_release_recursive>
 800aef2:	4628      	mov	r0, r5
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	da04      	bge.n	800af04 <_puts_r+0x60>
 800aefa:	69a2      	ldr	r2, [r4, #24]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	dc17      	bgt.n	800af30 <_puts_r+0x8c>
 800af00:	290a      	cmp	r1, #10
 800af02:	d015      	beq.n	800af30 <_puts_r+0x8c>
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	6022      	str	r2, [r4, #0]
 800af0a:	7019      	strb	r1, [r3, #0]
 800af0c:	68a3      	ldr	r3, [r4, #8]
 800af0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af12:	3b01      	subs	r3, #1
 800af14:	60a3      	str	r3, [r4, #8]
 800af16:	2900      	cmp	r1, #0
 800af18:	d1ed      	bne.n	800aef6 <_puts_r+0x52>
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	da11      	bge.n	800af42 <_puts_r+0x9e>
 800af1e:	4622      	mov	r2, r4
 800af20:	210a      	movs	r1, #10
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f87f 	bl	800b026 <__swbuf_r>
 800af28:	3001      	adds	r0, #1
 800af2a:	d0d7      	beq.n	800aedc <_puts_r+0x38>
 800af2c:	250a      	movs	r5, #10
 800af2e:	e7d7      	b.n	800aee0 <_puts_r+0x3c>
 800af30:	4622      	mov	r2, r4
 800af32:	4628      	mov	r0, r5
 800af34:	f000 f877 	bl	800b026 <__swbuf_r>
 800af38:	3001      	adds	r0, #1
 800af3a:	d1e7      	bne.n	800af0c <_puts_r+0x68>
 800af3c:	e7ce      	b.n	800aedc <_puts_r+0x38>
 800af3e:	3e01      	subs	r6, #1
 800af40:	e7e4      	b.n	800af0c <_puts_r+0x68>
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	6022      	str	r2, [r4, #0]
 800af48:	220a      	movs	r2, #10
 800af4a:	701a      	strb	r2, [r3, #0]
 800af4c:	e7ee      	b.n	800af2c <_puts_r+0x88>
	...

0800af50 <puts>:
 800af50:	4b02      	ldr	r3, [pc, #8]	@ (800af5c <puts+0xc>)
 800af52:	4601      	mov	r1, r0
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	f7ff bfa5 	b.w	800aea4 <_puts_r>
 800af5a:	bf00      	nop
 800af5c:	20000170 	.word	0x20000170

0800af60 <siprintf>:
 800af60:	b40e      	push	{r1, r2, r3}
 800af62:	b500      	push	{lr}
 800af64:	b09c      	sub	sp, #112	@ 0x70
 800af66:	ab1d      	add	r3, sp, #116	@ 0x74
 800af68:	9002      	str	r0, [sp, #8]
 800af6a:	9006      	str	r0, [sp, #24]
 800af6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af70:	4809      	ldr	r0, [pc, #36]	@ (800af98 <siprintf+0x38>)
 800af72:	9107      	str	r1, [sp, #28]
 800af74:	9104      	str	r1, [sp, #16]
 800af76:	4909      	ldr	r1, [pc, #36]	@ (800af9c <siprintf+0x3c>)
 800af78:	f853 2b04 	ldr.w	r2, [r3], #4
 800af7c:	9105      	str	r1, [sp, #20]
 800af7e:	6800      	ldr	r0, [r0, #0]
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	a902      	add	r1, sp, #8
 800af84:	f002 fc4a 	bl	800d81c <_svfiprintf_r>
 800af88:	9b02      	ldr	r3, [sp, #8]
 800af8a:	2200      	movs	r2, #0
 800af8c:	701a      	strb	r2, [r3, #0]
 800af8e:	b01c      	add	sp, #112	@ 0x70
 800af90:	f85d eb04 	ldr.w	lr, [sp], #4
 800af94:	b003      	add	sp, #12
 800af96:	4770      	bx	lr
 800af98:	20000170 	.word	0x20000170
 800af9c:	ffff0208 	.word	0xffff0208

0800afa0 <__sread>:
 800afa0:	b510      	push	{r4, lr}
 800afa2:	460c      	mov	r4, r1
 800afa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa8:	f000 f900 	bl	800b1ac <_read_r>
 800afac:	2800      	cmp	r0, #0
 800afae:	bfab      	itete	ge
 800afb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800afb2:	89a3      	ldrhlt	r3, [r4, #12]
 800afb4:	181b      	addge	r3, r3, r0
 800afb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800afba:	bfac      	ite	ge
 800afbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800afbe:	81a3      	strhlt	r3, [r4, #12]
 800afc0:	bd10      	pop	{r4, pc}

0800afc2 <__swrite>:
 800afc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc6:	461f      	mov	r7, r3
 800afc8:	898b      	ldrh	r3, [r1, #12]
 800afca:	05db      	lsls	r3, r3, #23
 800afcc:	4605      	mov	r5, r0
 800afce:	460c      	mov	r4, r1
 800afd0:	4616      	mov	r6, r2
 800afd2:	d505      	bpl.n	800afe0 <__swrite+0x1e>
 800afd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd8:	2302      	movs	r3, #2
 800afda:	2200      	movs	r2, #0
 800afdc:	f000 f8d4 	bl	800b188 <_lseek_r>
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afea:	81a3      	strh	r3, [r4, #12]
 800afec:	4632      	mov	r2, r6
 800afee:	463b      	mov	r3, r7
 800aff0:	4628      	mov	r0, r5
 800aff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aff6:	f000 b8eb 	b.w	800b1d0 <_write_r>

0800affa <__sseek>:
 800affa:	b510      	push	{r4, lr}
 800affc:	460c      	mov	r4, r1
 800affe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b002:	f000 f8c1 	bl	800b188 <_lseek_r>
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	bf15      	itete	ne
 800b00c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b00e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b012:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b016:	81a3      	strheq	r3, [r4, #12]
 800b018:	bf18      	it	ne
 800b01a:	81a3      	strhne	r3, [r4, #12]
 800b01c:	bd10      	pop	{r4, pc}

0800b01e <__sclose>:
 800b01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b022:	f000 b8a1 	b.w	800b168 <_close_r>

0800b026 <__swbuf_r>:
 800b026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b028:	460e      	mov	r6, r1
 800b02a:	4614      	mov	r4, r2
 800b02c:	4605      	mov	r5, r0
 800b02e:	b118      	cbz	r0, 800b038 <__swbuf_r+0x12>
 800b030:	6a03      	ldr	r3, [r0, #32]
 800b032:	b90b      	cbnz	r3, 800b038 <__swbuf_r+0x12>
 800b034:	f7ff ff00 	bl	800ae38 <__sinit>
 800b038:	69a3      	ldr	r3, [r4, #24]
 800b03a:	60a3      	str	r3, [r4, #8]
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	071a      	lsls	r2, r3, #28
 800b040:	d501      	bpl.n	800b046 <__swbuf_r+0x20>
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	b943      	cbnz	r3, 800b058 <__swbuf_r+0x32>
 800b046:	4621      	mov	r1, r4
 800b048:	4628      	mov	r0, r5
 800b04a:	f000 f82b 	bl	800b0a4 <__swsetup_r>
 800b04e:	b118      	cbz	r0, 800b058 <__swbuf_r+0x32>
 800b050:	f04f 37ff 	mov.w	r7, #4294967295
 800b054:	4638      	mov	r0, r7
 800b056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	6922      	ldr	r2, [r4, #16]
 800b05c:	1a98      	subs	r0, r3, r2
 800b05e:	6963      	ldr	r3, [r4, #20]
 800b060:	b2f6      	uxtb	r6, r6
 800b062:	4283      	cmp	r3, r0
 800b064:	4637      	mov	r7, r6
 800b066:	dc05      	bgt.n	800b074 <__swbuf_r+0x4e>
 800b068:	4621      	mov	r1, r4
 800b06a:	4628      	mov	r0, r5
 800b06c:	f002 fd56 	bl	800db1c <_fflush_r>
 800b070:	2800      	cmp	r0, #0
 800b072:	d1ed      	bne.n	800b050 <__swbuf_r+0x2a>
 800b074:	68a3      	ldr	r3, [r4, #8]
 800b076:	3b01      	subs	r3, #1
 800b078:	60a3      	str	r3, [r4, #8]
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	6022      	str	r2, [r4, #0]
 800b080:	701e      	strb	r6, [r3, #0]
 800b082:	6962      	ldr	r2, [r4, #20]
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	429a      	cmp	r2, r3
 800b088:	d004      	beq.n	800b094 <__swbuf_r+0x6e>
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	07db      	lsls	r3, r3, #31
 800b08e:	d5e1      	bpl.n	800b054 <__swbuf_r+0x2e>
 800b090:	2e0a      	cmp	r6, #10
 800b092:	d1df      	bne.n	800b054 <__swbuf_r+0x2e>
 800b094:	4621      	mov	r1, r4
 800b096:	4628      	mov	r0, r5
 800b098:	f002 fd40 	bl	800db1c <_fflush_r>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d0d9      	beq.n	800b054 <__swbuf_r+0x2e>
 800b0a0:	e7d6      	b.n	800b050 <__swbuf_r+0x2a>
	...

0800b0a4 <__swsetup_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4b29      	ldr	r3, [pc, #164]	@ (800b14c <__swsetup_r+0xa8>)
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	b118      	cbz	r0, 800b0b8 <__swsetup_r+0x14>
 800b0b0:	6a03      	ldr	r3, [r0, #32]
 800b0b2:	b90b      	cbnz	r3, 800b0b8 <__swsetup_r+0x14>
 800b0b4:	f7ff fec0 	bl	800ae38 <__sinit>
 800b0b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0bc:	0719      	lsls	r1, r3, #28
 800b0be:	d422      	bmi.n	800b106 <__swsetup_r+0x62>
 800b0c0:	06da      	lsls	r2, r3, #27
 800b0c2:	d407      	bmi.n	800b0d4 <__swsetup_r+0x30>
 800b0c4:	2209      	movs	r2, #9
 800b0c6:	602a      	str	r2, [r5, #0]
 800b0c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d2:	e033      	b.n	800b13c <__swsetup_r+0x98>
 800b0d4:	0758      	lsls	r0, r3, #29
 800b0d6:	d512      	bpl.n	800b0fe <__swsetup_r+0x5a>
 800b0d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0da:	b141      	cbz	r1, 800b0ee <__swsetup_r+0x4a>
 800b0dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	d002      	beq.n	800b0ea <__swsetup_r+0x46>
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f000 ff07 	bl	800bef8 <_free_r>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0f4:	81a3      	strh	r3, [r4, #12]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	6063      	str	r3, [r4, #4]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f043 0308 	orr.w	r3, r3, #8
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	6923      	ldr	r3, [r4, #16]
 800b108:	b94b      	cbnz	r3, 800b11e <__swsetup_r+0x7a>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b114:	d003      	beq.n	800b11e <__swsetup_r+0x7a>
 800b116:	4621      	mov	r1, r4
 800b118:	4628      	mov	r0, r5
 800b11a:	f002 fd4d 	bl	800dbb8 <__smakebuf_r>
 800b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b122:	f013 0201 	ands.w	r2, r3, #1
 800b126:	d00a      	beq.n	800b13e <__swsetup_r+0x9a>
 800b128:	2200      	movs	r2, #0
 800b12a:	60a2      	str	r2, [r4, #8]
 800b12c:	6962      	ldr	r2, [r4, #20]
 800b12e:	4252      	negs	r2, r2
 800b130:	61a2      	str	r2, [r4, #24]
 800b132:	6922      	ldr	r2, [r4, #16]
 800b134:	b942      	cbnz	r2, 800b148 <__swsetup_r+0xa4>
 800b136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b13a:	d1c5      	bne.n	800b0c8 <__swsetup_r+0x24>
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	0799      	lsls	r1, r3, #30
 800b140:	bf58      	it	pl
 800b142:	6962      	ldrpl	r2, [r4, #20]
 800b144:	60a2      	str	r2, [r4, #8]
 800b146:	e7f4      	b.n	800b132 <__swsetup_r+0x8e>
 800b148:	2000      	movs	r0, #0
 800b14a:	e7f7      	b.n	800b13c <__swsetup_r+0x98>
 800b14c:	20000170 	.word	0x20000170

0800b150 <memset>:
 800b150:	4402      	add	r2, r0
 800b152:	4603      	mov	r3, r0
 800b154:	4293      	cmp	r3, r2
 800b156:	d100      	bne.n	800b15a <memset+0xa>
 800b158:	4770      	bx	lr
 800b15a:	f803 1b01 	strb.w	r1, [r3], #1
 800b15e:	e7f9      	b.n	800b154 <memset+0x4>

0800b160 <_localeconv_r>:
 800b160:	4800      	ldr	r0, [pc, #0]	@ (800b164 <_localeconv_r+0x4>)
 800b162:	4770      	bx	lr
 800b164:	200002b0 	.word	0x200002b0

0800b168 <_close_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4d06      	ldr	r5, [pc, #24]	@ (800b184 <_close_r+0x1c>)
 800b16c:	2300      	movs	r3, #0
 800b16e:	4604      	mov	r4, r0
 800b170:	4608      	mov	r0, r1
 800b172:	602b      	str	r3, [r5, #0]
 800b174:	f7f6 fb6a 	bl	800184c <_close>
 800b178:	1c43      	adds	r3, r0, #1
 800b17a:	d102      	bne.n	800b182 <_close_r+0x1a>
 800b17c:	682b      	ldr	r3, [r5, #0]
 800b17e:	b103      	cbz	r3, 800b182 <_close_r+0x1a>
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	bd38      	pop	{r3, r4, r5, pc}
 800b184:	20000d44 	.word	0x20000d44

0800b188 <_lseek_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	4d07      	ldr	r5, [pc, #28]	@ (800b1a8 <_lseek_r+0x20>)
 800b18c:	4604      	mov	r4, r0
 800b18e:	4608      	mov	r0, r1
 800b190:	4611      	mov	r1, r2
 800b192:	2200      	movs	r2, #0
 800b194:	602a      	str	r2, [r5, #0]
 800b196:	461a      	mov	r2, r3
 800b198:	f7f6 fb7f 	bl	800189a <_lseek>
 800b19c:	1c43      	adds	r3, r0, #1
 800b19e:	d102      	bne.n	800b1a6 <_lseek_r+0x1e>
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	b103      	cbz	r3, 800b1a6 <_lseek_r+0x1e>
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	bd38      	pop	{r3, r4, r5, pc}
 800b1a8:	20000d44 	.word	0x20000d44

0800b1ac <_read_r>:
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	4d07      	ldr	r5, [pc, #28]	@ (800b1cc <_read_r+0x20>)
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	4608      	mov	r0, r1
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	602a      	str	r2, [r5, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f7f6 fb0d 	bl	80017da <_read>
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	d102      	bne.n	800b1ca <_read_r+0x1e>
 800b1c4:	682b      	ldr	r3, [r5, #0]
 800b1c6:	b103      	cbz	r3, 800b1ca <_read_r+0x1e>
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	20000d44 	.word	0x20000d44

0800b1d0 <_write_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4d07      	ldr	r5, [pc, #28]	@ (800b1f0 <_write_r+0x20>)
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	4608      	mov	r0, r1
 800b1d8:	4611      	mov	r1, r2
 800b1da:	2200      	movs	r2, #0
 800b1dc:	602a      	str	r2, [r5, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f7f6 fb18 	bl	8001814 <_write>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_write_r+0x1e>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_write_r+0x1e>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	20000d44 	.word	0x20000d44

0800b1f4 <__errno>:
 800b1f4:	4b01      	ldr	r3, [pc, #4]	@ (800b1fc <__errno+0x8>)
 800b1f6:	6818      	ldr	r0, [r3, #0]
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	20000170 	.word	0x20000170

0800b200 <__libc_init_array>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	4d0d      	ldr	r5, [pc, #52]	@ (800b238 <__libc_init_array+0x38>)
 800b204:	4c0d      	ldr	r4, [pc, #52]	@ (800b23c <__libc_init_array+0x3c>)
 800b206:	1b64      	subs	r4, r4, r5
 800b208:	10a4      	asrs	r4, r4, #2
 800b20a:	2600      	movs	r6, #0
 800b20c:	42a6      	cmp	r6, r4
 800b20e:	d109      	bne.n	800b224 <__libc_init_array+0x24>
 800b210:	4d0b      	ldr	r5, [pc, #44]	@ (800b240 <__libc_init_array+0x40>)
 800b212:	4c0c      	ldr	r4, [pc, #48]	@ (800b244 <__libc_init_array+0x44>)
 800b214:	f003 fade 	bl	800e7d4 <_init>
 800b218:	1b64      	subs	r4, r4, r5
 800b21a:	10a4      	asrs	r4, r4, #2
 800b21c:	2600      	movs	r6, #0
 800b21e:	42a6      	cmp	r6, r4
 800b220:	d105      	bne.n	800b22e <__libc_init_array+0x2e>
 800b222:	bd70      	pop	{r4, r5, r6, pc}
 800b224:	f855 3b04 	ldr.w	r3, [r5], #4
 800b228:	4798      	blx	r3
 800b22a:	3601      	adds	r6, #1
 800b22c:	e7ee      	b.n	800b20c <__libc_init_array+0xc>
 800b22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b232:	4798      	blx	r3
 800b234:	3601      	adds	r6, #1
 800b236:	e7f2      	b.n	800b21e <__libc_init_array+0x1e>
 800b238:	0800edd0 	.word	0x0800edd0
 800b23c:	0800edd0 	.word	0x0800edd0
 800b240:	0800edd0 	.word	0x0800edd0
 800b244:	0800edd4 	.word	0x0800edd4

0800b248 <__retarget_lock_init_recursive>:
 800b248:	4770      	bx	lr

0800b24a <__retarget_lock_acquire_recursive>:
 800b24a:	4770      	bx	lr

0800b24c <__retarget_lock_release_recursive>:
 800b24c:	4770      	bx	lr
	...

0800b250 <nanf>:
 800b250:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b258 <nanf+0x8>
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	7fc00000 	.word	0x7fc00000

0800b25c <quorem>:
 800b25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	6903      	ldr	r3, [r0, #16]
 800b262:	690c      	ldr	r4, [r1, #16]
 800b264:	42a3      	cmp	r3, r4
 800b266:	4607      	mov	r7, r0
 800b268:	db7e      	blt.n	800b368 <quorem+0x10c>
 800b26a:	3c01      	subs	r4, #1
 800b26c:	f101 0814 	add.w	r8, r1, #20
 800b270:	00a3      	lsls	r3, r4, #2
 800b272:	f100 0514 	add.w	r5, r0, #20
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b286:	3301      	adds	r3, #1
 800b288:	429a      	cmp	r2, r3
 800b28a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b28e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b292:	d32e      	bcc.n	800b2f2 <quorem+0x96>
 800b294:	f04f 0a00 	mov.w	sl, #0
 800b298:	46c4      	mov	ip, r8
 800b29a:	46ae      	mov	lr, r5
 800b29c:	46d3      	mov	fp, sl
 800b29e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b2a2:	b298      	uxth	r0, r3
 800b2a4:	fb06 a000 	mla	r0, r6, r0, sl
 800b2a8:	0c02      	lsrs	r2, r0, #16
 800b2aa:	0c1b      	lsrs	r3, r3, #16
 800b2ac:	fb06 2303 	mla	r3, r6, r3, r2
 800b2b0:	f8de 2000 	ldr.w	r2, [lr]
 800b2b4:	b280      	uxth	r0, r0
 800b2b6:	b292      	uxth	r2, r2
 800b2b8:	1a12      	subs	r2, r2, r0
 800b2ba:	445a      	add	r2, fp
 800b2bc:	f8de 0000 	ldr.w	r0, [lr]
 800b2c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b2ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b2ce:	b292      	uxth	r2, r2
 800b2d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b2d4:	45e1      	cmp	r9, ip
 800b2d6:	f84e 2b04 	str.w	r2, [lr], #4
 800b2da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b2de:	d2de      	bcs.n	800b29e <quorem+0x42>
 800b2e0:	9b00      	ldr	r3, [sp, #0]
 800b2e2:	58eb      	ldr	r3, [r5, r3]
 800b2e4:	b92b      	cbnz	r3, 800b2f2 <quorem+0x96>
 800b2e6:	9b01      	ldr	r3, [sp, #4]
 800b2e8:	3b04      	subs	r3, #4
 800b2ea:	429d      	cmp	r5, r3
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	d32f      	bcc.n	800b350 <quorem+0xf4>
 800b2f0:	613c      	str	r4, [r7, #16]
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	f001 f9c4 	bl	800c680 <__mcmp>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	db25      	blt.n	800b348 <quorem+0xec>
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	2000      	movs	r0, #0
 800b300:	f858 2b04 	ldr.w	r2, [r8], #4
 800b304:	f8d1 c000 	ldr.w	ip, [r1]
 800b308:	fa1f fe82 	uxth.w	lr, r2
 800b30c:	fa1f f38c 	uxth.w	r3, ip
 800b310:	eba3 030e 	sub.w	r3, r3, lr
 800b314:	4403      	add	r3, r0
 800b316:	0c12      	lsrs	r2, r2, #16
 800b318:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b31c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b320:	b29b      	uxth	r3, r3
 800b322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b326:	45c1      	cmp	r9, r8
 800b328:	f841 3b04 	str.w	r3, [r1], #4
 800b32c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b330:	d2e6      	bcs.n	800b300 <quorem+0xa4>
 800b332:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b33a:	b922      	cbnz	r2, 800b346 <quorem+0xea>
 800b33c:	3b04      	subs	r3, #4
 800b33e:	429d      	cmp	r5, r3
 800b340:	461a      	mov	r2, r3
 800b342:	d30b      	bcc.n	800b35c <quorem+0x100>
 800b344:	613c      	str	r4, [r7, #16]
 800b346:	3601      	adds	r6, #1
 800b348:	4630      	mov	r0, r6
 800b34a:	b003      	add	sp, #12
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	6812      	ldr	r2, [r2, #0]
 800b352:	3b04      	subs	r3, #4
 800b354:	2a00      	cmp	r2, #0
 800b356:	d1cb      	bne.n	800b2f0 <quorem+0x94>
 800b358:	3c01      	subs	r4, #1
 800b35a:	e7c6      	b.n	800b2ea <quorem+0x8e>
 800b35c:	6812      	ldr	r2, [r2, #0]
 800b35e:	3b04      	subs	r3, #4
 800b360:	2a00      	cmp	r2, #0
 800b362:	d1ef      	bne.n	800b344 <quorem+0xe8>
 800b364:	3c01      	subs	r4, #1
 800b366:	e7ea      	b.n	800b33e <quorem+0xe2>
 800b368:	2000      	movs	r0, #0
 800b36a:	e7ee      	b.n	800b34a <quorem+0xee>
 800b36c:	0000      	movs	r0, r0
	...

0800b370 <_dtoa_r>:
 800b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b374:	69c7      	ldr	r7, [r0, #28]
 800b376:	b099      	sub	sp, #100	@ 0x64
 800b378:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b37c:	ec55 4b10 	vmov	r4, r5, d0
 800b380:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b382:	9109      	str	r1, [sp, #36]	@ 0x24
 800b384:	4683      	mov	fp, r0
 800b386:	920e      	str	r2, [sp, #56]	@ 0x38
 800b388:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b38a:	b97f      	cbnz	r7, 800b3ac <_dtoa_r+0x3c>
 800b38c:	2010      	movs	r0, #16
 800b38e:	f000 fdfd 	bl	800bf8c <malloc>
 800b392:	4602      	mov	r2, r0
 800b394:	f8cb 001c 	str.w	r0, [fp, #28]
 800b398:	b920      	cbnz	r0, 800b3a4 <_dtoa_r+0x34>
 800b39a:	4ba7      	ldr	r3, [pc, #668]	@ (800b638 <_dtoa_r+0x2c8>)
 800b39c:	21ef      	movs	r1, #239	@ 0xef
 800b39e:	48a7      	ldr	r0, [pc, #668]	@ (800b63c <_dtoa_r+0x2cc>)
 800b3a0:	f002 fcba 	bl	800dd18 <__assert_func>
 800b3a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b3a8:	6007      	str	r7, [r0, #0]
 800b3aa:	60c7      	str	r7, [r0, #12]
 800b3ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3b0:	6819      	ldr	r1, [r3, #0]
 800b3b2:	b159      	cbz	r1, 800b3cc <_dtoa_r+0x5c>
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	604a      	str	r2, [r1, #4]
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	4093      	lsls	r3, r2
 800b3bc:	608b      	str	r3, [r1, #8]
 800b3be:	4658      	mov	r0, fp
 800b3c0:	f000 feda 	bl	800c178 <_Bfree>
 800b3c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	1e2b      	subs	r3, r5, #0
 800b3ce:	bfb9      	ittee	lt
 800b3d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b3d4:	9303      	strlt	r3, [sp, #12]
 800b3d6:	2300      	movge	r3, #0
 800b3d8:	6033      	strge	r3, [r6, #0]
 800b3da:	9f03      	ldr	r7, [sp, #12]
 800b3dc:	4b98      	ldr	r3, [pc, #608]	@ (800b640 <_dtoa_r+0x2d0>)
 800b3de:	bfbc      	itt	lt
 800b3e0:	2201      	movlt	r2, #1
 800b3e2:	6032      	strlt	r2, [r6, #0]
 800b3e4:	43bb      	bics	r3, r7
 800b3e6:	d112      	bne.n	800b40e <_dtoa_r+0x9e>
 800b3e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b3ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b3f4:	4323      	orrs	r3, r4
 800b3f6:	f000 854d 	beq.w	800be94 <_dtoa_r+0xb24>
 800b3fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b654 <_dtoa_r+0x2e4>
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 854f 	beq.w	800bea4 <_dtoa_r+0xb34>
 800b406:	f10a 0303 	add.w	r3, sl, #3
 800b40a:	f000 bd49 	b.w	800bea0 <_dtoa_r+0xb30>
 800b40e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b412:	2200      	movs	r2, #0
 800b414:	ec51 0b17 	vmov	r0, r1, d7
 800b418:	2300      	movs	r3, #0
 800b41a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b41e:	f7f5 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800b422:	4680      	mov	r8, r0
 800b424:	b158      	cbz	r0, 800b43e <_dtoa_r+0xce>
 800b426:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b428:	2301      	movs	r3, #1
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b42e:	b113      	cbz	r3, 800b436 <_dtoa_r+0xc6>
 800b430:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b432:	4b84      	ldr	r3, [pc, #528]	@ (800b644 <_dtoa_r+0x2d4>)
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b658 <_dtoa_r+0x2e8>
 800b43a:	f000 bd33 	b.w	800bea4 <_dtoa_r+0xb34>
 800b43e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b442:	aa16      	add	r2, sp, #88	@ 0x58
 800b444:	a917      	add	r1, sp, #92	@ 0x5c
 800b446:	4658      	mov	r0, fp
 800b448:	f001 fa3a 	bl	800c8c0 <__d2b>
 800b44c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b450:	4681      	mov	r9, r0
 800b452:	2e00      	cmp	r6, #0
 800b454:	d077      	beq.n	800b546 <_dtoa_r+0x1d6>
 800b456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b458:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b464:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b468:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b46c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b470:	4619      	mov	r1, r3
 800b472:	2200      	movs	r2, #0
 800b474:	4b74      	ldr	r3, [pc, #464]	@ (800b648 <_dtoa_r+0x2d8>)
 800b476:	f7f4 ff07 	bl	8000288 <__aeabi_dsub>
 800b47a:	a369      	add	r3, pc, #420	@ (adr r3, 800b620 <_dtoa_r+0x2b0>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f7f5 f8ba 	bl	80005f8 <__aeabi_dmul>
 800b484:	a368      	add	r3, pc, #416	@ (adr r3, 800b628 <_dtoa_r+0x2b8>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	f7f4 feff 	bl	800028c <__adddf3>
 800b48e:	4604      	mov	r4, r0
 800b490:	4630      	mov	r0, r6
 800b492:	460d      	mov	r5, r1
 800b494:	f7f5 f846 	bl	8000524 <__aeabi_i2d>
 800b498:	a365      	add	r3, pc, #404	@ (adr r3, 800b630 <_dtoa_r+0x2c0>)
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	f7f5 f8ab 	bl	80005f8 <__aeabi_dmul>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f7f4 feef 	bl	800028c <__adddf3>
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	460d      	mov	r5, r1
 800b4b2:	f7f5 fb51 	bl	8000b58 <__aeabi_d2iz>
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	4607      	mov	r7, r0
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7f5 fb0c 	bl	8000adc <__aeabi_dcmplt>
 800b4c4:	b140      	cbz	r0, 800b4d8 <_dtoa_r+0x168>
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	f7f5 f82c 	bl	8000524 <__aeabi_i2d>
 800b4cc:	4622      	mov	r2, r4
 800b4ce:	462b      	mov	r3, r5
 800b4d0:	f7f5 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4d4:	b900      	cbnz	r0, 800b4d8 <_dtoa_r+0x168>
 800b4d6:	3f01      	subs	r7, #1
 800b4d8:	2f16      	cmp	r7, #22
 800b4da:	d851      	bhi.n	800b580 <_dtoa_r+0x210>
 800b4dc:	4b5b      	ldr	r3, [pc, #364]	@ (800b64c <_dtoa_r+0x2dc>)
 800b4de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4ea:	f7f5 faf7 	bl	8000adc <__aeabi_dcmplt>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d048      	beq.n	800b584 <_dtoa_r+0x214>
 800b4f2:	3f01      	subs	r7, #1
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b4f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b4fa:	1b9b      	subs	r3, r3, r6
 800b4fc:	1e5a      	subs	r2, r3, #1
 800b4fe:	bf44      	itt	mi
 800b500:	f1c3 0801 	rsbmi	r8, r3, #1
 800b504:	2300      	movmi	r3, #0
 800b506:	9208      	str	r2, [sp, #32]
 800b508:	bf54      	ite	pl
 800b50a:	f04f 0800 	movpl.w	r8, #0
 800b50e:	9308      	strmi	r3, [sp, #32]
 800b510:	2f00      	cmp	r7, #0
 800b512:	db39      	blt.n	800b588 <_dtoa_r+0x218>
 800b514:	9b08      	ldr	r3, [sp, #32]
 800b516:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b518:	443b      	add	r3, r7
 800b51a:	9308      	str	r3, [sp, #32]
 800b51c:	2300      	movs	r3, #0
 800b51e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b522:	2b09      	cmp	r3, #9
 800b524:	d864      	bhi.n	800b5f0 <_dtoa_r+0x280>
 800b526:	2b05      	cmp	r3, #5
 800b528:	bfc4      	itt	gt
 800b52a:	3b04      	subgt	r3, #4
 800b52c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b530:	f1a3 0302 	sub.w	r3, r3, #2
 800b534:	bfcc      	ite	gt
 800b536:	2400      	movgt	r4, #0
 800b538:	2401      	movle	r4, #1
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	d863      	bhi.n	800b606 <_dtoa_r+0x296>
 800b53e:	e8df f003 	tbb	[pc, r3]
 800b542:	372a      	.short	0x372a
 800b544:	5535      	.short	0x5535
 800b546:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b54a:	441e      	add	r6, r3
 800b54c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b550:	2b20      	cmp	r3, #32
 800b552:	bfc1      	itttt	gt
 800b554:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b558:	409f      	lslgt	r7, r3
 800b55a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b55e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b562:	bfd6      	itet	le
 800b564:	f1c3 0320 	rsble	r3, r3, #32
 800b568:	ea47 0003 	orrgt.w	r0, r7, r3
 800b56c:	fa04 f003 	lslle.w	r0, r4, r3
 800b570:	f7f4 ffc8 	bl	8000504 <__aeabi_ui2d>
 800b574:	2201      	movs	r2, #1
 800b576:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b57a:	3e01      	subs	r6, #1
 800b57c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b57e:	e777      	b.n	800b470 <_dtoa_r+0x100>
 800b580:	2301      	movs	r3, #1
 800b582:	e7b8      	b.n	800b4f6 <_dtoa_r+0x186>
 800b584:	9012      	str	r0, [sp, #72]	@ 0x48
 800b586:	e7b7      	b.n	800b4f8 <_dtoa_r+0x188>
 800b588:	427b      	negs	r3, r7
 800b58a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b58c:	2300      	movs	r3, #0
 800b58e:	eba8 0807 	sub.w	r8, r8, r7
 800b592:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b594:	e7c4      	b.n	800b520 <_dtoa_r+0x1b0>
 800b596:	2300      	movs	r3, #0
 800b598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b59a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	dc35      	bgt.n	800b60c <_dtoa_r+0x29c>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	9307      	str	r3, [sp, #28]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5aa:	e00b      	b.n	800b5c4 <_dtoa_r+0x254>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e7f3      	b.n	800b598 <_dtoa_r+0x228>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5b6:	18fb      	adds	r3, r7, r3
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	9307      	str	r3, [sp, #28]
 800b5c0:	bfb8      	it	lt
 800b5c2:	2301      	movlt	r3, #1
 800b5c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	2204      	movs	r2, #4
 800b5cc:	f102 0514 	add.w	r5, r2, #20
 800b5d0:	429d      	cmp	r5, r3
 800b5d2:	d91f      	bls.n	800b614 <_dtoa_r+0x2a4>
 800b5d4:	6041      	str	r1, [r0, #4]
 800b5d6:	4658      	mov	r0, fp
 800b5d8:	f000 fd8e 	bl	800c0f8 <_Balloc>
 800b5dc:	4682      	mov	sl, r0
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d13c      	bne.n	800b65c <_dtoa_r+0x2ec>
 800b5e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b650 <_dtoa_r+0x2e0>)
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b5ea:	e6d8      	b.n	800b39e <_dtoa_r+0x2e>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e7e0      	b.n	800b5b2 <_dtoa_r+0x242>
 800b5f0:	2401      	movs	r4, #1
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	9307      	str	r3, [sp, #28]
 800b600:	2200      	movs	r2, #0
 800b602:	2312      	movs	r3, #18
 800b604:	e7d0      	b.n	800b5a8 <_dtoa_r+0x238>
 800b606:	2301      	movs	r3, #1
 800b608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b60a:	e7f5      	b.n	800b5f8 <_dtoa_r+0x288>
 800b60c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	9307      	str	r3, [sp, #28]
 800b612:	e7d7      	b.n	800b5c4 <_dtoa_r+0x254>
 800b614:	3101      	adds	r1, #1
 800b616:	0052      	lsls	r2, r2, #1
 800b618:	e7d8      	b.n	800b5cc <_dtoa_r+0x25c>
 800b61a:	bf00      	nop
 800b61c:	f3af 8000 	nop.w
 800b620:	636f4361 	.word	0x636f4361
 800b624:	3fd287a7 	.word	0x3fd287a7
 800b628:	8b60c8b3 	.word	0x8b60c8b3
 800b62c:	3fc68a28 	.word	0x3fc68a28
 800b630:	509f79fb 	.word	0x509f79fb
 800b634:	3fd34413 	.word	0x3fd34413
 800b638:	0800e9e2 	.word	0x0800e9e2
 800b63c:	0800e9f9 	.word	0x0800e9f9
 800b640:	7ff00000 	.word	0x7ff00000
 800b644:	0800e9ad 	.word	0x0800e9ad
 800b648:	3ff80000 	.word	0x3ff80000
 800b64c:	0800eaf0 	.word	0x0800eaf0
 800b650:	0800ea51 	.word	0x0800ea51
 800b654:	0800e9de 	.word	0x0800e9de
 800b658:	0800e9ac 	.word	0x0800e9ac
 800b65c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b660:	6018      	str	r0, [r3, #0]
 800b662:	9b07      	ldr	r3, [sp, #28]
 800b664:	2b0e      	cmp	r3, #14
 800b666:	f200 80a4 	bhi.w	800b7b2 <_dtoa_r+0x442>
 800b66a:	2c00      	cmp	r4, #0
 800b66c:	f000 80a1 	beq.w	800b7b2 <_dtoa_r+0x442>
 800b670:	2f00      	cmp	r7, #0
 800b672:	dd33      	ble.n	800b6dc <_dtoa_r+0x36c>
 800b674:	4bad      	ldr	r3, [pc, #692]	@ (800b92c <_dtoa_r+0x5bc>)
 800b676:	f007 020f 	and.w	r2, r7, #15
 800b67a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b67e:	ed93 7b00 	vldr	d7, [r3]
 800b682:	05f8      	lsls	r0, r7, #23
 800b684:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b688:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b68c:	d516      	bpl.n	800b6bc <_dtoa_r+0x34c>
 800b68e:	4ba8      	ldr	r3, [pc, #672]	@ (800b930 <_dtoa_r+0x5c0>)
 800b690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b694:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b698:	f7f5 f8d8 	bl	800084c <__aeabi_ddiv>
 800b69c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6a0:	f004 040f 	and.w	r4, r4, #15
 800b6a4:	2603      	movs	r6, #3
 800b6a6:	4da2      	ldr	r5, [pc, #648]	@ (800b930 <_dtoa_r+0x5c0>)
 800b6a8:	b954      	cbnz	r4, 800b6c0 <_dtoa_r+0x350>
 800b6aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b2:	f7f5 f8cb 	bl	800084c <__aeabi_ddiv>
 800b6b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ba:	e028      	b.n	800b70e <_dtoa_r+0x39e>
 800b6bc:	2602      	movs	r6, #2
 800b6be:	e7f2      	b.n	800b6a6 <_dtoa_r+0x336>
 800b6c0:	07e1      	lsls	r1, r4, #31
 800b6c2:	d508      	bpl.n	800b6d6 <_dtoa_r+0x366>
 800b6c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6cc:	f7f4 ff94 	bl	80005f8 <__aeabi_dmul>
 800b6d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6d4:	3601      	adds	r6, #1
 800b6d6:	1064      	asrs	r4, r4, #1
 800b6d8:	3508      	adds	r5, #8
 800b6da:	e7e5      	b.n	800b6a8 <_dtoa_r+0x338>
 800b6dc:	f000 80d2 	beq.w	800b884 <_dtoa_r+0x514>
 800b6e0:	427c      	negs	r4, r7
 800b6e2:	4b92      	ldr	r3, [pc, #584]	@ (800b92c <_dtoa_r+0x5bc>)
 800b6e4:	4d92      	ldr	r5, [pc, #584]	@ (800b930 <_dtoa_r+0x5c0>)
 800b6e6:	f004 020f 	and.w	r2, r4, #15
 800b6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6f6:	f7f4 ff7f 	bl	80005f8 <__aeabi_dmul>
 800b6fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6fe:	1124      	asrs	r4, r4, #4
 800b700:	2300      	movs	r3, #0
 800b702:	2602      	movs	r6, #2
 800b704:	2c00      	cmp	r4, #0
 800b706:	f040 80b2 	bne.w	800b86e <_dtoa_r+0x4fe>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1d3      	bne.n	800b6b6 <_dtoa_r+0x346>
 800b70e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b710:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 80b7 	beq.w	800b888 <_dtoa_r+0x518>
 800b71a:	4b86      	ldr	r3, [pc, #536]	@ (800b934 <_dtoa_r+0x5c4>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	4620      	mov	r0, r4
 800b720:	4629      	mov	r1, r5
 800b722:	f7f5 f9db 	bl	8000adc <__aeabi_dcmplt>
 800b726:	2800      	cmp	r0, #0
 800b728:	f000 80ae 	beq.w	800b888 <_dtoa_r+0x518>
 800b72c:	9b07      	ldr	r3, [sp, #28]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 80aa 	beq.w	800b888 <_dtoa_r+0x518>
 800b734:	9b00      	ldr	r3, [sp, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	dd37      	ble.n	800b7aa <_dtoa_r+0x43a>
 800b73a:	1e7b      	subs	r3, r7, #1
 800b73c:	9304      	str	r3, [sp, #16]
 800b73e:	4620      	mov	r0, r4
 800b740:	4b7d      	ldr	r3, [pc, #500]	@ (800b938 <_dtoa_r+0x5c8>)
 800b742:	2200      	movs	r2, #0
 800b744:	4629      	mov	r1, r5
 800b746:	f7f4 ff57 	bl	80005f8 <__aeabi_dmul>
 800b74a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b74e:	9c00      	ldr	r4, [sp, #0]
 800b750:	3601      	adds	r6, #1
 800b752:	4630      	mov	r0, r6
 800b754:	f7f4 fee6 	bl	8000524 <__aeabi_i2d>
 800b758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b75c:	f7f4 ff4c 	bl	80005f8 <__aeabi_dmul>
 800b760:	4b76      	ldr	r3, [pc, #472]	@ (800b93c <_dtoa_r+0x5cc>)
 800b762:	2200      	movs	r2, #0
 800b764:	f7f4 fd92 	bl	800028c <__adddf3>
 800b768:	4605      	mov	r5, r0
 800b76a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b76e:	2c00      	cmp	r4, #0
 800b770:	f040 808d 	bne.w	800b88e <_dtoa_r+0x51e>
 800b774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b778:	4b71      	ldr	r3, [pc, #452]	@ (800b940 <_dtoa_r+0x5d0>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	f7f4 fd84 	bl	8000288 <__aeabi_dsub>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b788:	462a      	mov	r2, r5
 800b78a:	4633      	mov	r3, r6
 800b78c:	f7f5 f9c4 	bl	8000b18 <__aeabi_dcmpgt>
 800b790:	2800      	cmp	r0, #0
 800b792:	f040 828b 	bne.w	800bcac <_dtoa_r+0x93c>
 800b796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b79a:	462a      	mov	r2, r5
 800b79c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b7a0:	f7f5 f99c 	bl	8000adc <__aeabi_dcmplt>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	f040 8128 	bne.w	800b9fa <_dtoa_r+0x68a>
 800b7aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b7ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b7b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f2c0 815a 	blt.w	800ba6e <_dtoa_r+0x6fe>
 800b7ba:	2f0e      	cmp	r7, #14
 800b7bc:	f300 8157 	bgt.w	800ba6e <_dtoa_r+0x6fe>
 800b7c0:	4b5a      	ldr	r3, [pc, #360]	@ (800b92c <_dtoa_r+0x5bc>)
 800b7c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7c6:	ed93 7b00 	vldr	d7, [r3]
 800b7ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	ed8d 7b00 	vstr	d7, [sp]
 800b7d2:	da03      	bge.n	800b7dc <_dtoa_r+0x46c>
 800b7d4:	9b07      	ldr	r3, [sp, #28]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f340 8101 	ble.w	800b9de <_dtoa_r+0x66e>
 800b7dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7e0:	4656      	mov	r6, sl
 800b7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	f7f5 f82f 	bl	800084c <__aeabi_ddiv>
 800b7ee:	f7f5 f9b3 	bl	8000b58 <__aeabi_d2iz>
 800b7f2:	4680      	mov	r8, r0
 800b7f4:	f7f4 fe96 	bl	8000524 <__aeabi_i2d>
 800b7f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7fc:	f7f4 fefc 	bl	80005f8 <__aeabi_dmul>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b80c:	f7f4 fd3c 	bl	8000288 <__aeabi_dsub>
 800b810:	f806 4b01 	strb.w	r4, [r6], #1
 800b814:	9d07      	ldr	r5, [sp, #28]
 800b816:	eba6 040a 	sub.w	r4, r6, sl
 800b81a:	42a5      	cmp	r5, r4
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	f040 8117 	bne.w	800ba52 <_dtoa_r+0x6e2>
 800b824:	f7f4 fd32 	bl	800028c <__adddf3>
 800b828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b82c:	4604      	mov	r4, r0
 800b82e:	460d      	mov	r5, r1
 800b830:	f7f5 f972 	bl	8000b18 <__aeabi_dcmpgt>
 800b834:	2800      	cmp	r0, #0
 800b836:	f040 80f9 	bne.w	800ba2c <_dtoa_r+0x6bc>
 800b83a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b83e:	4620      	mov	r0, r4
 800b840:	4629      	mov	r1, r5
 800b842:	f7f5 f941 	bl	8000ac8 <__aeabi_dcmpeq>
 800b846:	b118      	cbz	r0, 800b850 <_dtoa_r+0x4e0>
 800b848:	f018 0f01 	tst.w	r8, #1
 800b84c:	f040 80ee 	bne.w	800ba2c <_dtoa_r+0x6bc>
 800b850:	4649      	mov	r1, r9
 800b852:	4658      	mov	r0, fp
 800b854:	f000 fc90 	bl	800c178 <_Bfree>
 800b858:	2300      	movs	r3, #0
 800b85a:	7033      	strb	r3, [r6, #0]
 800b85c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b85e:	3701      	adds	r7, #1
 800b860:	601f      	str	r7, [r3, #0]
 800b862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 831d 	beq.w	800bea4 <_dtoa_r+0xb34>
 800b86a:	601e      	str	r6, [r3, #0]
 800b86c:	e31a      	b.n	800bea4 <_dtoa_r+0xb34>
 800b86e:	07e2      	lsls	r2, r4, #31
 800b870:	d505      	bpl.n	800b87e <_dtoa_r+0x50e>
 800b872:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b876:	f7f4 febf 	bl	80005f8 <__aeabi_dmul>
 800b87a:	3601      	adds	r6, #1
 800b87c:	2301      	movs	r3, #1
 800b87e:	1064      	asrs	r4, r4, #1
 800b880:	3508      	adds	r5, #8
 800b882:	e73f      	b.n	800b704 <_dtoa_r+0x394>
 800b884:	2602      	movs	r6, #2
 800b886:	e742      	b.n	800b70e <_dtoa_r+0x39e>
 800b888:	9c07      	ldr	r4, [sp, #28]
 800b88a:	9704      	str	r7, [sp, #16]
 800b88c:	e761      	b.n	800b752 <_dtoa_r+0x3e2>
 800b88e:	4b27      	ldr	r3, [pc, #156]	@ (800b92c <_dtoa_r+0x5bc>)
 800b890:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b892:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b896:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b89a:	4454      	add	r4, sl
 800b89c:	2900      	cmp	r1, #0
 800b89e:	d053      	beq.n	800b948 <_dtoa_r+0x5d8>
 800b8a0:	4928      	ldr	r1, [pc, #160]	@ (800b944 <_dtoa_r+0x5d4>)
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	f7f4 ffd2 	bl	800084c <__aeabi_ddiv>
 800b8a8:	4633      	mov	r3, r6
 800b8aa:	462a      	mov	r2, r5
 800b8ac:	f7f4 fcec 	bl	8000288 <__aeabi_dsub>
 800b8b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8b4:	4656      	mov	r6, sl
 800b8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ba:	f7f5 f94d 	bl	8000b58 <__aeabi_d2iz>
 800b8be:	4605      	mov	r5, r0
 800b8c0:	f7f4 fe30 	bl	8000524 <__aeabi_i2d>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8cc:	f7f4 fcdc 	bl	8000288 <__aeabi_dsub>
 800b8d0:	3530      	adds	r5, #48	@ 0x30
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8da:	f806 5b01 	strb.w	r5, [r6], #1
 800b8de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8e2:	f7f5 f8fb 	bl	8000adc <__aeabi_dcmplt>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d171      	bne.n	800b9ce <_dtoa_r+0x65e>
 800b8ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8ee:	4911      	ldr	r1, [pc, #68]	@ (800b934 <_dtoa_r+0x5c4>)
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	f7f4 fcc9 	bl	8000288 <__aeabi_dsub>
 800b8f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8fa:	f7f5 f8ef 	bl	8000adc <__aeabi_dcmplt>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	f040 8095 	bne.w	800ba2e <_dtoa_r+0x6be>
 800b904:	42a6      	cmp	r6, r4
 800b906:	f43f af50 	beq.w	800b7aa <_dtoa_r+0x43a>
 800b90a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b90e:	4b0a      	ldr	r3, [pc, #40]	@ (800b938 <_dtoa_r+0x5c8>)
 800b910:	2200      	movs	r2, #0
 800b912:	f7f4 fe71 	bl	80005f8 <__aeabi_dmul>
 800b916:	4b08      	ldr	r3, [pc, #32]	@ (800b938 <_dtoa_r+0x5c8>)
 800b918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b91c:	2200      	movs	r2, #0
 800b91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b922:	f7f4 fe69 	bl	80005f8 <__aeabi_dmul>
 800b926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b92a:	e7c4      	b.n	800b8b6 <_dtoa_r+0x546>
 800b92c:	0800eaf0 	.word	0x0800eaf0
 800b930:	0800eac8 	.word	0x0800eac8
 800b934:	3ff00000 	.word	0x3ff00000
 800b938:	40240000 	.word	0x40240000
 800b93c:	401c0000 	.word	0x401c0000
 800b940:	40140000 	.word	0x40140000
 800b944:	3fe00000 	.word	0x3fe00000
 800b948:	4631      	mov	r1, r6
 800b94a:	4628      	mov	r0, r5
 800b94c:	f7f4 fe54 	bl	80005f8 <__aeabi_dmul>
 800b950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b954:	9415      	str	r4, [sp, #84]	@ 0x54
 800b956:	4656      	mov	r6, sl
 800b958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b95c:	f7f5 f8fc 	bl	8000b58 <__aeabi_d2iz>
 800b960:	4605      	mov	r5, r0
 800b962:	f7f4 fddf 	bl	8000524 <__aeabi_i2d>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b96e:	f7f4 fc8b 	bl	8000288 <__aeabi_dsub>
 800b972:	3530      	adds	r5, #48	@ 0x30
 800b974:	f806 5b01 	strb.w	r5, [r6], #1
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	42a6      	cmp	r6, r4
 800b97e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b982:	f04f 0200 	mov.w	r2, #0
 800b986:	d124      	bne.n	800b9d2 <_dtoa_r+0x662>
 800b988:	4bac      	ldr	r3, [pc, #688]	@ (800bc3c <_dtoa_r+0x8cc>)
 800b98a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b98e:	f7f4 fc7d 	bl	800028c <__adddf3>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b99a:	f7f5 f8bd 	bl	8000b18 <__aeabi_dcmpgt>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d145      	bne.n	800ba2e <_dtoa_r+0x6be>
 800b9a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9a6:	49a5      	ldr	r1, [pc, #660]	@ (800bc3c <_dtoa_r+0x8cc>)
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	f7f4 fc6d 	bl	8000288 <__aeabi_dsub>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9b6:	f7f5 f891 	bl	8000adc <__aeabi_dcmplt>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	f43f aef5 	beq.w	800b7aa <_dtoa_r+0x43a>
 800b9c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b9c2:	1e73      	subs	r3, r6, #1
 800b9c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b9c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b9ca:	2b30      	cmp	r3, #48	@ 0x30
 800b9cc:	d0f8      	beq.n	800b9c0 <_dtoa_r+0x650>
 800b9ce:	9f04      	ldr	r7, [sp, #16]
 800b9d0:	e73e      	b.n	800b850 <_dtoa_r+0x4e0>
 800b9d2:	4b9b      	ldr	r3, [pc, #620]	@ (800bc40 <_dtoa_r+0x8d0>)
 800b9d4:	f7f4 fe10 	bl	80005f8 <__aeabi_dmul>
 800b9d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9dc:	e7bc      	b.n	800b958 <_dtoa_r+0x5e8>
 800b9de:	d10c      	bne.n	800b9fa <_dtoa_r+0x68a>
 800b9e0:	4b98      	ldr	r3, [pc, #608]	@ (800bc44 <_dtoa_r+0x8d4>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9e8:	f7f4 fe06 	bl	80005f8 <__aeabi_dmul>
 800b9ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9f0:	f7f5 f888 	bl	8000b04 <__aeabi_dcmpge>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	f000 8157 	beq.w	800bca8 <_dtoa_r+0x938>
 800b9fa:	2400      	movs	r4, #0
 800b9fc:	4625      	mov	r5, r4
 800b9fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba00:	43db      	mvns	r3, r3
 800ba02:	9304      	str	r3, [sp, #16]
 800ba04:	4656      	mov	r6, sl
 800ba06:	2700      	movs	r7, #0
 800ba08:	4621      	mov	r1, r4
 800ba0a:	4658      	mov	r0, fp
 800ba0c:	f000 fbb4 	bl	800c178 <_Bfree>
 800ba10:	2d00      	cmp	r5, #0
 800ba12:	d0dc      	beq.n	800b9ce <_dtoa_r+0x65e>
 800ba14:	b12f      	cbz	r7, 800ba22 <_dtoa_r+0x6b2>
 800ba16:	42af      	cmp	r7, r5
 800ba18:	d003      	beq.n	800ba22 <_dtoa_r+0x6b2>
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	4658      	mov	r0, fp
 800ba1e:	f000 fbab 	bl	800c178 <_Bfree>
 800ba22:	4629      	mov	r1, r5
 800ba24:	4658      	mov	r0, fp
 800ba26:	f000 fba7 	bl	800c178 <_Bfree>
 800ba2a:	e7d0      	b.n	800b9ce <_dtoa_r+0x65e>
 800ba2c:	9704      	str	r7, [sp, #16]
 800ba2e:	4633      	mov	r3, r6
 800ba30:	461e      	mov	r6, r3
 800ba32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba36:	2a39      	cmp	r2, #57	@ 0x39
 800ba38:	d107      	bne.n	800ba4a <_dtoa_r+0x6da>
 800ba3a:	459a      	cmp	sl, r3
 800ba3c:	d1f8      	bne.n	800ba30 <_dtoa_r+0x6c0>
 800ba3e:	9a04      	ldr	r2, [sp, #16]
 800ba40:	3201      	adds	r2, #1
 800ba42:	9204      	str	r2, [sp, #16]
 800ba44:	2230      	movs	r2, #48	@ 0x30
 800ba46:	f88a 2000 	strb.w	r2, [sl]
 800ba4a:	781a      	ldrb	r2, [r3, #0]
 800ba4c:	3201      	adds	r2, #1
 800ba4e:	701a      	strb	r2, [r3, #0]
 800ba50:	e7bd      	b.n	800b9ce <_dtoa_r+0x65e>
 800ba52:	4b7b      	ldr	r3, [pc, #492]	@ (800bc40 <_dtoa_r+0x8d0>)
 800ba54:	2200      	movs	r2, #0
 800ba56:	f7f4 fdcf 	bl	80005f8 <__aeabi_dmul>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	460d      	mov	r5, r1
 800ba62:	f7f5 f831 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f43f aebb 	beq.w	800b7e2 <_dtoa_r+0x472>
 800ba6c:	e6f0      	b.n	800b850 <_dtoa_r+0x4e0>
 800ba6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba70:	2a00      	cmp	r2, #0
 800ba72:	f000 80db 	beq.w	800bc2c <_dtoa_r+0x8bc>
 800ba76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba78:	2a01      	cmp	r2, #1
 800ba7a:	f300 80bf 	bgt.w	800bbfc <_dtoa_r+0x88c>
 800ba7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	f000 80b7 	beq.w	800bbf4 <_dtoa_r+0x884>
 800ba86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ba8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba8c:	4646      	mov	r6, r8
 800ba8e:	9a08      	ldr	r2, [sp, #32]
 800ba90:	2101      	movs	r1, #1
 800ba92:	441a      	add	r2, r3
 800ba94:	4658      	mov	r0, fp
 800ba96:	4498      	add	r8, r3
 800ba98:	9208      	str	r2, [sp, #32]
 800ba9a:	f000 fc6b 	bl	800c374 <__i2b>
 800ba9e:	4605      	mov	r5, r0
 800baa0:	b15e      	cbz	r6, 800baba <_dtoa_r+0x74a>
 800baa2:	9b08      	ldr	r3, [sp, #32]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	dd08      	ble.n	800baba <_dtoa_r+0x74a>
 800baa8:	42b3      	cmp	r3, r6
 800baaa:	9a08      	ldr	r2, [sp, #32]
 800baac:	bfa8      	it	ge
 800baae:	4633      	movge	r3, r6
 800bab0:	eba8 0803 	sub.w	r8, r8, r3
 800bab4:	1af6      	subs	r6, r6, r3
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	9308      	str	r3, [sp, #32]
 800baba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800babc:	b1f3      	cbz	r3, 800bafc <_dtoa_r+0x78c>
 800babe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 80b7 	beq.w	800bc34 <_dtoa_r+0x8c4>
 800bac6:	b18c      	cbz	r4, 800baec <_dtoa_r+0x77c>
 800bac8:	4629      	mov	r1, r5
 800baca:	4622      	mov	r2, r4
 800bacc:	4658      	mov	r0, fp
 800bace:	f000 fd11 	bl	800c4f4 <__pow5mult>
 800bad2:	464a      	mov	r2, r9
 800bad4:	4601      	mov	r1, r0
 800bad6:	4605      	mov	r5, r0
 800bad8:	4658      	mov	r0, fp
 800bada:	f000 fc61 	bl	800c3a0 <__multiply>
 800bade:	4649      	mov	r1, r9
 800bae0:	9004      	str	r0, [sp, #16]
 800bae2:	4658      	mov	r0, fp
 800bae4:	f000 fb48 	bl	800c178 <_Bfree>
 800bae8:	9b04      	ldr	r3, [sp, #16]
 800baea:	4699      	mov	r9, r3
 800baec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baee:	1b1a      	subs	r2, r3, r4
 800baf0:	d004      	beq.n	800bafc <_dtoa_r+0x78c>
 800baf2:	4649      	mov	r1, r9
 800baf4:	4658      	mov	r0, fp
 800baf6:	f000 fcfd 	bl	800c4f4 <__pow5mult>
 800bafa:	4681      	mov	r9, r0
 800bafc:	2101      	movs	r1, #1
 800bafe:	4658      	mov	r0, fp
 800bb00:	f000 fc38 	bl	800c374 <__i2b>
 800bb04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb06:	4604      	mov	r4, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f000 81cf 	beq.w	800beac <_dtoa_r+0xb3c>
 800bb0e:	461a      	mov	r2, r3
 800bb10:	4601      	mov	r1, r0
 800bb12:	4658      	mov	r0, fp
 800bb14:	f000 fcee 	bl	800c4f4 <__pow5mult>
 800bb18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	f300 8095 	bgt.w	800bc4c <_dtoa_r+0x8dc>
 800bb22:	9b02      	ldr	r3, [sp, #8]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f040 8087 	bne.w	800bc38 <_dtoa_r+0x8c8>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f040 8089 	bne.w	800bc48 <_dtoa_r+0x8d8>
 800bb36:	9b03      	ldr	r3, [sp, #12]
 800bb38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb3c:	0d1b      	lsrs	r3, r3, #20
 800bb3e:	051b      	lsls	r3, r3, #20
 800bb40:	b12b      	cbz	r3, 800bb4e <_dtoa_r+0x7de>
 800bb42:	9b08      	ldr	r3, [sp, #32]
 800bb44:	3301      	adds	r3, #1
 800bb46:	9308      	str	r3, [sp, #32]
 800bb48:	f108 0801 	add.w	r8, r8, #1
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 81b0 	beq.w	800beb8 <_dtoa_r+0xb48>
 800bb58:	6923      	ldr	r3, [r4, #16]
 800bb5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb5e:	6918      	ldr	r0, [r3, #16]
 800bb60:	f000 fbbc 	bl	800c2dc <__hi0bits>
 800bb64:	f1c0 0020 	rsb	r0, r0, #32
 800bb68:	9b08      	ldr	r3, [sp, #32]
 800bb6a:	4418      	add	r0, r3
 800bb6c:	f010 001f 	ands.w	r0, r0, #31
 800bb70:	d077      	beq.n	800bc62 <_dtoa_r+0x8f2>
 800bb72:	f1c0 0320 	rsb	r3, r0, #32
 800bb76:	2b04      	cmp	r3, #4
 800bb78:	dd6b      	ble.n	800bc52 <_dtoa_r+0x8e2>
 800bb7a:	9b08      	ldr	r3, [sp, #32]
 800bb7c:	f1c0 001c 	rsb	r0, r0, #28
 800bb80:	4403      	add	r3, r0
 800bb82:	4480      	add	r8, r0
 800bb84:	4406      	add	r6, r0
 800bb86:	9308      	str	r3, [sp, #32]
 800bb88:	f1b8 0f00 	cmp.w	r8, #0
 800bb8c:	dd05      	ble.n	800bb9a <_dtoa_r+0x82a>
 800bb8e:	4649      	mov	r1, r9
 800bb90:	4642      	mov	r2, r8
 800bb92:	4658      	mov	r0, fp
 800bb94:	f000 fd08 	bl	800c5a8 <__lshift>
 800bb98:	4681      	mov	r9, r0
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	dd05      	ble.n	800bbac <_dtoa_r+0x83c>
 800bba0:	4621      	mov	r1, r4
 800bba2:	461a      	mov	r2, r3
 800bba4:	4658      	mov	r0, fp
 800bba6:	f000 fcff 	bl	800c5a8 <__lshift>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d059      	beq.n	800bc66 <_dtoa_r+0x8f6>
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4648      	mov	r0, r9
 800bbb6:	f000 fd63 	bl	800c680 <__mcmp>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	da53      	bge.n	800bc66 <_dtoa_r+0x8f6>
 800bbbe:	1e7b      	subs	r3, r7, #1
 800bbc0:	9304      	str	r3, [sp, #16]
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	220a      	movs	r2, #10
 800bbc8:	4658      	mov	r0, fp
 800bbca:	f000 faf7 	bl	800c1bc <__multadd>
 800bbce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd0:	4681      	mov	r9, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 8172 	beq.w	800bebc <_dtoa_r+0xb4c>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	4629      	mov	r1, r5
 800bbdc:	220a      	movs	r2, #10
 800bbde:	4658      	mov	r0, fp
 800bbe0:	f000 faec 	bl	800c1bc <__multadd>
 800bbe4:	9b00      	ldr	r3, [sp, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	4605      	mov	r5, r0
 800bbea:	dc67      	bgt.n	800bcbc <_dtoa_r+0x94c>
 800bbec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbee:	2b02      	cmp	r3, #2
 800bbf0:	dc41      	bgt.n	800bc76 <_dtoa_r+0x906>
 800bbf2:	e063      	b.n	800bcbc <_dtoa_r+0x94c>
 800bbf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bbf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bbfa:	e746      	b.n	800ba8a <_dtoa_r+0x71a>
 800bbfc:	9b07      	ldr	r3, [sp, #28]
 800bbfe:	1e5c      	subs	r4, r3, #1
 800bc00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc02:	42a3      	cmp	r3, r4
 800bc04:	bfbf      	itttt	lt
 800bc06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bc0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bc0c:	1ae3      	sublt	r3, r4, r3
 800bc0e:	bfb4      	ite	lt
 800bc10:	18d2      	addlt	r2, r2, r3
 800bc12:	1b1c      	subge	r4, r3, r4
 800bc14:	9b07      	ldr	r3, [sp, #28]
 800bc16:	bfbc      	itt	lt
 800bc18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bc1a:	2400      	movlt	r4, #0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	bfb5      	itete	lt
 800bc20:	eba8 0603 	sublt.w	r6, r8, r3
 800bc24:	9b07      	ldrge	r3, [sp, #28]
 800bc26:	2300      	movlt	r3, #0
 800bc28:	4646      	movge	r6, r8
 800bc2a:	e730      	b.n	800ba8e <_dtoa_r+0x71e>
 800bc2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bc30:	4646      	mov	r6, r8
 800bc32:	e735      	b.n	800baa0 <_dtoa_r+0x730>
 800bc34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc36:	e75c      	b.n	800baf2 <_dtoa_r+0x782>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	e788      	b.n	800bb4e <_dtoa_r+0x7de>
 800bc3c:	3fe00000 	.word	0x3fe00000
 800bc40:	40240000 	.word	0x40240000
 800bc44:	40140000 	.word	0x40140000
 800bc48:	9b02      	ldr	r3, [sp, #8]
 800bc4a:	e780      	b.n	800bb4e <_dtoa_r+0x7de>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc50:	e782      	b.n	800bb58 <_dtoa_r+0x7e8>
 800bc52:	d099      	beq.n	800bb88 <_dtoa_r+0x818>
 800bc54:	9a08      	ldr	r2, [sp, #32]
 800bc56:	331c      	adds	r3, #28
 800bc58:	441a      	add	r2, r3
 800bc5a:	4498      	add	r8, r3
 800bc5c:	441e      	add	r6, r3
 800bc5e:	9208      	str	r2, [sp, #32]
 800bc60:	e792      	b.n	800bb88 <_dtoa_r+0x818>
 800bc62:	4603      	mov	r3, r0
 800bc64:	e7f6      	b.n	800bc54 <_dtoa_r+0x8e4>
 800bc66:	9b07      	ldr	r3, [sp, #28]
 800bc68:	9704      	str	r7, [sp, #16]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	dc20      	bgt.n	800bcb0 <_dtoa_r+0x940>
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	dd1e      	ble.n	800bcb4 <_dtoa_r+0x944>
 800bc76:	9b00      	ldr	r3, [sp, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f47f aec0 	bne.w	800b9fe <_dtoa_r+0x68e>
 800bc7e:	4621      	mov	r1, r4
 800bc80:	2205      	movs	r2, #5
 800bc82:	4658      	mov	r0, fp
 800bc84:	f000 fa9a 	bl	800c1bc <__multadd>
 800bc88:	4601      	mov	r1, r0
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	4648      	mov	r0, r9
 800bc8e:	f000 fcf7 	bl	800c680 <__mcmp>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	f77f aeb3 	ble.w	800b9fe <_dtoa_r+0x68e>
 800bc98:	4656      	mov	r6, sl
 800bc9a:	2331      	movs	r3, #49	@ 0x31
 800bc9c:	f806 3b01 	strb.w	r3, [r6], #1
 800bca0:	9b04      	ldr	r3, [sp, #16]
 800bca2:	3301      	adds	r3, #1
 800bca4:	9304      	str	r3, [sp, #16]
 800bca6:	e6ae      	b.n	800ba06 <_dtoa_r+0x696>
 800bca8:	9c07      	ldr	r4, [sp, #28]
 800bcaa:	9704      	str	r7, [sp, #16]
 800bcac:	4625      	mov	r5, r4
 800bcae:	e7f3      	b.n	800bc98 <_dtoa_r+0x928>
 800bcb0:	9b07      	ldr	r3, [sp, #28]
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 8104 	beq.w	800bec4 <_dtoa_r+0xb54>
 800bcbc:	2e00      	cmp	r6, #0
 800bcbe:	dd05      	ble.n	800bccc <_dtoa_r+0x95c>
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4632      	mov	r2, r6
 800bcc4:	4658      	mov	r0, fp
 800bcc6:	f000 fc6f 	bl	800c5a8 <__lshift>
 800bcca:	4605      	mov	r5, r0
 800bccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d05a      	beq.n	800bd88 <_dtoa_r+0xa18>
 800bcd2:	6869      	ldr	r1, [r5, #4]
 800bcd4:	4658      	mov	r0, fp
 800bcd6:	f000 fa0f 	bl	800c0f8 <_Balloc>
 800bcda:	4606      	mov	r6, r0
 800bcdc:	b928      	cbnz	r0, 800bcea <_dtoa_r+0x97a>
 800bcde:	4b84      	ldr	r3, [pc, #528]	@ (800bef0 <_dtoa_r+0xb80>)
 800bce0:	4602      	mov	r2, r0
 800bce2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bce6:	f7ff bb5a 	b.w	800b39e <_dtoa_r+0x2e>
 800bcea:	692a      	ldr	r2, [r5, #16]
 800bcec:	3202      	adds	r2, #2
 800bcee:	0092      	lsls	r2, r2, #2
 800bcf0:	f105 010c 	add.w	r1, r5, #12
 800bcf4:	300c      	adds	r0, #12
 800bcf6:	f001 fff9 	bl	800dcec <memcpy>
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4658      	mov	r0, fp
 800bd00:	f000 fc52 	bl	800c5a8 <__lshift>
 800bd04:	f10a 0301 	add.w	r3, sl, #1
 800bd08:	9307      	str	r3, [sp, #28]
 800bd0a:	9b00      	ldr	r3, [sp, #0]
 800bd0c:	4453      	add	r3, sl
 800bd0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd10:	9b02      	ldr	r3, [sp, #8]
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	462f      	mov	r7, r5
 800bd18:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	9b07      	ldr	r3, [sp, #28]
 800bd1e:	4621      	mov	r1, r4
 800bd20:	3b01      	subs	r3, #1
 800bd22:	4648      	mov	r0, r9
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	f7ff fa99 	bl	800b25c <quorem>
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	9002      	str	r0, [sp, #8]
 800bd2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd32:	4648      	mov	r0, r9
 800bd34:	f000 fca4 	bl	800c680 <__mcmp>
 800bd38:	462a      	mov	r2, r5
 800bd3a:	9008      	str	r0, [sp, #32]
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4658      	mov	r0, fp
 800bd40:	f000 fcba 	bl	800c6b8 <__mdiff>
 800bd44:	68c2      	ldr	r2, [r0, #12]
 800bd46:	4606      	mov	r6, r0
 800bd48:	bb02      	cbnz	r2, 800bd8c <_dtoa_r+0xa1c>
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	4648      	mov	r0, r9
 800bd4e:	f000 fc97 	bl	800c680 <__mcmp>
 800bd52:	4602      	mov	r2, r0
 800bd54:	4631      	mov	r1, r6
 800bd56:	4658      	mov	r0, fp
 800bd58:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd5a:	f000 fa0d 	bl	800c178 <_Bfree>
 800bd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd62:	9e07      	ldr	r6, [sp, #28]
 800bd64:	ea43 0102 	orr.w	r1, r3, r2
 800bd68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd6a:	4319      	orrs	r1, r3
 800bd6c:	d110      	bne.n	800bd90 <_dtoa_r+0xa20>
 800bd6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd72:	d029      	beq.n	800bdc8 <_dtoa_r+0xa58>
 800bd74:	9b08      	ldr	r3, [sp, #32]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	dd02      	ble.n	800bd80 <_dtoa_r+0xa10>
 800bd7a:	9b02      	ldr	r3, [sp, #8]
 800bd7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bd80:	9b00      	ldr	r3, [sp, #0]
 800bd82:	f883 8000 	strb.w	r8, [r3]
 800bd86:	e63f      	b.n	800ba08 <_dtoa_r+0x698>
 800bd88:	4628      	mov	r0, r5
 800bd8a:	e7bb      	b.n	800bd04 <_dtoa_r+0x994>
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	e7e1      	b.n	800bd54 <_dtoa_r+0x9e4>
 800bd90:	9b08      	ldr	r3, [sp, #32]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db04      	blt.n	800bda0 <_dtoa_r+0xa30>
 800bd96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd98:	430b      	orrs	r3, r1
 800bd9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	d120      	bne.n	800bde2 <_dtoa_r+0xa72>
 800bda0:	2a00      	cmp	r2, #0
 800bda2:	dded      	ble.n	800bd80 <_dtoa_r+0xa10>
 800bda4:	4649      	mov	r1, r9
 800bda6:	2201      	movs	r2, #1
 800bda8:	4658      	mov	r0, fp
 800bdaa:	f000 fbfd 	bl	800c5a8 <__lshift>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	4681      	mov	r9, r0
 800bdb2:	f000 fc65 	bl	800c680 <__mcmp>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	dc03      	bgt.n	800bdc2 <_dtoa_r+0xa52>
 800bdba:	d1e1      	bne.n	800bd80 <_dtoa_r+0xa10>
 800bdbc:	f018 0f01 	tst.w	r8, #1
 800bdc0:	d0de      	beq.n	800bd80 <_dtoa_r+0xa10>
 800bdc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdc6:	d1d8      	bne.n	800bd7a <_dtoa_r+0xa0a>
 800bdc8:	9a00      	ldr	r2, [sp, #0]
 800bdca:	2339      	movs	r3, #57	@ 0x39
 800bdcc:	7013      	strb	r3, [r2, #0]
 800bdce:	4633      	mov	r3, r6
 800bdd0:	461e      	mov	r6, r3
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bdd8:	2a39      	cmp	r2, #57	@ 0x39
 800bdda:	d052      	beq.n	800be82 <_dtoa_r+0xb12>
 800bddc:	3201      	adds	r2, #1
 800bdde:	701a      	strb	r2, [r3, #0]
 800bde0:	e612      	b.n	800ba08 <_dtoa_r+0x698>
 800bde2:	2a00      	cmp	r2, #0
 800bde4:	dd07      	ble.n	800bdf6 <_dtoa_r+0xa86>
 800bde6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdea:	d0ed      	beq.n	800bdc8 <_dtoa_r+0xa58>
 800bdec:	9a00      	ldr	r2, [sp, #0]
 800bdee:	f108 0301 	add.w	r3, r8, #1
 800bdf2:	7013      	strb	r3, [r2, #0]
 800bdf4:	e608      	b.n	800ba08 <_dtoa_r+0x698>
 800bdf6:	9b07      	ldr	r3, [sp, #28]
 800bdf8:	9a07      	ldr	r2, [sp, #28]
 800bdfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bdfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be00:	4293      	cmp	r3, r2
 800be02:	d028      	beq.n	800be56 <_dtoa_r+0xae6>
 800be04:	4649      	mov	r1, r9
 800be06:	2300      	movs	r3, #0
 800be08:	220a      	movs	r2, #10
 800be0a:	4658      	mov	r0, fp
 800be0c:	f000 f9d6 	bl	800c1bc <__multadd>
 800be10:	42af      	cmp	r7, r5
 800be12:	4681      	mov	r9, r0
 800be14:	f04f 0300 	mov.w	r3, #0
 800be18:	f04f 020a 	mov.w	r2, #10
 800be1c:	4639      	mov	r1, r7
 800be1e:	4658      	mov	r0, fp
 800be20:	d107      	bne.n	800be32 <_dtoa_r+0xac2>
 800be22:	f000 f9cb 	bl	800c1bc <__multadd>
 800be26:	4607      	mov	r7, r0
 800be28:	4605      	mov	r5, r0
 800be2a:	9b07      	ldr	r3, [sp, #28]
 800be2c:	3301      	adds	r3, #1
 800be2e:	9307      	str	r3, [sp, #28]
 800be30:	e774      	b.n	800bd1c <_dtoa_r+0x9ac>
 800be32:	f000 f9c3 	bl	800c1bc <__multadd>
 800be36:	4629      	mov	r1, r5
 800be38:	4607      	mov	r7, r0
 800be3a:	2300      	movs	r3, #0
 800be3c:	220a      	movs	r2, #10
 800be3e:	4658      	mov	r0, fp
 800be40:	f000 f9bc 	bl	800c1bc <__multadd>
 800be44:	4605      	mov	r5, r0
 800be46:	e7f0      	b.n	800be2a <_dtoa_r+0xaba>
 800be48:	9b00      	ldr	r3, [sp, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	bfcc      	ite	gt
 800be4e:	461e      	movgt	r6, r3
 800be50:	2601      	movle	r6, #1
 800be52:	4456      	add	r6, sl
 800be54:	2700      	movs	r7, #0
 800be56:	4649      	mov	r1, r9
 800be58:	2201      	movs	r2, #1
 800be5a:	4658      	mov	r0, fp
 800be5c:	f000 fba4 	bl	800c5a8 <__lshift>
 800be60:	4621      	mov	r1, r4
 800be62:	4681      	mov	r9, r0
 800be64:	f000 fc0c 	bl	800c680 <__mcmp>
 800be68:	2800      	cmp	r0, #0
 800be6a:	dcb0      	bgt.n	800bdce <_dtoa_r+0xa5e>
 800be6c:	d102      	bne.n	800be74 <_dtoa_r+0xb04>
 800be6e:	f018 0f01 	tst.w	r8, #1
 800be72:	d1ac      	bne.n	800bdce <_dtoa_r+0xa5e>
 800be74:	4633      	mov	r3, r6
 800be76:	461e      	mov	r6, r3
 800be78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be7c:	2a30      	cmp	r2, #48	@ 0x30
 800be7e:	d0fa      	beq.n	800be76 <_dtoa_r+0xb06>
 800be80:	e5c2      	b.n	800ba08 <_dtoa_r+0x698>
 800be82:	459a      	cmp	sl, r3
 800be84:	d1a4      	bne.n	800bdd0 <_dtoa_r+0xa60>
 800be86:	9b04      	ldr	r3, [sp, #16]
 800be88:	3301      	adds	r3, #1
 800be8a:	9304      	str	r3, [sp, #16]
 800be8c:	2331      	movs	r3, #49	@ 0x31
 800be8e:	f88a 3000 	strb.w	r3, [sl]
 800be92:	e5b9      	b.n	800ba08 <_dtoa_r+0x698>
 800be94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bef4 <_dtoa_r+0xb84>
 800be9a:	b11b      	cbz	r3, 800bea4 <_dtoa_r+0xb34>
 800be9c:	f10a 0308 	add.w	r3, sl, #8
 800bea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bea2:	6013      	str	r3, [r2, #0]
 800bea4:	4650      	mov	r0, sl
 800bea6:	b019      	add	sp, #100	@ 0x64
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beae:	2b01      	cmp	r3, #1
 800beb0:	f77f ae37 	ble.w	800bb22 <_dtoa_r+0x7b2>
 800beb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800beb8:	2001      	movs	r0, #1
 800beba:	e655      	b.n	800bb68 <_dtoa_r+0x7f8>
 800bebc:	9b00      	ldr	r3, [sp, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f77f aed6 	ble.w	800bc70 <_dtoa_r+0x900>
 800bec4:	4656      	mov	r6, sl
 800bec6:	4621      	mov	r1, r4
 800bec8:	4648      	mov	r0, r9
 800beca:	f7ff f9c7 	bl	800b25c <quorem>
 800bece:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bed2:	f806 8b01 	strb.w	r8, [r6], #1
 800bed6:	9b00      	ldr	r3, [sp, #0]
 800bed8:	eba6 020a 	sub.w	r2, r6, sl
 800bedc:	4293      	cmp	r3, r2
 800bede:	ddb3      	ble.n	800be48 <_dtoa_r+0xad8>
 800bee0:	4649      	mov	r1, r9
 800bee2:	2300      	movs	r3, #0
 800bee4:	220a      	movs	r2, #10
 800bee6:	4658      	mov	r0, fp
 800bee8:	f000 f968 	bl	800c1bc <__multadd>
 800beec:	4681      	mov	r9, r0
 800beee:	e7ea      	b.n	800bec6 <_dtoa_r+0xb56>
 800bef0:	0800ea51 	.word	0x0800ea51
 800bef4:	0800e9d5 	.word	0x0800e9d5

0800bef8 <_free_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4605      	mov	r5, r0
 800befc:	2900      	cmp	r1, #0
 800befe:	d041      	beq.n	800bf84 <_free_r+0x8c>
 800bf00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf04:	1f0c      	subs	r4, r1, #4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	bfb8      	it	lt
 800bf0a:	18e4      	addlt	r4, r4, r3
 800bf0c:	f000 f8e8 	bl	800c0e0 <__malloc_lock>
 800bf10:	4a1d      	ldr	r2, [pc, #116]	@ (800bf88 <_free_r+0x90>)
 800bf12:	6813      	ldr	r3, [r2, #0]
 800bf14:	b933      	cbnz	r3, 800bf24 <_free_r+0x2c>
 800bf16:	6063      	str	r3, [r4, #4]
 800bf18:	6014      	str	r4, [r2, #0]
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf20:	f000 b8e4 	b.w	800c0ec <__malloc_unlock>
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	d908      	bls.n	800bf3a <_free_r+0x42>
 800bf28:	6820      	ldr	r0, [r4, #0]
 800bf2a:	1821      	adds	r1, r4, r0
 800bf2c:	428b      	cmp	r3, r1
 800bf2e:	bf01      	itttt	eq
 800bf30:	6819      	ldreq	r1, [r3, #0]
 800bf32:	685b      	ldreq	r3, [r3, #4]
 800bf34:	1809      	addeq	r1, r1, r0
 800bf36:	6021      	streq	r1, [r4, #0]
 800bf38:	e7ed      	b.n	800bf16 <_free_r+0x1e>
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	b10b      	cbz	r3, 800bf44 <_free_r+0x4c>
 800bf40:	42a3      	cmp	r3, r4
 800bf42:	d9fa      	bls.n	800bf3a <_free_r+0x42>
 800bf44:	6811      	ldr	r1, [r2, #0]
 800bf46:	1850      	adds	r0, r2, r1
 800bf48:	42a0      	cmp	r0, r4
 800bf4a:	d10b      	bne.n	800bf64 <_free_r+0x6c>
 800bf4c:	6820      	ldr	r0, [r4, #0]
 800bf4e:	4401      	add	r1, r0
 800bf50:	1850      	adds	r0, r2, r1
 800bf52:	4283      	cmp	r3, r0
 800bf54:	6011      	str	r1, [r2, #0]
 800bf56:	d1e0      	bne.n	800bf1a <_free_r+0x22>
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	6053      	str	r3, [r2, #4]
 800bf5e:	4408      	add	r0, r1
 800bf60:	6010      	str	r0, [r2, #0]
 800bf62:	e7da      	b.n	800bf1a <_free_r+0x22>
 800bf64:	d902      	bls.n	800bf6c <_free_r+0x74>
 800bf66:	230c      	movs	r3, #12
 800bf68:	602b      	str	r3, [r5, #0]
 800bf6a:	e7d6      	b.n	800bf1a <_free_r+0x22>
 800bf6c:	6820      	ldr	r0, [r4, #0]
 800bf6e:	1821      	adds	r1, r4, r0
 800bf70:	428b      	cmp	r3, r1
 800bf72:	bf04      	itt	eq
 800bf74:	6819      	ldreq	r1, [r3, #0]
 800bf76:	685b      	ldreq	r3, [r3, #4]
 800bf78:	6063      	str	r3, [r4, #4]
 800bf7a:	bf04      	itt	eq
 800bf7c:	1809      	addeq	r1, r1, r0
 800bf7e:	6021      	streq	r1, [r4, #0]
 800bf80:	6054      	str	r4, [r2, #4]
 800bf82:	e7ca      	b.n	800bf1a <_free_r+0x22>
 800bf84:	bd38      	pop	{r3, r4, r5, pc}
 800bf86:	bf00      	nop
 800bf88:	20000d50 	.word	0x20000d50

0800bf8c <malloc>:
 800bf8c:	4b02      	ldr	r3, [pc, #8]	@ (800bf98 <malloc+0xc>)
 800bf8e:	4601      	mov	r1, r0
 800bf90:	6818      	ldr	r0, [r3, #0]
 800bf92:	f000 b825 	b.w	800bfe0 <_malloc_r>
 800bf96:	bf00      	nop
 800bf98:	20000170 	.word	0x20000170

0800bf9c <sbrk_aligned>:
 800bf9c:	b570      	push	{r4, r5, r6, lr}
 800bf9e:	4e0f      	ldr	r6, [pc, #60]	@ (800bfdc <sbrk_aligned+0x40>)
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	6831      	ldr	r1, [r6, #0]
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	b911      	cbnz	r1, 800bfae <sbrk_aligned+0x12>
 800bfa8:	f001 fe90 	bl	800dccc <_sbrk_r>
 800bfac:	6030      	str	r0, [r6, #0]
 800bfae:	4621      	mov	r1, r4
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f001 fe8b 	bl	800dccc <_sbrk_r>
 800bfb6:	1c43      	adds	r3, r0, #1
 800bfb8:	d103      	bne.n	800bfc2 <sbrk_aligned+0x26>
 800bfba:	f04f 34ff 	mov.w	r4, #4294967295
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	bd70      	pop	{r4, r5, r6, pc}
 800bfc2:	1cc4      	adds	r4, r0, #3
 800bfc4:	f024 0403 	bic.w	r4, r4, #3
 800bfc8:	42a0      	cmp	r0, r4
 800bfca:	d0f8      	beq.n	800bfbe <sbrk_aligned+0x22>
 800bfcc:	1a21      	subs	r1, r4, r0
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f001 fe7c 	bl	800dccc <_sbrk_r>
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	d1f2      	bne.n	800bfbe <sbrk_aligned+0x22>
 800bfd8:	e7ef      	b.n	800bfba <sbrk_aligned+0x1e>
 800bfda:	bf00      	nop
 800bfdc:	20000d4c 	.word	0x20000d4c

0800bfe0 <_malloc_r>:
 800bfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe4:	1ccd      	adds	r5, r1, #3
 800bfe6:	f025 0503 	bic.w	r5, r5, #3
 800bfea:	3508      	adds	r5, #8
 800bfec:	2d0c      	cmp	r5, #12
 800bfee:	bf38      	it	cc
 800bff0:	250c      	movcc	r5, #12
 800bff2:	2d00      	cmp	r5, #0
 800bff4:	4606      	mov	r6, r0
 800bff6:	db01      	blt.n	800bffc <_malloc_r+0x1c>
 800bff8:	42a9      	cmp	r1, r5
 800bffa:	d904      	bls.n	800c006 <_malloc_r+0x26>
 800bffc:	230c      	movs	r3, #12
 800bffe:	6033      	str	r3, [r6, #0]
 800c000:	2000      	movs	r0, #0
 800c002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c006:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c0dc <_malloc_r+0xfc>
 800c00a:	f000 f869 	bl	800c0e0 <__malloc_lock>
 800c00e:	f8d8 3000 	ldr.w	r3, [r8]
 800c012:	461c      	mov	r4, r3
 800c014:	bb44      	cbnz	r4, 800c068 <_malloc_r+0x88>
 800c016:	4629      	mov	r1, r5
 800c018:	4630      	mov	r0, r6
 800c01a:	f7ff ffbf 	bl	800bf9c <sbrk_aligned>
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	4604      	mov	r4, r0
 800c022:	d158      	bne.n	800c0d6 <_malloc_r+0xf6>
 800c024:	f8d8 4000 	ldr.w	r4, [r8]
 800c028:	4627      	mov	r7, r4
 800c02a:	2f00      	cmp	r7, #0
 800c02c:	d143      	bne.n	800c0b6 <_malloc_r+0xd6>
 800c02e:	2c00      	cmp	r4, #0
 800c030:	d04b      	beq.n	800c0ca <_malloc_r+0xea>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	4639      	mov	r1, r7
 800c036:	4630      	mov	r0, r6
 800c038:	eb04 0903 	add.w	r9, r4, r3
 800c03c:	f001 fe46 	bl	800dccc <_sbrk_r>
 800c040:	4581      	cmp	r9, r0
 800c042:	d142      	bne.n	800c0ca <_malloc_r+0xea>
 800c044:	6821      	ldr	r1, [r4, #0]
 800c046:	1a6d      	subs	r5, r5, r1
 800c048:	4629      	mov	r1, r5
 800c04a:	4630      	mov	r0, r6
 800c04c:	f7ff ffa6 	bl	800bf9c <sbrk_aligned>
 800c050:	3001      	adds	r0, #1
 800c052:	d03a      	beq.n	800c0ca <_malloc_r+0xea>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	442b      	add	r3, r5
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	f8d8 3000 	ldr.w	r3, [r8]
 800c05e:	685a      	ldr	r2, [r3, #4]
 800c060:	bb62      	cbnz	r2, 800c0bc <_malloc_r+0xdc>
 800c062:	f8c8 7000 	str.w	r7, [r8]
 800c066:	e00f      	b.n	800c088 <_malloc_r+0xa8>
 800c068:	6822      	ldr	r2, [r4, #0]
 800c06a:	1b52      	subs	r2, r2, r5
 800c06c:	d420      	bmi.n	800c0b0 <_malloc_r+0xd0>
 800c06e:	2a0b      	cmp	r2, #11
 800c070:	d917      	bls.n	800c0a2 <_malloc_r+0xc2>
 800c072:	1961      	adds	r1, r4, r5
 800c074:	42a3      	cmp	r3, r4
 800c076:	6025      	str	r5, [r4, #0]
 800c078:	bf18      	it	ne
 800c07a:	6059      	strne	r1, [r3, #4]
 800c07c:	6863      	ldr	r3, [r4, #4]
 800c07e:	bf08      	it	eq
 800c080:	f8c8 1000 	streq.w	r1, [r8]
 800c084:	5162      	str	r2, [r4, r5]
 800c086:	604b      	str	r3, [r1, #4]
 800c088:	4630      	mov	r0, r6
 800c08a:	f000 f82f 	bl	800c0ec <__malloc_unlock>
 800c08e:	f104 000b 	add.w	r0, r4, #11
 800c092:	1d23      	adds	r3, r4, #4
 800c094:	f020 0007 	bic.w	r0, r0, #7
 800c098:	1ac2      	subs	r2, r0, r3
 800c09a:	bf1c      	itt	ne
 800c09c:	1a1b      	subne	r3, r3, r0
 800c09e:	50a3      	strne	r3, [r4, r2]
 800c0a0:	e7af      	b.n	800c002 <_malloc_r+0x22>
 800c0a2:	6862      	ldr	r2, [r4, #4]
 800c0a4:	42a3      	cmp	r3, r4
 800c0a6:	bf0c      	ite	eq
 800c0a8:	f8c8 2000 	streq.w	r2, [r8]
 800c0ac:	605a      	strne	r2, [r3, #4]
 800c0ae:	e7eb      	b.n	800c088 <_malloc_r+0xa8>
 800c0b0:	4623      	mov	r3, r4
 800c0b2:	6864      	ldr	r4, [r4, #4]
 800c0b4:	e7ae      	b.n	800c014 <_malloc_r+0x34>
 800c0b6:	463c      	mov	r4, r7
 800c0b8:	687f      	ldr	r7, [r7, #4]
 800c0ba:	e7b6      	b.n	800c02a <_malloc_r+0x4a>
 800c0bc:	461a      	mov	r2, r3
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	42a3      	cmp	r3, r4
 800c0c2:	d1fb      	bne.n	800c0bc <_malloc_r+0xdc>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6053      	str	r3, [r2, #4]
 800c0c8:	e7de      	b.n	800c088 <_malloc_r+0xa8>
 800c0ca:	230c      	movs	r3, #12
 800c0cc:	6033      	str	r3, [r6, #0]
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f000 f80c 	bl	800c0ec <__malloc_unlock>
 800c0d4:	e794      	b.n	800c000 <_malloc_r+0x20>
 800c0d6:	6005      	str	r5, [r0, #0]
 800c0d8:	e7d6      	b.n	800c088 <_malloc_r+0xa8>
 800c0da:	bf00      	nop
 800c0dc:	20000d50 	.word	0x20000d50

0800c0e0 <__malloc_lock>:
 800c0e0:	4801      	ldr	r0, [pc, #4]	@ (800c0e8 <__malloc_lock+0x8>)
 800c0e2:	f7ff b8b2 	b.w	800b24a <__retarget_lock_acquire_recursive>
 800c0e6:	bf00      	nop
 800c0e8:	20000d48 	.word	0x20000d48

0800c0ec <__malloc_unlock>:
 800c0ec:	4801      	ldr	r0, [pc, #4]	@ (800c0f4 <__malloc_unlock+0x8>)
 800c0ee:	f7ff b8ad 	b.w	800b24c <__retarget_lock_release_recursive>
 800c0f2:	bf00      	nop
 800c0f4:	20000d48 	.word	0x20000d48

0800c0f8 <_Balloc>:
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	69c6      	ldr	r6, [r0, #28]
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	460d      	mov	r5, r1
 800c100:	b976      	cbnz	r6, 800c120 <_Balloc+0x28>
 800c102:	2010      	movs	r0, #16
 800c104:	f7ff ff42 	bl	800bf8c <malloc>
 800c108:	4602      	mov	r2, r0
 800c10a:	61e0      	str	r0, [r4, #28]
 800c10c:	b920      	cbnz	r0, 800c118 <_Balloc+0x20>
 800c10e:	4b18      	ldr	r3, [pc, #96]	@ (800c170 <_Balloc+0x78>)
 800c110:	4818      	ldr	r0, [pc, #96]	@ (800c174 <_Balloc+0x7c>)
 800c112:	216b      	movs	r1, #107	@ 0x6b
 800c114:	f001 fe00 	bl	800dd18 <__assert_func>
 800c118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c11c:	6006      	str	r6, [r0, #0]
 800c11e:	60c6      	str	r6, [r0, #12]
 800c120:	69e6      	ldr	r6, [r4, #28]
 800c122:	68f3      	ldr	r3, [r6, #12]
 800c124:	b183      	cbz	r3, 800c148 <_Balloc+0x50>
 800c126:	69e3      	ldr	r3, [r4, #28]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c12e:	b9b8      	cbnz	r0, 800c160 <_Balloc+0x68>
 800c130:	2101      	movs	r1, #1
 800c132:	fa01 f605 	lsl.w	r6, r1, r5
 800c136:	1d72      	adds	r2, r6, #5
 800c138:	0092      	lsls	r2, r2, #2
 800c13a:	4620      	mov	r0, r4
 800c13c:	f001 fe0a 	bl	800dd54 <_calloc_r>
 800c140:	b160      	cbz	r0, 800c15c <_Balloc+0x64>
 800c142:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c146:	e00e      	b.n	800c166 <_Balloc+0x6e>
 800c148:	2221      	movs	r2, #33	@ 0x21
 800c14a:	2104      	movs	r1, #4
 800c14c:	4620      	mov	r0, r4
 800c14e:	f001 fe01 	bl	800dd54 <_calloc_r>
 800c152:	69e3      	ldr	r3, [r4, #28]
 800c154:	60f0      	str	r0, [r6, #12]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1e4      	bne.n	800c126 <_Balloc+0x2e>
 800c15c:	2000      	movs	r0, #0
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
 800c160:	6802      	ldr	r2, [r0, #0]
 800c162:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c166:	2300      	movs	r3, #0
 800c168:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c16c:	e7f7      	b.n	800c15e <_Balloc+0x66>
 800c16e:	bf00      	nop
 800c170:	0800e9e2 	.word	0x0800e9e2
 800c174:	0800ea62 	.word	0x0800ea62

0800c178 <_Bfree>:
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	69c6      	ldr	r6, [r0, #28]
 800c17c:	4605      	mov	r5, r0
 800c17e:	460c      	mov	r4, r1
 800c180:	b976      	cbnz	r6, 800c1a0 <_Bfree+0x28>
 800c182:	2010      	movs	r0, #16
 800c184:	f7ff ff02 	bl	800bf8c <malloc>
 800c188:	4602      	mov	r2, r0
 800c18a:	61e8      	str	r0, [r5, #28]
 800c18c:	b920      	cbnz	r0, 800c198 <_Bfree+0x20>
 800c18e:	4b09      	ldr	r3, [pc, #36]	@ (800c1b4 <_Bfree+0x3c>)
 800c190:	4809      	ldr	r0, [pc, #36]	@ (800c1b8 <_Bfree+0x40>)
 800c192:	218f      	movs	r1, #143	@ 0x8f
 800c194:	f001 fdc0 	bl	800dd18 <__assert_func>
 800c198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c19c:	6006      	str	r6, [r0, #0]
 800c19e:	60c6      	str	r6, [r0, #12]
 800c1a0:	b13c      	cbz	r4, 800c1b2 <_Bfree+0x3a>
 800c1a2:	69eb      	ldr	r3, [r5, #28]
 800c1a4:	6862      	ldr	r2, [r4, #4]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1ac:	6021      	str	r1, [r4, #0]
 800c1ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1b2:	bd70      	pop	{r4, r5, r6, pc}
 800c1b4:	0800e9e2 	.word	0x0800e9e2
 800c1b8:	0800ea62 	.word	0x0800ea62

0800c1bc <__multadd>:
 800c1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c0:	690d      	ldr	r5, [r1, #16]
 800c1c2:	4607      	mov	r7, r0
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	461e      	mov	r6, r3
 800c1c8:	f101 0c14 	add.w	ip, r1, #20
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	f8dc 3000 	ldr.w	r3, [ip]
 800c1d2:	b299      	uxth	r1, r3
 800c1d4:	fb02 6101 	mla	r1, r2, r1, r6
 800c1d8:	0c1e      	lsrs	r6, r3, #16
 800c1da:	0c0b      	lsrs	r3, r1, #16
 800c1dc:	fb02 3306 	mla	r3, r2, r6, r3
 800c1e0:	b289      	uxth	r1, r1
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1e8:	4285      	cmp	r5, r0
 800c1ea:	f84c 1b04 	str.w	r1, [ip], #4
 800c1ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1f2:	dcec      	bgt.n	800c1ce <__multadd+0x12>
 800c1f4:	b30e      	cbz	r6, 800c23a <__multadd+0x7e>
 800c1f6:	68a3      	ldr	r3, [r4, #8]
 800c1f8:	42ab      	cmp	r3, r5
 800c1fa:	dc19      	bgt.n	800c230 <__multadd+0x74>
 800c1fc:	6861      	ldr	r1, [r4, #4]
 800c1fe:	4638      	mov	r0, r7
 800c200:	3101      	adds	r1, #1
 800c202:	f7ff ff79 	bl	800c0f8 <_Balloc>
 800c206:	4680      	mov	r8, r0
 800c208:	b928      	cbnz	r0, 800c216 <__multadd+0x5a>
 800c20a:	4602      	mov	r2, r0
 800c20c:	4b0c      	ldr	r3, [pc, #48]	@ (800c240 <__multadd+0x84>)
 800c20e:	480d      	ldr	r0, [pc, #52]	@ (800c244 <__multadd+0x88>)
 800c210:	21ba      	movs	r1, #186	@ 0xba
 800c212:	f001 fd81 	bl	800dd18 <__assert_func>
 800c216:	6922      	ldr	r2, [r4, #16]
 800c218:	3202      	adds	r2, #2
 800c21a:	f104 010c 	add.w	r1, r4, #12
 800c21e:	0092      	lsls	r2, r2, #2
 800c220:	300c      	adds	r0, #12
 800c222:	f001 fd63 	bl	800dcec <memcpy>
 800c226:	4621      	mov	r1, r4
 800c228:	4638      	mov	r0, r7
 800c22a:	f7ff ffa5 	bl	800c178 <_Bfree>
 800c22e:	4644      	mov	r4, r8
 800c230:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c234:	3501      	adds	r5, #1
 800c236:	615e      	str	r6, [r3, #20]
 800c238:	6125      	str	r5, [r4, #16]
 800c23a:	4620      	mov	r0, r4
 800c23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c240:	0800ea51 	.word	0x0800ea51
 800c244:	0800ea62 	.word	0x0800ea62

0800c248 <__s2b>:
 800c248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c24c:	460c      	mov	r4, r1
 800c24e:	4615      	mov	r5, r2
 800c250:	461f      	mov	r7, r3
 800c252:	2209      	movs	r2, #9
 800c254:	3308      	adds	r3, #8
 800c256:	4606      	mov	r6, r0
 800c258:	fb93 f3f2 	sdiv	r3, r3, r2
 800c25c:	2100      	movs	r1, #0
 800c25e:	2201      	movs	r2, #1
 800c260:	429a      	cmp	r2, r3
 800c262:	db09      	blt.n	800c278 <__s2b+0x30>
 800c264:	4630      	mov	r0, r6
 800c266:	f7ff ff47 	bl	800c0f8 <_Balloc>
 800c26a:	b940      	cbnz	r0, 800c27e <__s2b+0x36>
 800c26c:	4602      	mov	r2, r0
 800c26e:	4b19      	ldr	r3, [pc, #100]	@ (800c2d4 <__s2b+0x8c>)
 800c270:	4819      	ldr	r0, [pc, #100]	@ (800c2d8 <__s2b+0x90>)
 800c272:	21d3      	movs	r1, #211	@ 0xd3
 800c274:	f001 fd50 	bl	800dd18 <__assert_func>
 800c278:	0052      	lsls	r2, r2, #1
 800c27a:	3101      	adds	r1, #1
 800c27c:	e7f0      	b.n	800c260 <__s2b+0x18>
 800c27e:	9b08      	ldr	r3, [sp, #32]
 800c280:	6143      	str	r3, [r0, #20]
 800c282:	2d09      	cmp	r5, #9
 800c284:	f04f 0301 	mov.w	r3, #1
 800c288:	6103      	str	r3, [r0, #16]
 800c28a:	dd16      	ble.n	800c2ba <__s2b+0x72>
 800c28c:	f104 0909 	add.w	r9, r4, #9
 800c290:	46c8      	mov	r8, r9
 800c292:	442c      	add	r4, r5
 800c294:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c298:	4601      	mov	r1, r0
 800c29a:	3b30      	subs	r3, #48	@ 0x30
 800c29c:	220a      	movs	r2, #10
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f7ff ff8c 	bl	800c1bc <__multadd>
 800c2a4:	45a0      	cmp	r8, r4
 800c2a6:	d1f5      	bne.n	800c294 <__s2b+0x4c>
 800c2a8:	f1a5 0408 	sub.w	r4, r5, #8
 800c2ac:	444c      	add	r4, r9
 800c2ae:	1b2d      	subs	r5, r5, r4
 800c2b0:	1963      	adds	r3, r4, r5
 800c2b2:	42bb      	cmp	r3, r7
 800c2b4:	db04      	blt.n	800c2c0 <__s2b+0x78>
 800c2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ba:	340a      	adds	r4, #10
 800c2bc:	2509      	movs	r5, #9
 800c2be:	e7f6      	b.n	800c2ae <__s2b+0x66>
 800c2c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2c4:	4601      	mov	r1, r0
 800c2c6:	3b30      	subs	r3, #48	@ 0x30
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	f7ff ff76 	bl	800c1bc <__multadd>
 800c2d0:	e7ee      	b.n	800c2b0 <__s2b+0x68>
 800c2d2:	bf00      	nop
 800c2d4:	0800ea51 	.word	0x0800ea51
 800c2d8:	0800ea62 	.word	0x0800ea62

0800c2dc <__hi0bits>:
 800c2dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	bf36      	itet	cc
 800c2e4:	0403      	lslcc	r3, r0, #16
 800c2e6:	2000      	movcs	r0, #0
 800c2e8:	2010      	movcc	r0, #16
 800c2ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2ee:	bf3c      	itt	cc
 800c2f0:	021b      	lslcc	r3, r3, #8
 800c2f2:	3008      	addcc	r0, #8
 800c2f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2f8:	bf3c      	itt	cc
 800c2fa:	011b      	lslcc	r3, r3, #4
 800c2fc:	3004      	addcc	r0, #4
 800c2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c302:	bf3c      	itt	cc
 800c304:	009b      	lslcc	r3, r3, #2
 800c306:	3002      	addcc	r0, #2
 800c308:	2b00      	cmp	r3, #0
 800c30a:	db05      	blt.n	800c318 <__hi0bits+0x3c>
 800c30c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c310:	f100 0001 	add.w	r0, r0, #1
 800c314:	bf08      	it	eq
 800c316:	2020      	moveq	r0, #32
 800c318:	4770      	bx	lr

0800c31a <__lo0bits>:
 800c31a:	6803      	ldr	r3, [r0, #0]
 800c31c:	4602      	mov	r2, r0
 800c31e:	f013 0007 	ands.w	r0, r3, #7
 800c322:	d00b      	beq.n	800c33c <__lo0bits+0x22>
 800c324:	07d9      	lsls	r1, r3, #31
 800c326:	d421      	bmi.n	800c36c <__lo0bits+0x52>
 800c328:	0798      	lsls	r0, r3, #30
 800c32a:	bf49      	itett	mi
 800c32c:	085b      	lsrmi	r3, r3, #1
 800c32e:	089b      	lsrpl	r3, r3, #2
 800c330:	2001      	movmi	r0, #1
 800c332:	6013      	strmi	r3, [r2, #0]
 800c334:	bf5c      	itt	pl
 800c336:	6013      	strpl	r3, [r2, #0]
 800c338:	2002      	movpl	r0, #2
 800c33a:	4770      	bx	lr
 800c33c:	b299      	uxth	r1, r3
 800c33e:	b909      	cbnz	r1, 800c344 <__lo0bits+0x2a>
 800c340:	0c1b      	lsrs	r3, r3, #16
 800c342:	2010      	movs	r0, #16
 800c344:	b2d9      	uxtb	r1, r3
 800c346:	b909      	cbnz	r1, 800c34c <__lo0bits+0x32>
 800c348:	3008      	adds	r0, #8
 800c34a:	0a1b      	lsrs	r3, r3, #8
 800c34c:	0719      	lsls	r1, r3, #28
 800c34e:	bf04      	itt	eq
 800c350:	091b      	lsreq	r3, r3, #4
 800c352:	3004      	addeq	r0, #4
 800c354:	0799      	lsls	r1, r3, #30
 800c356:	bf04      	itt	eq
 800c358:	089b      	lsreq	r3, r3, #2
 800c35a:	3002      	addeq	r0, #2
 800c35c:	07d9      	lsls	r1, r3, #31
 800c35e:	d403      	bmi.n	800c368 <__lo0bits+0x4e>
 800c360:	085b      	lsrs	r3, r3, #1
 800c362:	f100 0001 	add.w	r0, r0, #1
 800c366:	d003      	beq.n	800c370 <__lo0bits+0x56>
 800c368:	6013      	str	r3, [r2, #0]
 800c36a:	4770      	bx	lr
 800c36c:	2000      	movs	r0, #0
 800c36e:	4770      	bx	lr
 800c370:	2020      	movs	r0, #32
 800c372:	4770      	bx	lr

0800c374 <__i2b>:
 800c374:	b510      	push	{r4, lr}
 800c376:	460c      	mov	r4, r1
 800c378:	2101      	movs	r1, #1
 800c37a:	f7ff febd 	bl	800c0f8 <_Balloc>
 800c37e:	4602      	mov	r2, r0
 800c380:	b928      	cbnz	r0, 800c38e <__i2b+0x1a>
 800c382:	4b05      	ldr	r3, [pc, #20]	@ (800c398 <__i2b+0x24>)
 800c384:	4805      	ldr	r0, [pc, #20]	@ (800c39c <__i2b+0x28>)
 800c386:	f240 1145 	movw	r1, #325	@ 0x145
 800c38a:	f001 fcc5 	bl	800dd18 <__assert_func>
 800c38e:	2301      	movs	r3, #1
 800c390:	6144      	str	r4, [r0, #20]
 800c392:	6103      	str	r3, [r0, #16]
 800c394:	bd10      	pop	{r4, pc}
 800c396:	bf00      	nop
 800c398:	0800ea51 	.word	0x0800ea51
 800c39c:	0800ea62 	.word	0x0800ea62

0800c3a0 <__multiply>:
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	4614      	mov	r4, r2
 800c3a6:	690a      	ldr	r2, [r1, #16]
 800c3a8:	6923      	ldr	r3, [r4, #16]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	bfa8      	it	ge
 800c3ae:	4623      	movge	r3, r4
 800c3b0:	460f      	mov	r7, r1
 800c3b2:	bfa4      	itt	ge
 800c3b4:	460c      	movge	r4, r1
 800c3b6:	461f      	movge	r7, r3
 800c3b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c3bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c3c0:	68a3      	ldr	r3, [r4, #8]
 800c3c2:	6861      	ldr	r1, [r4, #4]
 800c3c4:	eb0a 0609 	add.w	r6, sl, r9
 800c3c8:	42b3      	cmp	r3, r6
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	bfb8      	it	lt
 800c3ce:	3101      	addlt	r1, #1
 800c3d0:	f7ff fe92 	bl	800c0f8 <_Balloc>
 800c3d4:	b930      	cbnz	r0, 800c3e4 <__multiply+0x44>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	4b44      	ldr	r3, [pc, #272]	@ (800c4ec <__multiply+0x14c>)
 800c3da:	4845      	ldr	r0, [pc, #276]	@ (800c4f0 <__multiply+0x150>)
 800c3dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c3e0:	f001 fc9a 	bl	800dd18 <__assert_func>
 800c3e4:	f100 0514 	add.w	r5, r0, #20
 800c3e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3ec:	462b      	mov	r3, r5
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4543      	cmp	r3, r8
 800c3f2:	d321      	bcc.n	800c438 <__multiply+0x98>
 800c3f4:	f107 0114 	add.w	r1, r7, #20
 800c3f8:	f104 0214 	add.w	r2, r4, #20
 800c3fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c400:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c404:	9302      	str	r3, [sp, #8]
 800c406:	1b13      	subs	r3, r2, r4
 800c408:	3b15      	subs	r3, #21
 800c40a:	f023 0303 	bic.w	r3, r3, #3
 800c40e:	3304      	adds	r3, #4
 800c410:	f104 0715 	add.w	r7, r4, #21
 800c414:	42ba      	cmp	r2, r7
 800c416:	bf38      	it	cc
 800c418:	2304      	movcc	r3, #4
 800c41a:	9301      	str	r3, [sp, #4]
 800c41c:	9b02      	ldr	r3, [sp, #8]
 800c41e:	9103      	str	r1, [sp, #12]
 800c420:	428b      	cmp	r3, r1
 800c422:	d80c      	bhi.n	800c43e <__multiply+0x9e>
 800c424:	2e00      	cmp	r6, #0
 800c426:	dd03      	ble.n	800c430 <__multiply+0x90>
 800c428:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d05b      	beq.n	800c4e8 <__multiply+0x148>
 800c430:	6106      	str	r6, [r0, #16]
 800c432:	b005      	add	sp, #20
 800c434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c438:	f843 2b04 	str.w	r2, [r3], #4
 800c43c:	e7d8      	b.n	800c3f0 <__multiply+0x50>
 800c43e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c442:	f1ba 0f00 	cmp.w	sl, #0
 800c446:	d024      	beq.n	800c492 <__multiply+0xf2>
 800c448:	f104 0e14 	add.w	lr, r4, #20
 800c44c:	46a9      	mov	r9, r5
 800c44e:	f04f 0c00 	mov.w	ip, #0
 800c452:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c456:	f8d9 3000 	ldr.w	r3, [r9]
 800c45a:	fa1f fb87 	uxth.w	fp, r7
 800c45e:	b29b      	uxth	r3, r3
 800c460:	fb0a 330b 	mla	r3, sl, fp, r3
 800c464:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c468:	f8d9 7000 	ldr.w	r7, [r9]
 800c46c:	4463      	add	r3, ip
 800c46e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c472:	fb0a c70b 	mla	r7, sl, fp, ip
 800c476:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c480:	4572      	cmp	r2, lr
 800c482:	f849 3b04 	str.w	r3, [r9], #4
 800c486:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c48a:	d8e2      	bhi.n	800c452 <__multiply+0xb2>
 800c48c:	9b01      	ldr	r3, [sp, #4]
 800c48e:	f845 c003 	str.w	ip, [r5, r3]
 800c492:	9b03      	ldr	r3, [sp, #12]
 800c494:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c498:	3104      	adds	r1, #4
 800c49a:	f1b9 0f00 	cmp.w	r9, #0
 800c49e:	d021      	beq.n	800c4e4 <__multiply+0x144>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	f104 0c14 	add.w	ip, r4, #20
 800c4a6:	46ae      	mov	lr, r5
 800c4a8:	f04f 0a00 	mov.w	sl, #0
 800c4ac:	f8bc b000 	ldrh.w	fp, [ip]
 800c4b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c4b4:	fb09 770b 	mla	r7, r9, fp, r7
 800c4b8:	4457      	add	r7, sl
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4c0:	f84e 3b04 	str.w	r3, [lr], #4
 800c4c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4cc:	f8be 3000 	ldrh.w	r3, [lr]
 800c4d0:	fb09 330a 	mla	r3, r9, sl, r3
 800c4d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c4d8:	4562      	cmp	r2, ip
 800c4da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4de:	d8e5      	bhi.n	800c4ac <__multiply+0x10c>
 800c4e0:	9f01      	ldr	r7, [sp, #4]
 800c4e2:	51eb      	str	r3, [r5, r7]
 800c4e4:	3504      	adds	r5, #4
 800c4e6:	e799      	b.n	800c41c <__multiply+0x7c>
 800c4e8:	3e01      	subs	r6, #1
 800c4ea:	e79b      	b.n	800c424 <__multiply+0x84>
 800c4ec:	0800ea51 	.word	0x0800ea51
 800c4f0:	0800ea62 	.word	0x0800ea62

0800c4f4 <__pow5mult>:
 800c4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f8:	4615      	mov	r5, r2
 800c4fa:	f012 0203 	ands.w	r2, r2, #3
 800c4fe:	4607      	mov	r7, r0
 800c500:	460e      	mov	r6, r1
 800c502:	d007      	beq.n	800c514 <__pow5mult+0x20>
 800c504:	4c25      	ldr	r4, [pc, #148]	@ (800c59c <__pow5mult+0xa8>)
 800c506:	3a01      	subs	r2, #1
 800c508:	2300      	movs	r3, #0
 800c50a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c50e:	f7ff fe55 	bl	800c1bc <__multadd>
 800c512:	4606      	mov	r6, r0
 800c514:	10ad      	asrs	r5, r5, #2
 800c516:	d03d      	beq.n	800c594 <__pow5mult+0xa0>
 800c518:	69fc      	ldr	r4, [r7, #28]
 800c51a:	b97c      	cbnz	r4, 800c53c <__pow5mult+0x48>
 800c51c:	2010      	movs	r0, #16
 800c51e:	f7ff fd35 	bl	800bf8c <malloc>
 800c522:	4602      	mov	r2, r0
 800c524:	61f8      	str	r0, [r7, #28]
 800c526:	b928      	cbnz	r0, 800c534 <__pow5mult+0x40>
 800c528:	4b1d      	ldr	r3, [pc, #116]	@ (800c5a0 <__pow5mult+0xac>)
 800c52a:	481e      	ldr	r0, [pc, #120]	@ (800c5a4 <__pow5mult+0xb0>)
 800c52c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c530:	f001 fbf2 	bl	800dd18 <__assert_func>
 800c534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c538:	6004      	str	r4, [r0, #0]
 800c53a:	60c4      	str	r4, [r0, #12]
 800c53c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c544:	b94c      	cbnz	r4, 800c55a <__pow5mult+0x66>
 800c546:	f240 2171 	movw	r1, #625	@ 0x271
 800c54a:	4638      	mov	r0, r7
 800c54c:	f7ff ff12 	bl	800c374 <__i2b>
 800c550:	2300      	movs	r3, #0
 800c552:	f8c8 0008 	str.w	r0, [r8, #8]
 800c556:	4604      	mov	r4, r0
 800c558:	6003      	str	r3, [r0, #0]
 800c55a:	f04f 0900 	mov.w	r9, #0
 800c55e:	07eb      	lsls	r3, r5, #31
 800c560:	d50a      	bpl.n	800c578 <__pow5mult+0x84>
 800c562:	4631      	mov	r1, r6
 800c564:	4622      	mov	r2, r4
 800c566:	4638      	mov	r0, r7
 800c568:	f7ff ff1a 	bl	800c3a0 <__multiply>
 800c56c:	4631      	mov	r1, r6
 800c56e:	4680      	mov	r8, r0
 800c570:	4638      	mov	r0, r7
 800c572:	f7ff fe01 	bl	800c178 <_Bfree>
 800c576:	4646      	mov	r6, r8
 800c578:	106d      	asrs	r5, r5, #1
 800c57a:	d00b      	beq.n	800c594 <__pow5mult+0xa0>
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	b938      	cbnz	r0, 800c590 <__pow5mult+0x9c>
 800c580:	4622      	mov	r2, r4
 800c582:	4621      	mov	r1, r4
 800c584:	4638      	mov	r0, r7
 800c586:	f7ff ff0b 	bl	800c3a0 <__multiply>
 800c58a:	6020      	str	r0, [r4, #0]
 800c58c:	f8c0 9000 	str.w	r9, [r0]
 800c590:	4604      	mov	r4, r0
 800c592:	e7e4      	b.n	800c55e <__pow5mult+0x6a>
 800c594:	4630      	mov	r0, r6
 800c596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c59a:	bf00      	nop
 800c59c:	0800eabc 	.word	0x0800eabc
 800c5a0:	0800e9e2 	.word	0x0800e9e2
 800c5a4:	0800ea62 	.word	0x0800ea62

0800c5a8 <__lshift>:
 800c5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	6849      	ldr	r1, [r1, #4]
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5b6:	68a3      	ldr	r3, [r4, #8]
 800c5b8:	4607      	mov	r7, r0
 800c5ba:	4691      	mov	r9, r2
 800c5bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5c0:	f108 0601 	add.w	r6, r8, #1
 800c5c4:	42b3      	cmp	r3, r6
 800c5c6:	db0b      	blt.n	800c5e0 <__lshift+0x38>
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	f7ff fd95 	bl	800c0f8 <_Balloc>
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	b948      	cbnz	r0, 800c5e6 <__lshift+0x3e>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	4b28      	ldr	r3, [pc, #160]	@ (800c678 <__lshift+0xd0>)
 800c5d6:	4829      	ldr	r0, [pc, #164]	@ (800c67c <__lshift+0xd4>)
 800c5d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c5dc:	f001 fb9c 	bl	800dd18 <__assert_func>
 800c5e0:	3101      	adds	r1, #1
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	e7ee      	b.n	800c5c4 <__lshift+0x1c>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f100 0114 	add.w	r1, r0, #20
 800c5ec:	f100 0210 	add.w	r2, r0, #16
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	4553      	cmp	r3, sl
 800c5f4:	db33      	blt.n	800c65e <__lshift+0xb6>
 800c5f6:	6920      	ldr	r0, [r4, #16]
 800c5f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5fc:	f104 0314 	add.w	r3, r4, #20
 800c600:	f019 091f 	ands.w	r9, r9, #31
 800c604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c60c:	d02b      	beq.n	800c666 <__lshift+0xbe>
 800c60e:	f1c9 0e20 	rsb	lr, r9, #32
 800c612:	468a      	mov	sl, r1
 800c614:	2200      	movs	r2, #0
 800c616:	6818      	ldr	r0, [r3, #0]
 800c618:	fa00 f009 	lsl.w	r0, r0, r9
 800c61c:	4310      	orrs	r0, r2
 800c61e:	f84a 0b04 	str.w	r0, [sl], #4
 800c622:	f853 2b04 	ldr.w	r2, [r3], #4
 800c626:	459c      	cmp	ip, r3
 800c628:	fa22 f20e 	lsr.w	r2, r2, lr
 800c62c:	d8f3      	bhi.n	800c616 <__lshift+0x6e>
 800c62e:	ebac 0304 	sub.w	r3, ip, r4
 800c632:	3b15      	subs	r3, #21
 800c634:	f023 0303 	bic.w	r3, r3, #3
 800c638:	3304      	adds	r3, #4
 800c63a:	f104 0015 	add.w	r0, r4, #21
 800c63e:	4584      	cmp	ip, r0
 800c640:	bf38      	it	cc
 800c642:	2304      	movcc	r3, #4
 800c644:	50ca      	str	r2, [r1, r3]
 800c646:	b10a      	cbz	r2, 800c64c <__lshift+0xa4>
 800c648:	f108 0602 	add.w	r6, r8, #2
 800c64c:	3e01      	subs	r6, #1
 800c64e:	4638      	mov	r0, r7
 800c650:	612e      	str	r6, [r5, #16]
 800c652:	4621      	mov	r1, r4
 800c654:	f7ff fd90 	bl	800c178 <_Bfree>
 800c658:	4628      	mov	r0, r5
 800c65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c65e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c662:	3301      	adds	r3, #1
 800c664:	e7c5      	b.n	800c5f2 <__lshift+0x4a>
 800c666:	3904      	subs	r1, #4
 800c668:	f853 2b04 	ldr.w	r2, [r3], #4
 800c66c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c670:	459c      	cmp	ip, r3
 800c672:	d8f9      	bhi.n	800c668 <__lshift+0xc0>
 800c674:	e7ea      	b.n	800c64c <__lshift+0xa4>
 800c676:	bf00      	nop
 800c678:	0800ea51 	.word	0x0800ea51
 800c67c:	0800ea62 	.word	0x0800ea62

0800c680 <__mcmp>:
 800c680:	690a      	ldr	r2, [r1, #16]
 800c682:	4603      	mov	r3, r0
 800c684:	6900      	ldr	r0, [r0, #16]
 800c686:	1a80      	subs	r0, r0, r2
 800c688:	b530      	push	{r4, r5, lr}
 800c68a:	d10e      	bne.n	800c6aa <__mcmp+0x2a>
 800c68c:	3314      	adds	r3, #20
 800c68e:	3114      	adds	r1, #20
 800c690:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c694:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c698:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c69c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6a0:	4295      	cmp	r5, r2
 800c6a2:	d003      	beq.n	800c6ac <__mcmp+0x2c>
 800c6a4:	d205      	bcs.n	800c6b2 <__mcmp+0x32>
 800c6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6aa:	bd30      	pop	{r4, r5, pc}
 800c6ac:	42a3      	cmp	r3, r4
 800c6ae:	d3f3      	bcc.n	800c698 <__mcmp+0x18>
 800c6b0:	e7fb      	b.n	800c6aa <__mcmp+0x2a>
 800c6b2:	2001      	movs	r0, #1
 800c6b4:	e7f9      	b.n	800c6aa <__mcmp+0x2a>
	...

0800c6b8 <__mdiff>:
 800c6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	4689      	mov	r9, r1
 800c6be:	4606      	mov	r6, r0
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4648      	mov	r0, r9
 800c6c4:	4614      	mov	r4, r2
 800c6c6:	f7ff ffdb 	bl	800c680 <__mcmp>
 800c6ca:	1e05      	subs	r5, r0, #0
 800c6cc:	d112      	bne.n	800c6f4 <__mdiff+0x3c>
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	f7ff fd11 	bl	800c0f8 <_Balloc>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	b928      	cbnz	r0, 800c6e6 <__mdiff+0x2e>
 800c6da:	4b3f      	ldr	r3, [pc, #252]	@ (800c7d8 <__mdiff+0x120>)
 800c6dc:	f240 2137 	movw	r1, #567	@ 0x237
 800c6e0:	483e      	ldr	r0, [pc, #248]	@ (800c7dc <__mdiff+0x124>)
 800c6e2:	f001 fb19 	bl	800dd18 <__assert_func>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	b003      	add	sp, #12
 800c6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f4:	bfbc      	itt	lt
 800c6f6:	464b      	movlt	r3, r9
 800c6f8:	46a1      	movlt	r9, r4
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c700:	bfba      	itte	lt
 800c702:	461c      	movlt	r4, r3
 800c704:	2501      	movlt	r5, #1
 800c706:	2500      	movge	r5, #0
 800c708:	f7ff fcf6 	bl	800c0f8 <_Balloc>
 800c70c:	4602      	mov	r2, r0
 800c70e:	b918      	cbnz	r0, 800c718 <__mdiff+0x60>
 800c710:	4b31      	ldr	r3, [pc, #196]	@ (800c7d8 <__mdiff+0x120>)
 800c712:	f240 2145 	movw	r1, #581	@ 0x245
 800c716:	e7e3      	b.n	800c6e0 <__mdiff+0x28>
 800c718:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c71c:	6926      	ldr	r6, [r4, #16]
 800c71e:	60c5      	str	r5, [r0, #12]
 800c720:	f109 0310 	add.w	r3, r9, #16
 800c724:	f109 0514 	add.w	r5, r9, #20
 800c728:	f104 0e14 	add.w	lr, r4, #20
 800c72c:	f100 0b14 	add.w	fp, r0, #20
 800c730:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c734:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c738:	9301      	str	r3, [sp, #4]
 800c73a:	46d9      	mov	r9, fp
 800c73c:	f04f 0c00 	mov.w	ip, #0
 800c740:	9b01      	ldr	r3, [sp, #4]
 800c742:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c746:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c74a:	9301      	str	r3, [sp, #4]
 800c74c:	fa1f f38a 	uxth.w	r3, sl
 800c750:	4619      	mov	r1, r3
 800c752:	b283      	uxth	r3, r0
 800c754:	1acb      	subs	r3, r1, r3
 800c756:	0c00      	lsrs	r0, r0, #16
 800c758:	4463      	add	r3, ip
 800c75a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c75e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c762:	b29b      	uxth	r3, r3
 800c764:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c768:	4576      	cmp	r6, lr
 800c76a:	f849 3b04 	str.w	r3, [r9], #4
 800c76e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c772:	d8e5      	bhi.n	800c740 <__mdiff+0x88>
 800c774:	1b33      	subs	r3, r6, r4
 800c776:	3b15      	subs	r3, #21
 800c778:	f023 0303 	bic.w	r3, r3, #3
 800c77c:	3415      	adds	r4, #21
 800c77e:	3304      	adds	r3, #4
 800c780:	42a6      	cmp	r6, r4
 800c782:	bf38      	it	cc
 800c784:	2304      	movcc	r3, #4
 800c786:	441d      	add	r5, r3
 800c788:	445b      	add	r3, fp
 800c78a:	461e      	mov	r6, r3
 800c78c:	462c      	mov	r4, r5
 800c78e:	4544      	cmp	r4, r8
 800c790:	d30e      	bcc.n	800c7b0 <__mdiff+0xf8>
 800c792:	f108 0103 	add.w	r1, r8, #3
 800c796:	1b49      	subs	r1, r1, r5
 800c798:	f021 0103 	bic.w	r1, r1, #3
 800c79c:	3d03      	subs	r5, #3
 800c79e:	45a8      	cmp	r8, r5
 800c7a0:	bf38      	it	cc
 800c7a2:	2100      	movcc	r1, #0
 800c7a4:	440b      	add	r3, r1
 800c7a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7aa:	b191      	cbz	r1, 800c7d2 <__mdiff+0x11a>
 800c7ac:	6117      	str	r7, [r2, #16]
 800c7ae:	e79d      	b.n	800c6ec <__mdiff+0x34>
 800c7b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7b4:	46e6      	mov	lr, ip
 800c7b6:	0c08      	lsrs	r0, r1, #16
 800c7b8:	fa1c fc81 	uxtah	ip, ip, r1
 800c7bc:	4471      	add	r1, lr
 800c7be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7c2:	b289      	uxth	r1, r1
 800c7c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c7c8:	f846 1b04 	str.w	r1, [r6], #4
 800c7cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7d0:	e7dd      	b.n	800c78e <__mdiff+0xd6>
 800c7d2:	3f01      	subs	r7, #1
 800c7d4:	e7e7      	b.n	800c7a6 <__mdiff+0xee>
 800c7d6:	bf00      	nop
 800c7d8:	0800ea51 	.word	0x0800ea51
 800c7dc:	0800ea62 	.word	0x0800ea62

0800c7e0 <__ulp>:
 800c7e0:	b082      	sub	sp, #8
 800c7e2:	ed8d 0b00 	vstr	d0, [sp]
 800c7e6:	9a01      	ldr	r2, [sp, #4]
 800c7e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c828 <__ulp+0x48>)
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dc08      	bgt.n	800c806 <__ulp+0x26>
 800c7f4:	425b      	negs	r3, r3
 800c7f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c7fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7fe:	da04      	bge.n	800c80a <__ulp+0x2a>
 800c800:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c804:	4113      	asrs	r3, r2
 800c806:	2200      	movs	r2, #0
 800c808:	e008      	b.n	800c81c <__ulp+0x3c>
 800c80a:	f1a2 0314 	sub.w	r3, r2, #20
 800c80e:	2b1e      	cmp	r3, #30
 800c810:	bfda      	itte	le
 800c812:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c816:	40da      	lsrle	r2, r3
 800c818:	2201      	movgt	r2, #1
 800c81a:	2300      	movs	r3, #0
 800c81c:	4619      	mov	r1, r3
 800c81e:	4610      	mov	r0, r2
 800c820:	ec41 0b10 	vmov	d0, r0, r1
 800c824:	b002      	add	sp, #8
 800c826:	4770      	bx	lr
 800c828:	7ff00000 	.word	0x7ff00000

0800c82c <__b2d>:
 800c82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c830:	6906      	ldr	r6, [r0, #16]
 800c832:	f100 0814 	add.w	r8, r0, #20
 800c836:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c83a:	1f37      	subs	r7, r6, #4
 800c83c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c840:	4610      	mov	r0, r2
 800c842:	f7ff fd4b 	bl	800c2dc <__hi0bits>
 800c846:	f1c0 0320 	rsb	r3, r0, #32
 800c84a:	280a      	cmp	r0, #10
 800c84c:	600b      	str	r3, [r1, #0]
 800c84e:	491b      	ldr	r1, [pc, #108]	@ (800c8bc <__b2d+0x90>)
 800c850:	dc15      	bgt.n	800c87e <__b2d+0x52>
 800c852:	f1c0 0c0b 	rsb	ip, r0, #11
 800c856:	fa22 f30c 	lsr.w	r3, r2, ip
 800c85a:	45b8      	cmp	r8, r7
 800c85c:	ea43 0501 	orr.w	r5, r3, r1
 800c860:	bf34      	ite	cc
 800c862:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c866:	2300      	movcs	r3, #0
 800c868:	3015      	adds	r0, #21
 800c86a:	fa02 f000 	lsl.w	r0, r2, r0
 800c86e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c872:	4303      	orrs	r3, r0
 800c874:	461c      	mov	r4, r3
 800c876:	ec45 4b10 	vmov	d0, r4, r5
 800c87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87e:	45b8      	cmp	r8, r7
 800c880:	bf3a      	itte	cc
 800c882:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c886:	f1a6 0708 	subcc.w	r7, r6, #8
 800c88a:	2300      	movcs	r3, #0
 800c88c:	380b      	subs	r0, #11
 800c88e:	d012      	beq.n	800c8b6 <__b2d+0x8a>
 800c890:	f1c0 0120 	rsb	r1, r0, #32
 800c894:	fa23 f401 	lsr.w	r4, r3, r1
 800c898:	4082      	lsls	r2, r0
 800c89a:	4322      	orrs	r2, r4
 800c89c:	4547      	cmp	r7, r8
 800c89e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c8a2:	bf8c      	ite	hi
 800c8a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c8a8:	2200      	movls	r2, #0
 800c8aa:	4083      	lsls	r3, r0
 800c8ac:	40ca      	lsrs	r2, r1
 800c8ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	e7de      	b.n	800c874 <__b2d+0x48>
 800c8b6:	ea42 0501 	orr.w	r5, r2, r1
 800c8ba:	e7db      	b.n	800c874 <__b2d+0x48>
 800c8bc:	3ff00000 	.word	0x3ff00000

0800c8c0 <__d2b>:
 800c8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	460f      	mov	r7, r1
 800c8c6:	2101      	movs	r1, #1
 800c8c8:	ec59 8b10 	vmov	r8, r9, d0
 800c8cc:	4616      	mov	r6, r2
 800c8ce:	f7ff fc13 	bl	800c0f8 <_Balloc>
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	b930      	cbnz	r0, 800c8e4 <__d2b+0x24>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	4b23      	ldr	r3, [pc, #140]	@ (800c968 <__d2b+0xa8>)
 800c8da:	4824      	ldr	r0, [pc, #144]	@ (800c96c <__d2b+0xac>)
 800c8dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8e0:	f001 fa1a 	bl	800dd18 <__assert_func>
 800c8e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8ec:	b10d      	cbz	r5, 800c8f2 <__d2b+0x32>
 800c8ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	f1b8 0300 	subs.w	r3, r8, #0
 800c8f8:	d023      	beq.n	800c942 <__d2b+0x82>
 800c8fa:	4668      	mov	r0, sp
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	f7ff fd0c 	bl	800c31a <__lo0bits>
 800c902:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c906:	b1d0      	cbz	r0, 800c93e <__d2b+0x7e>
 800c908:	f1c0 0320 	rsb	r3, r0, #32
 800c90c:	fa02 f303 	lsl.w	r3, r2, r3
 800c910:	430b      	orrs	r3, r1
 800c912:	40c2      	lsrs	r2, r0
 800c914:	6163      	str	r3, [r4, #20]
 800c916:	9201      	str	r2, [sp, #4]
 800c918:	9b01      	ldr	r3, [sp, #4]
 800c91a:	61a3      	str	r3, [r4, #24]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bf0c      	ite	eq
 800c920:	2201      	moveq	r2, #1
 800c922:	2202      	movne	r2, #2
 800c924:	6122      	str	r2, [r4, #16]
 800c926:	b1a5      	cbz	r5, 800c952 <__d2b+0x92>
 800c928:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c92c:	4405      	add	r5, r0
 800c92e:	603d      	str	r5, [r7, #0]
 800c930:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c934:	6030      	str	r0, [r6, #0]
 800c936:	4620      	mov	r0, r4
 800c938:	b003      	add	sp, #12
 800c93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c93e:	6161      	str	r1, [r4, #20]
 800c940:	e7ea      	b.n	800c918 <__d2b+0x58>
 800c942:	a801      	add	r0, sp, #4
 800c944:	f7ff fce9 	bl	800c31a <__lo0bits>
 800c948:	9b01      	ldr	r3, [sp, #4]
 800c94a:	6163      	str	r3, [r4, #20]
 800c94c:	3020      	adds	r0, #32
 800c94e:	2201      	movs	r2, #1
 800c950:	e7e8      	b.n	800c924 <__d2b+0x64>
 800c952:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c956:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c95a:	6038      	str	r0, [r7, #0]
 800c95c:	6918      	ldr	r0, [r3, #16]
 800c95e:	f7ff fcbd 	bl	800c2dc <__hi0bits>
 800c962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c966:	e7e5      	b.n	800c934 <__d2b+0x74>
 800c968:	0800ea51 	.word	0x0800ea51
 800c96c:	0800ea62 	.word	0x0800ea62

0800c970 <__ratio>:
 800c970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	b085      	sub	sp, #20
 800c976:	e9cd 1000 	strd	r1, r0, [sp]
 800c97a:	a902      	add	r1, sp, #8
 800c97c:	f7ff ff56 	bl	800c82c <__b2d>
 800c980:	9800      	ldr	r0, [sp, #0]
 800c982:	a903      	add	r1, sp, #12
 800c984:	ec55 4b10 	vmov	r4, r5, d0
 800c988:	f7ff ff50 	bl	800c82c <__b2d>
 800c98c:	9b01      	ldr	r3, [sp, #4]
 800c98e:	6919      	ldr	r1, [r3, #16]
 800c990:	9b00      	ldr	r3, [sp, #0]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	1ac9      	subs	r1, r1, r3
 800c996:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c99a:	1a9b      	subs	r3, r3, r2
 800c99c:	ec5b ab10 	vmov	sl, fp, d0
 800c9a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	bfce      	itee	gt
 800c9a8:	462a      	movgt	r2, r5
 800c9aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9ae:	465a      	movle	r2, fp
 800c9b0:	462f      	mov	r7, r5
 800c9b2:	46d9      	mov	r9, fp
 800c9b4:	bfcc      	ite	gt
 800c9b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c9be:	464b      	mov	r3, r9
 800c9c0:	4652      	mov	r2, sl
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	4639      	mov	r1, r7
 800c9c6:	f7f3 ff41 	bl	800084c <__aeabi_ddiv>
 800c9ca:	ec41 0b10 	vmov	d0, r0, r1
 800c9ce:	b005      	add	sp, #20
 800c9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9d4 <__copybits>:
 800c9d4:	3901      	subs	r1, #1
 800c9d6:	b570      	push	{r4, r5, r6, lr}
 800c9d8:	1149      	asrs	r1, r1, #5
 800c9da:	6914      	ldr	r4, [r2, #16]
 800c9dc:	3101      	adds	r1, #1
 800c9de:	f102 0314 	add.w	r3, r2, #20
 800c9e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9ea:	1f05      	subs	r5, r0, #4
 800c9ec:	42a3      	cmp	r3, r4
 800c9ee:	d30c      	bcc.n	800ca0a <__copybits+0x36>
 800c9f0:	1aa3      	subs	r3, r4, r2
 800c9f2:	3b11      	subs	r3, #17
 800c9f4:	f023 0303 	bic.w	r3, r3, #3
 800c9f8:	3211      	adds	r2, #17
 800c9fa:	42a2      	cmp	r2, r4
 800c9fc:	bf88      	it	hi
 800c9fe:	2300      	movhi	r3, #0
 800ca00:	4418      	add	r0, r3
 800ca02:	2300      	movs	r3, #0
 800ca04:	4288      	cmp	r0, r1
 800ca06:	d305      	bcc.n	800ca14 <__copybits+0x40>
 800ca08:	bd70      	pop	{r4, r5, r6, pc}
 800ca0a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca0e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca12:	e7eb      	b.n	800c9ec <__copybits+0x18>
 800ca14:	f840 3b04 	str.w	r3, [r0], #4
 800ca18:	e7f4      	b.n	800ca04 <__copybits+0x30>

0800ca1a <__any_on>:
 800ca1a:	f100 0214 	add.w	r2, r0, #20
 800ca1e:	6900      	ldr	r0, [r0, #16]
 800ca20:	114b      	asrs	r3, r1, #5
 800ca22:	4298      	cmp	r0, r3
 800ca24:	b510      	push	{r4, lr}
 800ca26:	db11      	blt.n	800ca4c <__any_on+0x32>
 800ca28:	dd0a      	ble.n	800ca40 <__any_on+0x26>
 800ca2a:	f011 011f 	ands.w	r1, r1, #31
 800ca2e:	d007      	beq.n	800ca40 <__any_on+0x26>
 800ca30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca34:	fa24 f001 	lsr.w	r0, r4, r1
 800ca38:	fa00 f101 	lsl.w	r1, r0, r1
 800ca3c:	428c      	cmp	r4, r1
 800ca3e:	d10b      	bne.n	800ca58 <__any_on+0x3e>
 800ca40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d803      	bhi.n	800ca50 <__any_on+0x36>
 800ca48:	2000      	movs	r0, #0
 800ca4a:	bd10      	pop	{r4, pc}
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	e7f7      	b.n	800ca40 <__any_on+0x26>
 800ca50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca54:	2900      	cmp	r1, #0
 800ca56:	d0f5      	beq.n	800ca44 <__any_on+0x2a>
 800ca58:	2001      	movs	r0, #1
 800ca5a:	e7f6      	b.n	800ca4a <__any_on+0x30>

0800ca5c <sulp>:
 800ca5c:	b570      	push	{r4, r5, r6, lr}
 800ca5e:	4604      	mov	r4, r0
 800ca60:	460d      	mov	r5, r1
 800ca62:	ec45 4b10 	vmov	d0, r4, r5
 800ca66:	4616      	mov	r6, r2
 800ca68:	f7ff feba 	bl	800c7e0 <__ulp>
 800ca6c:	ec51 0b10 	vmov	r0, r1, d0
 800ca70:	b17e      	cbz	r6, 800ca92 <sulp+0x36>
 800ca72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	dd09      	ble.n	800ca92 <sulp+0x36>
 800ca7e:	051b      	lsls	r3, r3, #20
 800ca80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca84:	2400      	movs	r4, #0
 800ca86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca8a:	4622      	mov	r2, r4
 800ca8c:	462b      	mov	r3, r5
 800ca8e:	f7f3 fdb3 	bl	80005f8 <__aeabi_dmul>
 800ca92:	ec41 0b10 	vmov	d0, r0, r1
 800ca96:	bd70      	pop	{r4, r5, r6, pc}

0800ca98 <_strtod_l>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	b09f      	sub	sp, #124	@ 0x7c
 800ca9e:	460c      	mov	r4, r1
 800caa0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800caa2:	2200      	movs	r2, #0
 800caa4:	921a      	str	r2, [sp, #104]	@ 0x68
 800caa6:	9005      	str	r0, [sp, #20]
 800caa8:	f04f 0a00 	mov.w	sl, #0
 800caac:	f04f 0b00 	mov.w	fp, #0
 800cab0:	460a      	mov	r2, r1
 800cab2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cab4:	7811      	ldrb	r1, [r2, #0]
 800cab6:	292b      	cmp	r1, #43	@ 0x2b
 800cab8:	d04a      	beq.n	800cb50 <_strtod_l+0xb8>
 800caba:	d838      	bhi.n	800cb2e <_strtod_l+0x96>
 800cabc:	290d      	cmp	r1, #13
 800cabe:	d832      	bhi.n	800cb26 <_strtod_l+0x8e>
 800cac0:	2908      	cmp	r1, #8
 800cac2:	d832      	bhi.n	800cb2a <_strtod_l+0x92>
 800cac4:	2900      	cmp	r1, #0
 800cac6:	d03b      	beq.n	800cb40 <_strtod_l+0xa8>
 800cac8:	2200      	movs	r2, #0
 800caca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cacc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cace:	782a      	ldrb	r2, [r5, #0]
 800cad0:	2a30      	cmp	r2, #48	@ 0x30
 800cad2:	f040 80b3 	bne.w	800cc3c <_strtod_l+0x1a4>
 800cad6:	786a      	ldrb	r2, [r5, #1]
 800cad8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cadc:	2a58      	cmp	r2, #88	@ 0x58
 800cade:	d16e      	bne.n	800cbbe <_strtod_l+0x126>
 800cae0:	9302      	str	r3, [sp, #8]
 800cae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	ab1a      	add	r3, sp, #104	@ 0x68
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	4a8e      	ldr	r2, [pc, #568]	@ (800cd24 <_strtod_l+0x28c>)
 800caec:	9805      	ldr	r0, [sp, #20]
 800caee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800caf0:	a919      	add	r1, sp, #100	@ 0x64
 800caf2:	f001 f9ab 	bl	800de4c <__gethex>
 800caf6:	f010 060f 	ands.w	r6, r0, #15
 800cafa:	4604      	mov	r4, r0
 800cafc:	d005      	beq.n	800cb0a <_strtod_l+0x72>
 800cafe:	2e06      	cmp	r6, #6
 800cb00:	d128      	bne.n	800cb54 <_strtod_l+0xbc>
 800cb02:	3501      	adds	r5, #1
 800cb04:	2300      	movs	r3, #0
 800cb06:	9519      	str	r5, [sp, #100]	@ 0x64
 800cb08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f040 858e 	bne.w	800d62e <_strtod_l+0xb96>
 800cb12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb14:	b1cb      	cbz	r3, 800cb4a <_strtod_l+0xb2>
 800cb16:	4652      	mov	r2, sl
 800cb18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cb1c:	ec43 2b10 	vmov	d0, r2, r3
 800cb20:	b01f      	add	sp, #124	@ 0x7c
 800cb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb26:	2920      	cmp	r1, #32
 800cb28:	d1ce      	bne.n	800cac8 <_strtod_l+0x30>
 800cb2a:	3201      	adds	r2, #1
 800cb2c:	e7c1      	b.n	800cab2 <_strtod_l+0x1a>
 800cb2e:	292d      	cmp	r1, #45	@ 0x2d
 800cb30:	d1ca      	bne.n	800cac8 <_strtod_l+0x30>
 800cb32:	2101      	movs	r1, #1
 800cb34:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cb36:	1c51      	adds	r1, r2, #1
 800cb38:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb3a:	7852      	ldrb	r2, [r2, #1]
 800cb3c:	2a00      	cmp	r2, #0
 800cb3e:	d1c5      	bne.n	800cacc <_strtod_l+0x34>
 800cb40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb42:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f040 8570 	bne.w	800d62a <_strtod_l+0xb92>
 800cb4a:	4652      	mov	r2, sl
 800cb4c:	465b      	mov	r3, fp
 800cb4e:	e7e5      	b.n	800cb1c <_strtod_l+0x84>
 800cb50:	2100      	movs	r1, #0
 800cb52:	e7ef      	b.n	800cb34 <_strtod_l+0x9c>
 800cb54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb56:	b13a      	cbz	r2, 800cb68 <_strtod_l+0xd0>
 800cb58:	2135      	movs	r1, #53	@ 0x35
 800cb5a:	a81c      	add	r0, sp, #112	@ 0x70
 800cb5c:	f7ff ff3a 	bl	800c9d4 <__copybits>
 800cb60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb62:	9805      	ldr	r0, [sp, #20]
 800cb64:	f7ff fb08 	bl	800c178 <_Bfree>
 800cb68:	3e01      	subs	r6, #1
 800cb6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb6c:	2e04      	cmp	r6, #4
 800cb6e:	d806      	bhi.n	800cb7e <_strtod_l+0xe6>
 800cb70:	e8df f006 	tbb	[pc, r6]
 800cb74:	201d0314 	.word	0x201d0314
 800cb78:	14          	.byte	0x14
 800cb79:	00          	.byte	0x00
 800cb7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb7e:	05e1      	lsls	r1, r4, #23
 800cb80:	bf48      	it	mi
 800cb82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb8a:	0d1b      	lsrs	r3, r3, #20
 800cb8c:	051b      	lsls	r3, r3, #20
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1bb      	bne.n	800cb0a <_strtod_l+0x72>
 800cb92:	f7fe fb2f 	bl	800b1f4 <__errno>
 800cb96:	2322      	movs	r3, #34	@ 0x22
 800cb98:	6003      	str	r3, [r0, #0]
 800cb9a:	e7b6      	b.n	800cb0a <_strtod_l+0x72>
 800cb9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cba0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cba4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cba8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cbac:	e7e7      	b.n	800cb7e <_strtod_l+0xe6>
 800cbae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cd2c <_strtod_l+0x294>
 800cbb2:	e7e4      	b.n	800cb7e <_strtod_l+0xe6>
 800cbb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cbb8:	f04f 3aff 	mov.w	sl, #4294967295
 800cbbc:	e7df      	b.n	800cb7e <_strtod_l+0xe6>
 800cbbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbc0:	1c5a      	adds	r2, r3, #1
 800cbc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbc4:	785b      	ldrb	r3, [r3, #1]
 800cbc6:	2b30      	cmp	r3, #48	@ 0x30
 800cbc8:	d0f9      	beq.n	800cbbe <_strtod_l+0x126>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d09d      	beq.n	800cb0a <_strtod_l+0x72>
 800cbce:	2301      	movs	r3, #1
 800cbd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbd4:	930c      	str	r3, [sp, #48]	@ 0x30
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9308      	str	r3, [sp, #32]
 800cbda:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbdc:	461f      	mov	r7, r3
 800cbde:	220a      	movs	r2, #10
 800cbe0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cbe2:	7805      	ldrb	r5, [r0, #0]
 800cbe4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cbe8:	b2d9      	uxtb	r1, r3
 800cbea:	2909      	cmp	r1, #9
 800cbec:	d928      	bls.n	800cc40 <_strtod_l+0x1a8>
 800cbee:	494e      	ldr	r1, [pc, #312]	@ (800cd28 <_strtod_l+0x290>)
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f001 f837 	bl	800dc64 <strncmp>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d032      	beq.n	800cc60 <_strtod_l+0x1c8>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	462a      	mov	r2, r5
 800cbfe:	4681      	mov	r9, r0
 800cc00:	463d      	mov	r5, r7
 800cc02:	4603      	mov	r3, r0
 800cc04:	2a65      	cmp	r2, #101	@ 0x65
 800cc06:	d001      	beq.n	800cc0c <_strtod_l+0x174>
 800cc08:	2a45      	cmp	r2, #69	@ 0x45
 800cc0a:	d114      	bne.n	800cc36 <_strtod_l+0x19e>
 800cc0c:	b91d      	cbnz	r5, 800cc16 <_strtod_l+0x17e>
 800cc0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc10:	4302      	orrs	r2, r0
 800cc12:	d095      	beq.n	800cb40 <_strtod_l+0xa8>
 800cc14:	2500      	movs	r5, #0
 800cc16:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cc18:	1c62      	adds	r2, r4, #1
 800cc1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc1c:	7862      	ldrb	r2, [r4, #1]
 800cc1e:	2a2b      	cmp	r2, #43	@ 0x2b
 800cc20:	d077      	beq.n	800cd12 <_strtod_l+0x27a>
 800cc22:	2a2d      	cmp	r2, #45	@ 0x2d
 800cc24:	d07b      	beq.n	800cd1e <_strtod_l+0x286>
 800cc26:	f04f 0c00 	mov.w	ip, #0
 800cc2a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cc2e:	2909      	cmp	r1, #9
 800cc30:	f240 8082 	bls.w	800cd38 <_strtod_l+0x2a0>
 800cc34:	9419      	str	r4, [sp, #100]	@ 0x64
 800cc36:	f04f 0800 	mov.w	r8, #0
 800cc3a:	e0a2      	b.n	800cd82 <_strtod_l+0x2ea>
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	e7c7      	b.n	800cbd0 <_strtod_l+0x138>
 800cc40:	2f08      	cmp	r7, #8
 800cc42:	bfd5      	itete	le
 800cc44:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cc46:	9908      	ldrgt	r1, [sp, #32]
 800cc48:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc4c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cc50:	f100 0001 	add.w	r0, r0, #1
 800cc54:	bfd4      	ite	le
 800cc56:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cc58:	9308      	strgt	r3, [sp, #32]
 800cc5a:	3701      	adds	r7, #1
 800cc5c:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc5e:	e7bf      	b.n	800cbe0 <_strtod_l+0x148>
 800cc60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc62:	1c5a      	adds	r2, r3, #1
 800cc64:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc66:	785a      	ldrb	r2, [r3, #1]
 800cc68:	b37f      	cbz	r7, 800ccca <_strtod_l+0x232>
 800cc6a:	4681      	mov	r9, r0
 800cc6c:	463d      	mov	r5, r7
 800cc6e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cc72:	2b09      	cmp	r3, #9
 800cc74:	d912      	bls.n	800cc9c <_strtod_l+0x204>
 800cc76:	2301      	movs	r3, #1
 800cc78:	e7c4      	b.n	800cc04 <_strtod_l+0x16c>
 800cc7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc7c:	1c5a      	adds	r2, r3, #1
 800cc7e:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc80:	785a      	ldrb	r2, [r3, #1]
 800cc82:	3001      	adds	r0, #1
 800cc84:	2a30      	cmp	r2, #48	@ 0x30
 800cc86:	d0f8      	beq.n	800cc7a <_strtod_l+0x1e2>
 800cc88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc8c:	2b08      	cmp	r3, #8
 800cc8e:	f200 84d3 	bhi.w	800d638 <_strtod_l+0xba0>
 800cc92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc94:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc96:	4681      	mov	r9, r0
 800cc98:	2000      	movs	r0, #0
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	3a30      	subs	r2, #48	@ 0x30
 800cc9e:	f100 0301 	add.w	r3, r0, #1
 800cca2:	d02a      	beq.n	800ccfa <_strtod_l+0x262>
 800cca4:	4499      	add	r9, r3
 800cca6:	eb00 0c05 	add.w	ip, r0, r5
 800ccaa:	462b      	mov	r3, r5
 800ccac:	210a      	movs	r1, #10
 800ccae:	4563      	cmp	r3, ip
 800ccb0:	d10d      	bne.n	800ccce <_strtod_l+0x236>
 800ccb2:	1c69      	adds	r1, r5, #1
 800ccb4:	4401      	add	r1, r0
 800ccb6:	4428      	add	r0, r5
 800ccb8:	2808      	cmp	r0, #8
 800ccba:	dc16      	bgt.n	800ccea <_strtod_l+0x252>
 800ccbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ccbe:	230a      	movs	r3, #10
 800ccc0:	fb03 2300 	mla	r3, r3, r0, r2
 800ccc4:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	e018      	b.n	800ccfc <_strtod_l+0x264>
 800ccca:	4638      	mov	r0, r7
 800cccc:	e7da      	b.n	800cc84 <_strtod_l+0x1ec>
 800ccce:	2b08      	cmp	r3, #8
 800ccd0:	f103 0301 	add.w	r3, r3, #1
 800ccd4:	dc03      	bgt.n	800ccde <_strtod_l+0x246>
 800ccd6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ccd8:	434e      	muls	r6, r1
 800ccda:	960a      	str	r6, [sp, #40]	@ 0x28
 800ccdc:	e7e7      	b.n	800ccae <_strtod_l+0x216>
 800ccde:	2b10      	cmp	r3, #16
 800cce0:	bfde      	ittt	le
 800cce2:	9e08      	ldrle	r6, [sp, #32]
 800cce4:	434e      	mulle	r6, r1
 800cce6:	9608      	strle	r6, [sp, #32]
 800cce8:	e7e1      	b.n	800ccae <_strtod_l+0x216>
 800ccea:	280f      	cmp	r0, #15
 800ccec:	dceb      	bgt.n	800ccc6 <_strtod_l+0x22e>
 800ccee:	9808      	ldr	r0, [sp, #32]
 800ccf0:	230a      	movs	r3, #10
 800ccf2:	fb03 2300 	mla	r3, r3, r0, r2
 800ccf6:	9308      	str	r3, [sp, #32]
 800ccf8:	e7e5      	b.n	800ccc6 <_strtod_l+0x22e>
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccfe:	1c50      	adds	r0, r2, #1
 800cd00:	9019      	str	r0, [sp, #100]	@ 0x64
 800cd02:	7852      	ldrb	r2, [r2, #1]
 800cd04:	4618      	mov	r0, r3
 800cd06:	460d      	mov	r5, r1
 800cd08:	e7b1      	b.n	800cc6e <_strtod_l+0x1d6>
 800cd0a:	f04f 0900 	mov.w	r9, #0
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e77d      	b.n	800cc0e <_strtod_l+0x176>
 800cd12:	f04f 0c00 	mov.w	ip, #0
 800cd16:	1ca2      	adds	r2, r4, #2
 800cd18:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd1a:	78a2      	ldrb	r2, [r4, #2]
 800cd1c:	e785      	b.n	800cc2a <_strtod_l+0x192>
 800cd1e:	f04f 0c01 	mov.w	ip, #1
 800cd22:	e7f8      	b.n	800cd16 <_strtod_l+0x27e>
 800cd24:	0800ebd0 	.word	0x0800ebd0
 800cd28:	0800ebb8 	.word	0x0800ebb8
 800cd2c:	7ff00000 	.word	0x7ff00000
 800cd30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd32:	1c51      	adds	r1, r2, #1
 800cd34:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd36:	7852      	ldrb	r2, [r2, #1]
 800cd38:	2a30      	cmp	r2, #48	@ 0x30
 800cd3a:	d0f9      	beq.n	800cd30 <_strtod_l+0x298>
 800cd3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cd40:	2908      	cmp	r1, #8
 800cd42:	f63f af78 	bhi.w	800cc36 <_strtod_l+0x19e>
 800cd46:	3a30      	subs	r2, #48	@ 0x30
 800cd48:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cd4e:	f04f 080a 	mov.w	r8, #10
 800cd52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd54:	1c56      	adds	r6, r2, #1
 800cd56:	9619      	str	r6, [sp, #100]	@ 0x64
 800cd58:	7852      	ldrb	r2, [r2, #1]
 800cd5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cd5e:	f1be 0f09 	cmp.w	lr, #9
 800cd62:	d939      	bls.n	800cdd8 <_strtod_l+0x340>
 800cd64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd66:	1a76      	subs	r6, r6, r1
 800cd68:	2e08      	cmp	r6, #8
 800cd6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cd6e:	dc03      	bgt.n	800cd78 <_strtod_l+0x2e0>
 800cd70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd72:	4588      	cmp	r8, r1
 800cd74:	bfa8      	it	ge
 800cd76:	4688      	movge	r8, r1
 800cd78:	f1bc 0f00 	cmp.w	ip, #0
 800cd7c:	d001      	beq.n	800cd82 <_strtod_l+0x2ea>
 800cd7e:	f1c8 0800 	rsb	r8, r8, #0
 800cd82:	2d00      	cmp	r5, #0
 800cd84:	d14e      	bne.n	800ce24 <_strtod_l+0x38c>
 800cd86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd88:	4308      	orrs	r0, r1
 800cd8a:	f47f aebe 	bne.w	800cb0a <_strtod_l+0x72>
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f47f aed6 	bne.w	800cb40 <_strtod_l+0xa8>
 800cd94:	2a69      	cmp	r2, #105	@ 0x69
 800cd96:	d028      	beq.n	800cdea <_strtod_l+0x352>
 800cd98:	dc25      	bgt.n	800cde6 <_strtod_l+0x34e>
 800cd9a:	2a49      	cmp	r2, #73	@ 0x49
 800cd9c:	d025      	beq.n	800cdea <_strtod_l+0x352>
 800cd9e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cda0:	f47f aece 	bne.w	800cb40 <_strtod_l+0xa8>
 800cda4:	499b      	ldr	r1, [pc, #620]	@ (800d014 <_strtod_l+0x57c>)
 800cda6:	a819      	add	r0, sp, #100	@ 0x64
 800cda8:	f001 fa72 	bl	800e290 <__match>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	f43f aec7 	beq.w	800cb40 <_strtod_l+0xa8>
 800cdb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	2b28      	cmp	r3, #40	@ 0x28
 800cdb8:	d12e      	bne.n	800ce18 <_strtod_l+0x380>
 800cdba:	4997      	ldr	r1, [pc, #604]	@ (800d018 <_strtod_l+0x580>)
 800cdbc:	aa1c      	add	r2, sp, #112	@ 0x70
 800cdbe:	a819      	add	r0, sp, #100	@ 0x64
 800cdc0:	f001 fa7a 	bl	800e2b8 <__hexnan>
 800cdc4:	2805      	cmp	r0, #5
 800cdc6:	d127      	bne.n	800ce18 <_strtod_l+0x380>
 800cdc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cdce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cdd2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cdd6:	e698      	b.n	800cb0a <_strtod_l+0x72>
 800cdd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cdda:	fb08 2101 	mla	r1, r8, r1, r2
 800cdde:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cde2:	920e      	str	r2, [sp, #56]	@ 0x38
 800cde4:	e7b5      	b.n	800cd52 <_strtod_l+0x2ba>
 800cde6:	2a6e      	cmp	r2, #110	@ 0x6e
 800cde8:	e7da      	b.n	800cda0 <_strtod_l+0x308>
 800cdea:	498c      	ldr	r1, [pc, #560]	@ (800d01c <_strtod_l+0x584>)
 800cdec:	a819      	add	r0, sp, #100	@ 0x64
 800cdee:	f001 fa4f 	bl	800e290 <__match>
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	f43f aea4 	beq.w	800cb40 <_strtod_l+0xa8>
 800cdf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdfa:	4989      	ldr	r1, [pc, #548]	@ (800d020 <_strtod_l+0x588>)
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	a819      	add	r0, sp, #100	@ 0x64
 800ce00:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce02:	f001 fa45 	bl	800e290 <__match>
 800ce06:	b910      	cbnz	r0, 800ce0e <_strtod_l+0x376>
 800ce08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d030 <_strtod_l+0x598>
 800ce12:	f04f 0a00 	mov.w	sl, #0
 800ce16:	e678      	b.n	800cb0a <_strtod_l+0x72>
 800ce18:	4882      	ldr	r0, [pc, #520]	@ (800d024 <_strtod_l+0x58c>)
 800ce1a:	f000 ff75 	bl	800dd08 <nan>
 800ce1e:	ec5b ab10 	vmov	sl, fp, d0
 800ce22:	e672      	b.n	800cb0a <_strtod_l+0x72>
 800ce24:	eba8 0309 	sub.w	r3, r8, r9
 800ce28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce2c:	2f00      	cmp	r7, #0
 800ce2e:	bf08      	it	eq
 800ce30:	462f      	moveq	r7, r5
 800ce32:	2d10      	cmp	r5, #16
 800ce34:	462c      	mov	r4, r5
 800ce36:	bfa8      	it	ge
 800ce38:	2410      	movge	r4, #16
 800ce3a:	f7f3 fb63 	bl	8000504 <__aeabi_ui2d>
 800ce3e:	2d09      	cmp	r5, #9
 800ce40:	4682      	mov	sl, r0
 800ce42:	468b      	mov	fp, r1
 800ce44:	dc13      	bgt.n	800ce6e <_strtod_l+0x3d6>
 800ce46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f43f ae5e 	beq.w	800cb0a <_strtod_l+0x72>
 800ce4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce50:	dd78      	ble.n	800cf44 <_strtod_l+0x4ac>
 800ce52:	2b16      	cmp	r3, #22
 800ce54:	dc5f      	bgt.n	800cf16 <_strtod_l+0x47e>
 800ce56:	4974      	ldr	r1, [pc, #464]	@ (800d028 <_strtod_l+0x590>)
 800ce58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce60:	4652      	mov	r2, sl
 800ce62:	465b      	mov	r3, fp
 800ce64:	f7f3 fbc8 	bl	80005f8 <__aeabi_dmul>
 800ce68:	4682      	mov	sl, r0
 800ce6a:	468b      	mov	fp, r1
 800ce6c:	e64d      	b.n	800cb0a <_strtod_l+0x72>
 800ce6e:	4b6e      	ldr	r3, [pc, #440]	@ (800d028 <_strtod_l+0x590>)
 800ce70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce78:	f7f3 fbbe 	bl	80005f8 <__aeabi_dmul>
 800ce7c:	4682      	mov	sl, r0
 800ce7e:	9808      	ldr	r0, [sp, #32]
 800ce80:	468b      	mov	fp, r1
 800ce82:	f7f3 fb3f 	bl	8000504 <__aeabi_ui2d>
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4650      	mov	r0, sl
 800ce8c:	4659      	mov	r1, fp
 800ce8e:	f7f3 f9fd 	bl	800028c <__adddf3>
 800ce92:	2d0f      	cmp	r5, #15
 800ce94:	4682      	mov	sl, r0
 800ce96:	468b      	mov	fp, r1
 800ce98:	ddd5      	ble.n	800ce46 <_strtod_l+0x3ae>
 800ce9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce9c:	1b2c      	subs	r4, r5, r4
 800ce9e:	441c      	add	r4, r3
 800cea0:	2c00      	cmp	r4, #0
 800cea2:	f340 8096 	ble.w	800cfd2 <_strtod_l+0x53a>
 800cea6:	f014 030f 	ands.w	r3, r4, #15
 800ceaa:	d00a      	beq.n	800cec2 <_strtod_l+0x42a>
 800ceac:	495e      	ldr	r1, [pc, #376]	@ (800d028 <_strtod_l+0x590>)
 800ceae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ceb2:	4652      	mov	r2, sl
 800ceb4:	465b      	mov	r3, fp
 800ceb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceba:	f7f3 fb9d 	bl	80005f8 <__aeabi_dmul>
 800cebe:	4682      	mov	sl, r0
 800cec0:	468b      	mov	fp, r1
 800cec2:	f034 040f 	bics.w	r4, r4, #15
 800cec6:	d073      	beq.n	800cfb0 <_strtod_l+0x518>
 800cec8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cecc:	dd48      	ble.n	800cf60 <_strtod_l+0x4c8>
 800cece:	2400      	movs	r4, #0
 800ced0:	46a0      	mov	r8, r4
 800ced2:	940a      	str	r4, [sp, #40]	@ 0x28
 800ced4:	46a1      	mov	r9, r4
 800ced6:	9a05      	ldr	r2, [sp, #20]
 800ced8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d030 <_strtod_l+0x598>
 800cedc:	2322      	movs	r3, #34	@ 0x22
 800cede:	6013      	str	r3, [r2, #0]
 800cee0:	f04f 0a00 	mov.w	sl, #0
 800cee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f43f ae0f 	beq.w	800cb0a <_strtod_l+0x72>
 800ceec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceee:	9805      	ldr	r0, [sp, #20]
 800cef0:	f7ff f942 	bl	800c178 <_Bfree>
 800cef4:	9805      	ldr	r0, [sp, #20]
 800cef6:	4649      	mov	r1, r9
 800cef8:	f7ff f93e 	bl	800c178 <_Bfree>
 800cefc:	9805      	ldr	r0, [sp, #20]
 800cefe:	4641      	mov	r1, r8
 800cf00:	f7ff f93a 	bl	800c178 <_Bfree>
 800cf04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf06:	9805      	ldr	r0, [sp, #20]
 800cf08:	f7ff f936 	bl	800c178 <_Bfree>
 800cf0c:	9805      	ldr	r0, [sp, #20]
 800cf0e:	4621      	mov	r1, r4
 800cf10:	f7ff f932 	bl	800c178 <_Bfree>
 800cf14:	e5f9      	b.n	800cb0a <_strtod_l+0x72>
 800cf16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	dbbc      	blt.n	800ce9a <_strtod_l+0x402>
 800cf20:	4c41      	ldr	r4, [pc, #260]	@ (800d028 <_strtod_l+0x590>)
 800cf22:	f1c5 050f 	rsb	r5, r5, #15
 800cf26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf2a:	4652      	mov	r2, sl
 800cf2c:	465b      	mov	r3, fp
 800cf2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf32:	f7f3 fb61 	bl	80005f8 <__aeabi_dmul>
 800cf36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf38:	1b5d      	subs	r5, r3, r5
 800cf3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf42:	e78f      	b.n	800ce64 <_strtod_l+0x3cc>
 800cf44:	3316      	adds	r3, #22
 800cf46:	dba8      	blt.n	800ce9a <_strtod_l+0x402>
 800cf48:	4b37      	ldr	r3, [pc, #220]	@ (800d028 <_strtod_l+0x590>)
 800cf4a:	eba9 0808 	sub.w	r8, r9, r8
 800cf4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cf52:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cf56:	4650      	mov	r0, sl
 800cf58:	4659      	mov	r1, fp
 800cf5a:	f7f3 fc77 	bl	800084c <__aeabi_ddiv>
 800cf5e:	e783      	b.n	800ce68 <_strtod_l+0x3d0>
 800cf60:	4b32      	ldr	r3, [pc, #200]	@ (800d02c <_strtod_l+0x594>)
 800cf62:	9308      	str	r3, [sp, #32]
 800cf64:	2300      	movs	r3, #0
 800cf66:	1124      	asrs	r4, r4, #4
 800cf68:	4650      	mov	r0, sl
 800cf6a:	4659      	mov	r1, fp
 800cf6c:	461e      	mov	r6, r3
 800cf6e:	2c01      	cmp	r4, #1
 800cf70:	dc21      	bgt.n	800cfb6 <_strtod_l+0x51e>
 800cf72:	b10b      	cbz	r3, 800cf78 <_strtod_l+0x4e0>
 800cf74:	4682      	mov	sl, r0
 800cf76:	468b      	mov	fp, r1
 800cf78:	492c      	ldr	r1, [pc, #176]	@ (800d02c <_strtod_l+0x594>)
 800cf7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf82:	4652      	mov	r2, sl
 800cf84:	465b      	mov	r3, fp
 800cf86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf8a:	f7f3 fb35 	bl	80005f8 <__aeabi_dmul>
 800cf8e:	4b28      	ldr	r3, [pc, #160]	@ (800d030 <_strtod_l+0x598>)
 800cf90:	460a      	mov	r2, r1
 800cf92:	400b      	ands	r3, r1
 800cf94:	4927      	ldr	r1, [pc, #156]	@ (800d034 <_strtod_l+0x59c>)
 800cf96:	428b      	cmp	r3, r1
 800cf98:	4682      	mov	sl, r0
 800cf9a:	d898      	bhi.n	800cece <_strtod_l+0x436>
 800cf9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cfa0:	428b      	cmp	r3, r1
 800cfa2:	bf86      	itte	hi
 800cfa4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d038 <_strtod_l+0x5a0>
 800cfa8:	f04f 3aff 	movhi.w	sl, #4294967295
 800cfac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	9308      	str	r3, [sp, #32]
 800cfb4:	e07a      	b.n	800d0ac <_strtod_l+0x614>
 800cfb6:	07e2      	lsls	r2, r4, #31
 800cfb8:	d505      	bpl.n	800cfc6 <_strtod_l+0x52e>
 800cfba:	9b08      	ldr	r3, [sp, #32]
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	f7f3 fb1a 	bl	80005f8 <__aeabi_dmul>
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	9a08      	ldr	r2, [sp, #32]
 800cfc8:	3208      	adds	r2, #8
 800cfca:	3601      	adds	r6, #1
 800cfcc:	1064      	asrs	r4, r4, #1
 800cfce:	9208      	str	r2, [sp, #32]
 800cfd0:	e7cd      	b.n	800cf6e <_strtod_l+0x4d6>
 800cfd2:	d0ed      	beq.n	800cfb0 <_strtod_l+0x518>
 800cfd4:	4264      	negs	r4, r4
 800cfd6:	f014 020f 	ands.w	r2, r4, #15
 800cfda:	d00a      	beq.n	800cff2 <_strtod_l+0x55a>
 800cfdc:	4b12      	ldr	r3, [pc, #72]	@ (800d028 <_strtod_l+0x590>)
 800cfde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfe2:	4650      	mov	r0, sl
 800cfe4:	4659      	mov	r1, fp
 800cfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfea:	f7f3 fc2f 	bl	800084c <__aeabi_ddiv>
 800cfee:	4682      	mov	sl, r0
 800cff0:	468b      	mov	fp, r1
 800cff2:	1124      	asrs	r4, r4, #4
 800cff4:	d0dc      	beq.n	800cfb0 <_strtod_l+0x518>
 800cff6:	2c1f      	cmp	r4, #31
 800cff8:	dd20      	ble.n	800d03c <_strtod_l+0x5a4>
 800cffa:	2400      	movs	r4, #0
 800cffc:	46a0      	mov	r8, r4
 800cffe:	940a      	str	r4, [sp, #40]	@ 0x28
 800d000:	46a1      	mov	r9, r4
 800d002:	9a05      	ldr	r2, [sp, #20]
 800d004:	2322      	movs	r3, #34	@ 0x22
 800d006:	f04f 0a00 	mov.w	sl, #0
 800d00a:	f04f 0b00 	mov.w	fp, #0
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	e768      	b.n	800cee4 <_strtod_l+0x44c>
 800d012:	bf00      	nop
 800d014:	0800e9a9 	.word	0x0800e9a9
 800d018:	0800ebbc 	.word	0x0800ebbc
 800d01c:	0800e9a1 	.word	0x0800e9a1
 800d020:	0800e9d8 	.word	0x0800e9d8
 800d024:	0800ed65 	.word	0x0800ed65
 800d028:	0800eaf0 	.word	0x0800eaf0
 800d02c:	0800eac8 	.word	0x0800eac8
 800d030:	7ff00000 	.word	0x7ff00000
 800d034:	7ca00000 	.word	0x7ca00000
 800d038:	7fefffff 	.word	0x7fefffff
 800d03c:	f014 0310 	ands.w	r3, r4, #16
 800d040:	bf18      	it	ne
 800d042:	236a      	movne	r3, #106	@ 0x6a
 800d044:	4ea9      	ldr	r6, [pc, #676]	@ (800d2ec <_strtod_l+0x854>)
 800d046:	9308      	str	r3, [sp, #32]
 800d048:	4650      	mov	r0, sl
 800d04a:	4659      	mov	r1, fp
 800d04c:	2300      	movs	r3, #0
 800d04e:	07e2      	lsls	r2, r4, #31
 800d050:	d504      	bpl.n	800d05c <_strtod_l+0x5c4>
 800d052:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d056:	f7f3 facf 	bl	80005f8 <__aeabi_dmul>
 800d05a:	2301      	movs	r3, #1
 800d05c:	1064      	asrs	r4, r4, #1
 800d05e:	f106 0608 	add.w	r6, r6, #8
 800d062:	d1f4      	bne.n	800d04e <_strtod_l+0x5b6>
 800d064:	b10b      	cbz	r3, 800d06a <_strtod_l+0x5d2>
 800d066:	4682      	mov	sl, r0
 800d068:	468b      	mov	fp, r1
 800d06a:	9b08      	ldr	r3, [sp, #32]
 800d06c:	b1b3      	cbz	r3, 800d09c <_strtod_l+0x604>
 800d06e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d072:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d076:	2b00      	cmp	r3, #0
 800d078:	4659      	mov	r1, fp
 800d07a:	dd0f      	ble.n	800d09c <_strtod_l+0x604>
 800d07c:	2b1f      	cmp	r3, #31
 800d07e:	dd55      	ble.n	800d12c <_strtod_l+0x694>
 800d080:	2b34      	cmp	r3, #52	@ 0x34
 800d082:	bfde      	ittt	le
 800d084:	f04f 33ff 	movle.w	r3, #4294967295
 800d088:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d08c:	4093      	lslle	r3, r2
 800d08e:	f04f 0a00 	mov.w	sl, #0
 800d092:	bfcc      	ite	gt
 800d094:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d098:	ea03 0b01 	andle.w	fp, r3, r1
 800d09c:	2200      	movs	r2, #0
 800d09e:	2300      	movs	r3, #0
 800d0a0:	4650      	mov	r0, sl
 800d0a2:	4659      	mov	r1, fp
 800d0a4:	f7f3 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d1a6      	bne.n	800cffa <_strtod_l+0x562>
 800d0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d0b2:	9805      	ldr	r0, [sp, #20]
 800d0b4:	462b      	mov	r3, r5
 800d0b6:	463a      	mov	r2, r7
 800d0b8:	f7ff f8c6 	bl	800c248 <__s2b>
 800d0bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	f43f af05 	beq.w	800cece <_strtod_l+0x436>
 800d0c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0c6:	2a00      	cmp	r2, #0
 800d0c8:	eba9 0308 	sub.w	r3, r9, r8
 800d0cc:	bfa8      	it	ge
 800d0ce:	2300      	movge	r3, #0
 800d0d0:	9312      	str	r3, [sp, #72]	@ 0x48
 800d0d2:	2400      	movs	r4, #0
 800d0d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d0d8:	9316      	str	r3, [sp, #88]	@ 0x58
 800d0da:	46a0      	mov	r8, r4
 800d0dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0de:	9805      	ldr	r0, [sp, #20]
 800d0e0:	6859      	ldr	r1, [r3, #4]
 800d0e2:	f7ff f809 	bl	800c0f8 <_Balloc>
 800d0e6:	4681      	mov	r9, r0
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	f43f aef4 	beq.w	800ced6 <_strtod_l+0x43e>
 800d0ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0f0:	691a      	ldr	r2, [r3, #16]
 800d0f2:	3202      	adds	r2, #2
 800d0f4:	f103 010c 	add.w	r1, r3, #12
 800d0f8:	0092      	lsls	r2, r2, #2
 800d0fa:	300c      	adds	r0, #12
 800d0fc:	f000 fdf6 	bl	800dcec <memcpy>
 800d100:	ec4b ab10 	vmov	d0, sl, fp
 800d104:	9805      	ldr	r0, [sp, #20]
 800d106:	aa1c      	add	r2, sp, #112	@ 0x70
 800d108:	a91b      	add	r1, sp, #108	@ 0x6c
 800d10a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d10e:	f7ff fbd7 	bl	800c8c0 <__d2b>
 800d112:	901a      	str	r0, [sp, #104]	@ 0x68
 800d114:	2800      	cmp	r0, #0
 800d116:	f43f aede 	beq.w	800ced6 <_strtod_l+0x43e>
 800d11a:	9805      	ldr	r0, [sp, #20]
 800d11c:	2101      	movs	r1, #1
 800d11e:	f7ff f929 	bl	800c374 <__i2b>
 800d122:	4680      	mov	r8, r0
 800d124:	b948      	cbnz	r0, 800d13a <_strtod_l+0x6a2>
 800d126:	f04f 0800 	mov.w	r8, #0
 800d12a:	e6d4      	b.n	800ced6 <_strtod_l+0x43e>
 800d12c:	f04f 32ff 	mov.w	r2, #4294967295
 800d130:	fa02 f303 	lsl.w	r3, r2, r3
 800d134:	ea03 0a0a 	and.w	sl, r3, sl
 800d138:	e7b0      	b.n	800d09c <_strtod_l+0x604>
 800d13a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d13c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d13e:	2d00      	cmp	r5, #0
 800d140:	bfab      	itete	ge
 800d142:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d144:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d146:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d148:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d14a:	bfac      	ite	ge
 800d14c:	18ef      	addge	r7, r5, r3
 800d14e:	1b5e      	sublt	r6, r3, r5
 800d150:	9b08      	ldr	r3, [sp, #32]
 800d152:	1aed      	subs	r5, r5, r3
 800d154:	4415      	add	r5, r2
 800d156:	4b66      	ldr	r3, [pc, #408]	@ (800d2f0 <_strtod_l+0x858>)
 800d158:	3d01      	subs	r5, #1
 800d15a:	429d      	cmp	r5, r3
 800d15c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d160:	da50      	bge.n	800d204 <_strtod_l+0x76c>
 800d162:	1b5b      	subs	r3, r3, r5
 800d164:	2b1f      	cmp	r3, #31
 800d166:	eba2 0203 	sub.w	r2, r2, r3
 800d16a:	f04f 0101 	mov.w	r1, #1
 800d16e:	dc3d      	bgt.n	800d1ec <_strtod_l+0x754>
 800d170:	fa01 f303 	lsl.w	r3, r1, r3
 800d174:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d176:	2300      	movs	r3, #0
 800d178:	9310      	str	r3, [sp, #64]	@ 0x40
 800d17a:	18bd      	adds	r5, r7, r2
 800d17c:	9b08      	ldr	r3, [sp, #32]
 800d17e:	42af      	cmp	r7, r5
 800d180:	4416      	add	r6, r2
 800d182:	441e      	add	r6, r3
 800d184:	463b      	mov	r3, r7
 800d186:	bfa8      	it	ge
 800d188:	462b      	movge	r3, r5
 800d18a:	42b3      	cmp	r3, r6
 800d18c:	bfa8      	it	ge
 800d18e:	4633      	movge	r3, r6
 800d190:	2b00      	cmp	r3, #0
 800d192:	bfc2      	ittt	gt
 800d194:	1aed      	subgt	r5, r5, r3
 800d196:	1af6      	subgt	r6, r6, r3
 800d198:	1aff      	subgt	r7, r7, r3
 800d19a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dd16      	ble.n	800d1ce <_strtod_l+0x736>
 800d1a0:	4641      	mov	r1, r8
 800d1a2:	9805      	ldr	r0, [sp, #20]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	f7ff f9a5 	bl	800c4f4 <__pow5mult>
 800d1aa:	4680      	mov	r8, r0
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d0ba      	beq.n	800d126 <_strtod_l+0x68e>
 800d1b0:	4601      	mov	r1, r0
 800d1b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d1b4:	9805      	ldr	r0, [sp, #20]
 800d1b6:	f7ff f8f3 	bl	800c3a0 <__multiply>
 800d1ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	f43f ae8a 	beq.w	800ced6 <_strtod_l+0x43e>
 800d1c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1c4:	9805      	ldr	r0, [sp, #20]
 800d1c6:	f7fe ffd7 	bl	800c178 <_Bfree>
 800d1ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1ce:	2d00      	cmp	r5, #0
 800d1d0:	dc1d      	bgt.n	800d20e <_strtod_l+0x776>
 800d1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	dd23      	ble.n	800d220 <_strtod_l+0x788>
 800d1d8:	4649      	mov	r1, r9
 800d1da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d1dc:	9805      	ldr	r0, [sp, #20]
 800d1de:	f7ff f989 	bl	800c4f4 <__pow5mult>
 800d1e2:	4681      	mov	r9, r0
 800d1e4:	b9e0      	cbnz	r0, 800d220 <_strtod_l+0x788>
 800d1e6:	f04f 0900 	mov.w	r9, #0
 800d1ea:	e674      	b.n	800ced6 <_strtod_l+0x43e>
 800d1ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d1f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d1f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d1f8:	35e2      	adds	r5, #226	@ 0xe2
 800d1fa:	fa01 f305 	lsl.w	r3, r1, r5
 800d1fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800d200:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d202:	e7ba      	b.n	800d17a <_strtod_l+0x6e2>
 800d204:	2300      	movs	r3, #0
 800d206:	9310      	str	r3, [sp, #64]	@ 0x40
 800d208:	2301      	movs	r3, #1
 800d20a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d20c:	e7b5      	b.n	800d17a <_strtod_l+0x6e2>
 800d20e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d210:	9805      	ldr	r0, [sp, #20]
 800d212:	462a      	mov	r2, r5
 800d214:	f7ff f9c8 	bl	800c5a8 <__lshift>
 800d218:	901a      	str	r0, [sp, #104]	@ 0x68
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d1d9      	bne.n	800d1d2 <_strtod_l+0x73a>
 800d21e:	e65a      	b.n	800ced6 <_strtod_l+0x43e>
 800d220:	2e00      	cmp	r6, #0
 800d222:	dd07      	ble.n	800d234 <_strtod_l+0x79c>
 800d224:	4649      	mov	r1, r9
 800d226:	9805      	ldr	r0, [sp, #20]
 800d228:	4632      	mov	r2, r6
 800d22a:	f7ff f9bd 	bl	800c5a8 <__lshift>
 800d22e:	4681      	mov	r9, r0
 800d230:	2800      	cmp	r0, #0
 800d232:	d0d8      	beq.n	800d1e6 <_strtod_l+0x74e>
 800d234:	2f00      	cmp	r7, #0
 800d236:	dd08      	ble.n	800d24a <_strtod_l+0x7b2>
 800d238:	4641      	mov	r1, r8
 800d23a:	9805      	ldr	r0, [sp, #20]
 800d23c:	463a      	mov	r2, r7
 800d23e:	f7ff f9b3 	bl	800c5a8 <__lshift>
 800d242:	4680      	mov	r8, r0
 800d244:	2800      	cmp	r0, #0
 800d246:	f43f ae46 	beq.w	800ced6 <_strtod_l+0x43e>
 800d24a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d24c:	9805      	ldr	r0, [sp, #20]
 800d24e:	464a      	mov	r2, r9
 800d250:	f7ff fa32 	bl	800c6b8 <__mdiff>
 800d254:	4604      	mov	r4, r0
 800d256:	2800      	cmp	r0, #0
 800d258:	f43f ae3d 	beq.w	800ced6 <_strtod_l+0x43e>
 800d25c:	68c3      	ldr	r3, [r0, #12]
 800d25e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d260:	2300      	movs	r3, #0
 800d262:	60c3      	str	r3, [r0, #12]
 800d264:	4641      	mov	r1, r8
 800d266:	f7ff fa0b 	bl	800c680 <__mcmp>
 800d26a:	2800      	cmp	r0, #0
 800d26c:	da46      	bge.n	800d2fc <_strtod_l+0x864>
 800d26e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d270:	ea53 030a 	orrs.w	r3, r3, sl
 800d274:	d16c      	bne.n	800d350 <_strtod_l+0x8b8>
 800d276:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d168      	bne.n	800d350 <_strtod_l+0x8b8>
 800d27e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d282:	0d1b      	lsrs	r3, r3, #20
 800d284:	051b      	lsls	r3, r3, #20
 800d286:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d28a:	d961      	bls.n	800d350 <_strtod_l+0x8b8>
 800d28c:	6963      	ldr	r3, [r4, #20]
 800d28e:	b913      	cbnz	r3, 800d296 <_strtod_l+0x7fe>
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	2b01      	cmp	r3, #1
 800d294:	dd5c      	ble.n	800d350 <_strtod_l+0x8b8>
 800d296:	4621      	mov	r1, r4
 800d298:	2201      	movs	r2, #1
 800d29a:	9805      	ldr	r0, [sp, #20]
 800d29c:	f7ff f984 	bl	800c5a8 <__lshift>
 800d2a0:	4641      	mov	r1, r8
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	f7ff f9ec 	bl	800c680 <__mcmp>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	dd51      	ble.n	800d350 <_strtod_l+0x8b8>
 800d2ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2b0:	9a08      	ldr	r2, [sp, #32]
 800d2b2:	0d1b      	lsrs	r3, r3, #20
 800d2b4:	051b      	lsls	r3, r3, #20
 800d2b6:	2a00      	cmp	r2, #0
 800d2b8:	d06b      	beq.n	800d392 <_strtod_l+0x8fa>
 800d2ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d2be:	d868      	bhi.n	800d392 <_strtod_l+0x8fa>
 800d2c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d2c4:	f67f ae9d 	bls.w	800d002 <_strtod_l+0x56a>
 800d2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d2f4 <_strtod_l+0x85c>)
 800d2ca:	4650      	mov	r0, sl
 800d2cc:	4659      	mov	r1, fp
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f7f3 f992 	bl	80005f8 <__aeabi_dmul>
 800d2d4:	4b08      	ldr	r3, [pc, #32]	@ (800d2f8 <_strtod_l+0x860>)
 800d2d6:	400b      	ands	r3, r1
 800d2d8:	4682      	mov	sl, r0
 800d2da:	468b      	mov	fp, r1
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f47f ae05 	bne.w	800ceec <_strtod_l+0x454>
 800d2e2:	9a05      	ldr	r2, [sp, #20]
 800d2e4:	2322      	movs	r3, #34	@ 0x22
 800d2e6:	6013      	str	r3, [r2, #0]
 800d2e8:	e600      	b.n	800ceec <_strtod_l+0x454>
 800d2ea:	bf00      	nop
 800d2ec:	0800ebe8 	.word	0x0800ebe8
 800d2f0:	fffffc02 	.word	0xfffffc02
 800d2f4:	39500000 	.word	0x39500000
 800d2f8:	7ff00000 	.word	0x7ff00000
 800d2fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d300:	d165      	bne.n	800d3ce <_strtod_l+0x936>
 800d302:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d308:	b35a      	cbz	r2, 800d362 <_strtod_l+0x8ca>
 800d30a:	4a9f      	ldr	r2, [pc, #636]	@ (800d588 <_strtod_l+0xaf0>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d12b      	bne.n	800d368 <_strtod_l+0x8d0>
 800d310:	9b08      	ldr	r3, [sp, #32]
 800d312:	4651      	mov	r1, sl
 800d314:	b303      	cbz	r3, 800d358 <_strtod_l+0x8c0>
 800d316:	4b9d      	ldr	r3, [pc, #628]	@ (800d58c <_strtod_l+0xaf4>)
 800d318:	465a      	mov	r2, fp
 800d31a:	4013      	ands	r3, r2
 800d31c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d320:	f04f 32ff 	mov.w	r2, #4294967295
 800d324:	d81b      	bhi.n	800d35e <_strtod_l+0x8c6>
 800d326:	0d1b      	lsrs	r3, r3, #20
 800d328:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d32c:	fa02 f303 	lsl.w	r3, r2, r3
 800d330:	4299      	cmp	r1, r3
 800d332:	d119      	bne.n	800d368 <_strtod_l+0x8d0>
 800d334:	4b96      	ldr	r3, [pc, #600]	@ (800d590 <_strtod_l+0xaf8>)
 800d336:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d338:	429a      	cmp	r2, r3
 800d33a:	d102      	bne.n	800d342 <_strtod_l+0x8aa>
 800d33c:	3101      	adds	r1, #1
 800d33e:	f43f adca 	beq.w	800ced6 <_strtod_l+0x43e>
 800d342:	4b92      	ldr	r3, [pc, #584]	@ (800d58c <_strtod_l+0xaf4>)
 800d344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d346:	401a      	ands	r2, r3
 800d348:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d34c:	f04f 0a00 	mov.w	sl, #0
 800d350:	9b08      	ldr	r3, [sp, #32]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1b8      	bne.n	800d2c8 <_strtod_l+0x830>
 800d356:	e5c9      	b.n	800ceec <_strtod_l+0x454>
 800d358:	f04f 33ff 	mov.w	r3, #4294967295
 800d35c:	e7e8      	b.n	800d330 <_strtod_l+0x898>
 800d35e:	4613      	mov	r3, r2
 800d360:	e7e6      	b.n	800d330 <_strtod_l+0x898>
 800d362:	ea53 030a 	orrs.w	r3, r3, sl
 800d366:	d0a1      	beq.n	800d2ac <_strtod_l+0x814>
 800d368:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d36a:	b1db      	cbz	r3, 800d3a4 <_strtod_l+0x90c>
 800d36c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d36e:	4213      	tst	r3, r2
 800d370:	d0ee      	beq.n	800d350 <_strtod_l+0x8b8>
 800d372:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d374:	9a08      	ldr	r2, [sp, #32]
 800d376:	4650      	mov	r0, sl
 800d378:	4659      	mov	r1, fp
 800d37a:	b1bb      	cbz	r3, 800d3ac <_strtod_l+0x914>
 800d37c:	f7ff fb6e 	bl	800ca5c <sulp>
 800d380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d384:	ec53 2b10 	vmov	r2, r3, d0
 800d388:	f7f2 ff80 	bl	800028c <__adddf3>
 800d38c:	4682      	mov	sl, r0
 800d38e:	468b      	mov	fp, r1
 800d390:	e7de      	b.n	800d350 <_strtod_l+0x8b8>
 800d392:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d396:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d39a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d39e:	f04f 3aff 	mov.w	sl, #4294967295
 800d3a2:	e7d5      	b.n	800d350 <_strtod_l+0x8b8>
 800d3a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3a6:	ea13 0f0a 	tst.w	r3, sl
 800d3aa:	e7e1      	b.n	800d370 <_strtod_l+0x8d8>
 800d3ac:	f7ff fb56 	bl	800ca5c <sulp>
 800d3b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3b4:	ec53 2b10 	vmov	r2, r3, d0
 800d3b8:	f7f2 ff66 	bl	8000288 <__aeabi_dsub>
 800d3bc:	2200      	movs	r2, #0
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4682      	mov	sl, r0
 800d3c2:	468b      	mov	fp, r1
 800d3c4:	f7f3 fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d0c1      	beq.n	800d350 <_strtod_l+0x8b8>
 800d3cc:	e619      	b.n	800d002 <_strtod_l+0x56a>
 800d3ce:	4641      	mov	r1, r8
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f7ff facd 	bl	800c970 <__ratio>
 800d3d6:	ec57 6b10 	vmov	r6, r7, d0
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	4639      	mov	r1, r7
 800d3e4:	f7f3 fb84 	bl	8000af0 <__aeabi_dcmple>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d06f      	beq.n	800d4cc <_strtod_l+0xa34>
 800d3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d17a      	bne.n	800d4e8 <_strtod_l+0xa50>
 800d3f2:	f1ba 0f00 	cmp.w	sl, #0
 800d3f6:	d158      	bne.n	800d4aa <_strtod_l+0xa12>
 800d3f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d15a      	bne.n	800d4b8 <_strtod_l+0xa20>
 800d402:	4b64      	ldr	r3, [pc, #400]	@ (800d594 <_strtod_l+0xafc>)
 800d404:	2200      	movs	r2, #0
 800d406:	4630      	mov	r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f3 fb67 	bl	8000adc <__aeabi_dcmplt>
 800d40e:	2800      	cmp	r0, #0
 800d410:	d159      	bne.n	800d4c6 <_strtod_l+0xa2e>
 800d412:	4630      	mov	r0, r6
 800d414:	4639      	mov	r1, r7
 800d416:	4b60      	ldr	r3, [pc, #384]	@ (800d598 <_strtod_l+0xb00>)
 800d418:	2200      	movs	r2, #0
 800d41a:	f7f3 f8ed 	bl	80005f8 <__aeabi_dmul>
 800d41e:	4606      	mov	r6, r0
 800d420:	460f      	mov	r7, r1
 800d422:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d426:	9606      	str	r6, [sp, #24]
 800d428:	9307      	str	r3, [sp, #28]
 800d42a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d42e:	4d57      	ldr	r5, [pc, #348]	@ (800d58c <_strtod_l+0xaf4>)
 800d430:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d436:	401d      	ands	r5, r3
 800d438:	4b58      	ldr	r3, [pc, #352]	@ (800d59c <_strtod_l+0xb04>)
 800d43a:	429d      	cmp	r5, r3
 800d43c:	f040 80b2 	bne.w	800d5a4 <_strtod_l+0xb0c>
 800d440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d442:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d446:	ec4b ab10 	vmov	d0, sl, fp
 800d44a:	f7ff f9c9 	bl	800c7e0 <__ulp>
 800d44e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d452:	ec51 0b10 	vmov	r0, r1, d0
 800d456:	f7f3 f8cf 	bl	80005f8 <__aeabi_dmul>
 800d45a:	4652      	mov	r2, sl
 800d45c:	465b      	mov	r3, fp
 800d45e:	f7f2 ff15 	bl	800028c <__adddf3>
 800d462:	460b      	mov	r3, r1
 800d464:	4949      	ldr	r1, [pc, #292]	@ (800d58c <_strtod_l+0xaf4>)
 800d466:	4a4e      	ldr	r2, [pc, #312]	@ (800d5a0 <_strtod_l+0xb08>)
 800d468:	4019      	ands	r1, r3
 800d46a:	4291      	cmp	r1, r2
 800d46c:	4682      	mov	sl, r0
 800d46e:	d942      	bls.n	800d4f6 <_strtod_l+0xa5e>
 800d470:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d472:	4b47      	ldr	r3, [pc, #284]	@ (800d590 <_strtod_l+0xaf8>)
 800d474:	429a      	cmp	r2, r3
 800d476:	d103      	bne.n	800d480 <_strtod_l+0x9e8>
 800d478:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d47a:	3301      	adds	r3, #1
 800d47c:	f43f ad2b 	beq.w	800ced6 <_strtod_l+0x43e>
 800d480:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d590 <_strtod_l+0xaf8>
 800d484:	f04f 3aff 	mov.w	sl, #4294967295
 800d488:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d48a:	9805      	ldr	r0, [sp, #20]
 800d48c:	f7fe fe74 	bl	800c178 <_Bfree>
 800d490:	9805      	ldr	r0, [sp, #20]
 800d492:	4649      	mov	r1, r9
 800d494:	f7fe fe70 	bl	800c178 <_Bfree>
 800d498:	9805      	ldr	r0, [sp, #20]
 800d49a:	4641      	mov	r1, r8
 800d49c:	f7fe fe6c 	bl	800c178 <_Bfree>
 800d4a0:	9805      	ldr	r0, [sp, #20]
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	f7fe fe68 	bl	800c178 <_Bfree>
 800d4a8:	e618      	b.n	800d0dc <_strtod_l+0x644>
 800d4aa:	f1ba 0f01 	cmp.w	sl, #1
 800d4ae:	d103      	bne.n	800d4b8 <_strtod_l+0xa20>
 800d4b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f43f ada5 	beq.w	800d002 <_strtod_l+0x56a>
 800d4b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d568 <_strtod_l+0xad0>
 800d4bc:	4f35      	ldr	r7, [pc, #212]	@ (800d594 <_strtod_l+0xafc>)
 800d4be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4c2:	2600      	movs	r6, #0
 800d4c4:	e7b1      	b.n	800d42a <_strtod_l+0x992>
 800d4c6:	4f34      	ldr	r7, [pc, #208]	@ (800d598 <_strtod_l+0xb00>)
 800d4c8:	2600      	movs	r6, #0
 800d4ca:	e7aa      	b.n	800d422 <_strtod_l+0x98a>
 800d4cc:	4b32      	ldr	r3, [pc, #200]	@ (800d598 <_strtod_l+0xb00>)
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	4639      	mov	r1, r7
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f7f3 f890 	bl	80005f8 <__aeabi_dmul>
 800d4d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4da:	4606      	mov	r6, r0
 800d4dc:	460f      	mov	r7, r1
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d09f      	beq.n	800d422 <_strtod_l+0x98a>
 800d4e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d4e6:	e7a0      	b.n	800d42a <_strtod_l+0x992>
 800d4e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d570 <_strtod_l+0xad8>
 800d4ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4f0:	ec57 6b17 	vmov	r6, r7, d7
 800d4f4:	e799      	b.n	800d42a <_strtod_l+0x992>
 800d4f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d4fa:	9b08      	ldr	r3, [sp, #32]
 800d4fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1c1      	bne.n	800d488 <_strtod_l+0x9f0>
 800d504:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d508:	0d1b      	lsrs	r3, r3, #20
 800d50a:	051b      	lsls	r3, r3, #20
 800d50c:	429d      	cmp	r5, r3
 800d50e:	d1bb      	bne.n	800d488 <_strtod_l+0x9f0>
 800d510:	4630      	mov	r0, r6
 800d512:	4639      	mov	r1, r7
 800d514:	f7f3 fbb8 	bl	8000c88 <__aeabi_d2lz>
 800d518:	f7f3 f840 	bl	800059c <__aeabi_l2d>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	4630      	mov	r0, r6
 800d522:	4639      	mov	r1, r7
 800d524:	f7f2 feb0 	bl	8000288 <__aeabi_dsub>
 800d528:	460b      	mov	r3, r1
 800d52a:	4602      	mov	r2, r0
 800d52c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d530:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d536:	ea46 060a 	orr.w	r6, r6, sl
 800d53a:	431e      	orrs	r6, r3
 800d53c:	d06f      	beq.n	800d61e <_strtod_l+0xb86>
 800d53e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d578 <_strtod_l+0xae0>)
 800d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d544:	f7f3 faca 	bl	8000adc <__aeabi_dcmplt>
 800d548:	2800      	cmp	r0, #0
 800d54a:	f47f accf 	bne.w	800ceec <_strtod_l+0x454>
 800d54e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d580 <_strtod_l+0xae8>)
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d558:	f7f3 fade 	bl	8000b18 <__aeabi_dcmpgt>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d093      	beq.n	800d488 <_strtod_l+0x9f0>
 800d560:	e4c4      	b.n	800ceec <_strtod_l+0x454>
 800d562:	bf00      	nop
 800d564:	f3af 8000 	nop.w
 800d568:	00000000 	.word	0x00000000
 800d56c:	bff00000 	.word	0xbff00000
 800d570:	00000000 	.word	0x00000000
 800d574:	3ff00000 	.word	0x3ff00000
 800d578:	94a03595 	.word	0x94a03595
 800d57c:	3fdfffff 	.word	0x3fdfffff
 800d580:	35afe535 	.word	0x35afe535
 800d584:	3fe00000 	.word	0x3fe00000
 800d588:	000fffff 	.word	0x000fffff
 800d58c:	7ff00000 	.word	0x7ff00000
 800d590:	7fefffff 	.word	0x7fefffff
 800d594:	3ff00000 	.word	0x3ff00000
 800d598:	3fe00000 	.word	0x3fe00000
 800d59c:	7fe00000 	.word	0x7fe00000
 800d5a0:	7c9fffff 	.word	0x7c9fffff
 800d5a4:	9b08      	ldr	r3, [sp, #32]
 800d5a6:	b323      	cbz	r3, 800d5f2 <_strtod_l+0xb5a>
 800d5a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d5ac:	d821      	bhi.n	800d5f2 <_strtod_l+0xb5a>
 800d5ae:	a328      	add	r3, pc, #160	@ (adr r3, 800d650 <_strtod_l+0xbb8>)
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f7f3 fa9a 	bl	8000af0 <__aeabi_dcmple>
 800d5bc:	b1a0      	cbz	r0, 800d5e8 <_strtod_l+0xb50>
 800d5be:	4639      	mov	r1, r7
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	f7f3 faf1 	bl	8000ba8 <__aeabi_d2uiz>
 800d5c6:	2801      	cmp	r0, #1
 800d5c8:	bf38      	it	cc
 800d5ca:	2001      	movcc	r0, #1
 800d5cc:	f7f2 ff9a 	bl	8000504 <__aeabi_ui2d>
 800d5d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	460f      	mov	r7, r1
 800d5d6:	b9fb      	cbnz	r3, 800d618 <_strtod_l+0xb80>
 800d5d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800d5de:	9315      	str	r3, [sp, #84]	@ 0x54
 800d5e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d5e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d5e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d5ee:	1b5b      	subs	r3, r3, r5
 800d5f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d5f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d5f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d5fa:	f7ff f8f1 	bl	800c7e0 <__ulp>
 800d5fe:	4650      	mov	r0, sl
 800d600:	ec53 2b10 	vmov	r2, r3, d0
 800d604:	4659      	mov	r1, fp
 800d606:	f7f2 fff7 	bl	80005f8 <__aeabi_dmul>
 800d60a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d60e:	f7f2 fe3d 	bl	800028c <__adddf3>
 800d612:	4682      	mov	sl, r0
 800d614:	468b      	mov	fp, r1
 800d616:	e770      	b.n	800d4fa <_strtod_l+0xa62>
 800d618:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d61c:	e7e0      	b.n	800d5e0 <_strtod_l+0xb48>
 800d61e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d658 <_strtod_l+0xbc0>)
 800d620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d624:	f7f3 fa5a 	bl	8000adc <__aeabi_dcmplt>
 800d628:	e798      	b.n	800d55c <_strtod_l+0xac4>
 800d62a:	2300      	movs	r3, #0
 800d62c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d62e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	f7ff ba6d 	b.w	800cb12 <_strtod_l+0x7a>
 800d638:	2a65      	cmp	r2, #101	@ 0x65
 800d63a:	f43f ab66 	beq.w	800cd0a <_strtod_l+0x272>
 800d63e:	2a45      	cmp	r2, #69	@ 0x45
 800d640:	f43f ab63 	beq.w	800cd0a <_strtod_l+0x272>
 800d644:	2301      	movs	r3, #1
 800d646:	f7ff bb9e 	b.w	800cd86 <_strtod_l+0x2ee>
 800d64a:	bf00      	nop
 800d64c:	f3af 8000 	nop.w
 800d650:	ffc00000 	.word	0xffc00000
 800d654:	41dfffff 	.word	0x41dfffff
 800d658:	94a03595 	.word	0x94a03595
 800d65c:	3fcfffff 	.word	0x3fcfffff

0800d660 <_strtod_r>:
 800d660:	4b01      	ldr	r3, [pc, #4]	@ (800d668 <_strtod_r+0x8>)
 800d662:	f7ff ba19 	b.w	800ca98 <_strtod_l>
 800d666:	bf00      	nop
 800d668:	200001c0 	.word	0x200001c0

0800d66c <_strtol_l.constprop.0>:
 800d66c:	2b24      	cmp	r3, #36	@ 0x24
 800d66e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d672:	4686      	mov	lr, r0
 800d674:	4690      	mov	r8, r2
 800d676:	d801      	bhi.n	800d67c <_strtol_l.constprop.0+0x10>
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d106      	bne.n	800d68a <_strtol_l.constprop.0+0x1e>
 800d67c:	f7fd fdba 	bl	800b1f4 <__errno>
 800d680:	2316      	movs	r3, #22
 800d682:	6003      	str	r3, [r0, #0]
 800d684:	2000      	movs	r0, #0
 800d686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68a:	4834      	ldr	r0, [pc, #208]	@ (800d75c <_strtol_l.constprop.0+0xf0>)
 800d68c:	460d      	mov	r5, r1
 800d68e:	462a      	mov	r2, r5
 800d690:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d694:	5d06      	ldrb	r6, [r0, r4]
 800d696:	f016 0608 	ands.w	r6, r6, #8
 800d69a:	d1f8      	bne.n	800d68e <_strtol_l.constprop.0+0x22>
 800d69c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d69e:	d12d      	bne.n	800d6fc <_strtol_l.constprop.0+0x90>
 800d6a0:	782c      	ldrb	r4, [r5, #0]
 800d6a2:	2601      	movs	r6, #1
 800d6a4:	1c95      	adds	r5, r2, #2
 800d6a6:	f033 0210 	bics.w	r2, r3, #16
 800d6aa:	d109      	bne.n	800d6c0 <_strtol_l.constprop.0+0x54>
 800d6ac:	2c30      	cmp	r4, #48	@ 0x30
 800d6ae:	d12a      	bne.n	800d706 <_strtol_l.constprop.0+0x9a>
 800d6b0:	782a      	ldrb	r2, [r5, #0]
 800d6b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d6b6:	2a58      	cmp	r2, #88	@ 0x58
 800d6b8:	d125      	bne.n	800d706 <_strtol_l.constprop.0+0x9a>
 800d6ba:	786c      	ldrb	r4, [r5, #1]
 800d6bc:	2310      	movs	r3, #16
 800d6be:	3502      	adds	r5, #2
 800d6c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d6c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	fbbc f9f3 	udiv	r9, ip, r3
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d6d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d6d8:	2f09      	cmp	r7, #9
 800d6da:	d81b      	bhi.n	800d714 <_strtol_l.constprop.0+0xa8>
 800d6dc:	463c      	mov	r4, r7
 800d6de:	42a3      	cmp	r3, r4
 800d6e0:	dd27      	ble.n	800d732 <_strtol_l.constprop.0+0xc6>
 800d6e2:	1c57      	adds	r7, r2, #1
 800d6e4:	d007      	beq.n	800d6f6 <_strtol_l.constprop.0+0x8a>
 800d6e6:	4581      	cmp	r9, r0
 800d6e8:	d320      	bcc.n	800d72c <_strtol_l.constprop.0+0xc0>
 800d6ea:	d101      	bne.n	800d6f0 <_strtol_l.constprop.0+0x84>
 800d6ec:	45a2      	cmp	sl, r4
 800d6ee:	db1d      	blt.n	800d72c <_strtol_l.constprop.0+0xc0>
 800d6f0:	fb00 4003 	mla	r0, r0, r3, r4
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6fa:	e7eb      	b.n	800d6d4 <_strtol_l.constprop.0+0x68>
 800d6fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800d6fe:	bf04      	itt	eq
 800d700:	782c      	ldrbeq	r4, [r5, #0]
 800d702:	1c95      	addeq	r5, r2, #2
 800d704:	e7cf      	b.n	800d6a6 <_strtol_l.constprop.0+0x3a>
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1da      	bne.n	800d6c0 <_strtol_l.constprop.0+0x54>
 800d70a:	2c30      	cmp	r4, #48	@ 0x30
 800d70c:	bf0c      	ite	eq
 800d70e:	2308      	moveq	r3, #8
 800d710:	230a      	movne	r3, #10
 800d712:	e7d5      	b.n	800d6c0 <_strtol_l.constprop.0+0x54>
 800d714:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d718:	2f19      	cmp	r7, #25
 800d71a:	d801      	bhi.n	800d720 <_strtol_l.constprop.0+0xb4>
 800d71c:	3c37      	subs	r4, #55	@ 0x37
 800d71e:	e7de      	b.n	800d6de <_strtol_l.constprop.0+0x72>
 800d720:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d724:	2f19      	cmp	r7, #25
 800d726:	d804      	bhi.n	800d732 <_strtol_l.constprop.0+0xc6>
 800d728:	3c57      	subs	r4, #87	@ 0x57
 800d72a:	e7d8      	b.n	800d6de <_strtol_l.constprop.0+0x72>
 800d72c:	f04f 32ff 	mov.w	r2, #4294967295
 800d730:	e7e1      	b.n	800d6f6 <_strtol_l.constprop.0+0x8a>
 800d732:	1c53      	adds	r3, r2, #1
 800d734:	d108      	bne.n	800d748 <_strtol_l.constprop.0+0xdc>
 800d736:	2322      	movs	r3, #34	@ 0x22
 800d738:	f8ce 3000 	str.w	r3, [lr]
 800d73c:	4660      	mov	r0, ip
 800d73e:	f1b8 0f00 	cmp.w	r8, #0
 800d742:	d0a0      	beq.n	800d686 <_strtol_l.constprop.0+0x1a>
 800d744:	1e69      	subs	r1, r5, #1
 800d746:	e006      	b.n	800d756 <_strtol_l.constprop.0+0xea>
 800d748:	b106      	cbz	r6, 800d74c <_strtol_l.constprop.0+0xe0>
 800d74a:	4240      	negs	r0, r0
 800d74c:	f1b8 0f00 	cmp.w	r8, #0
 800d750:	d099      	beq.n	800d686 <_strtol_l.constprop.0+0x1a>
 800d752:	2a00      	cmp	r2, #0
 800d754:	d1f6      	bne.n	800d744 <_strtol_l.constprop.0+0xd8>
 800d756:	f8c8 1000 	str.w	r1, [r8]
 800d75a:	e794      	b.n	800d686 <_strtol_l.constprop.0+0x1a>
 800d75c:	0800ec11 	.word	0x0800ec11

0800d760 <_strtol_r>:
 800d760:	f7ff bf84 	b.w	800d66c <_strtol_l.constprop.0>

0800d764 <__ssputs_r>:
 800d764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d768:	688e      	ldr	r6, [r1, #8]
 800d76a:	461f      	mov	r7, r3
 800d76c:	42be      	cmp	r6, r7
 800d76e:	680b      	ldr	r3, [r1, #0]
 800d770:	4682      	mov	sl, r0
 800d772:	460c      	mov	r4, r1
 800d774:	4690      	mov	r8, r2
 800d776:	d82d      	bhi.n	800d7d4 <__ssputs_r+0x70>
 800d778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d77c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d780:	d026      	beq.n	800d7d0 <__ssputs_r+0x6c>
 800d782:	6965      	ldr	r5, [r4, #20]
 800d784:	6909      	ldr	r1, [r1, #16]
 800d786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d78a:	eba3 0901 	sub.w	r9, r3, r1
 800d78e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d792:	1c7b      	adds	r3, r7, #1
 800d794:	444b      	add	r3, r9
 800d796:	106d      	asrs	r5, r5, #1
 800d798:	429d      	cmp	r5, r3
 800d79a:	bf38      	it	cc
 800d79c:	461d      	movcc	r5, r3
 800d79e:	0553      	lsls	r3, r2, #21
 800d7a0:	d527      	bpl.n	800d7f2 <__ssputs_r+0x8e>
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	f7fe fc1c 	bl	800bfe0 <_malloc_r>
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	b360      	cbz	r0, 800d806 <__ssputs_r+0xa2>
 800d7ac:	6921      	ldr	r1, [r4, #16]
 800d7ae:	464a      	mov	r2, r9
 800d7b0:	f000 fa9c 	bl	800dcec <memcpy>
 800d7b4:	89a3      	ldrh	r3, [r4, #12]
 800d7b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d7ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7be:	81a3      	strh	r3, [r4, #12]
 800d7c0:	6126      	str	r6, [r4, #16]
 800d7c2:	6165      	str	r5, [r4, #20]
 800d7c4:	444e      	add	r6, r9
 800d7c6:	eba5 0509 	sub.w	r5, r5, r9
 800d7ca:	6026      	str	r6, [r4, #0]
 800d7cc:	60a5      	str	r5, [r4, #8]
 800d7ce:	463e      	mov	r6, r7
 800d7d0:	42be      	cmp	r6, r7
 800d7d2:	d900      	bls.n	800d7d6 <__ssputs_r+0x72>
 800d7d4:	463e      	mov	r6, r7
 800d7d6:	6820      	ldr	r0, [r4, #0]
 800d7d8:	4632      	mov	r2, r6
 800d7da:	4641      	mov	r1, r8
 800d7dc:	f000 fa28 	bl	800dc30 <memmove>
 800d7e0:	68a3      	ldr	r3, [r4, #8]
 800d7e2:	1b9b      	subs	r3, r3, r6
 800d7e4:	60a3      	str	r3, [r4, #8]
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	4433      	add	r3, r6
 800d7ea:	6023      	str	r3, [r4, #0]
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f2:	462a      	mov	r2, r5
 800d7f4:	f000 fe0d 	bl	800e412 <_realloc_r>
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d1e0      	bne.n	800d7c0 <__ssputs_r+0x5c>
 800d7fe:	6921      	ldr	r1, [r4, #16]
 800d800:	4650      	mov	r0, sl
 800d802:	f7fe fb79 	bl	800bef8 <_free_r>
 800d806:	230c      	movs	r3, #12
 800d808:	f8ca 3000 	str.w	r3, [sl]
 800d80c:	89a3      	ldrh	r3, [r4, #12]
 800d80e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d812:	81a3      	strh	r3, [r4, #12]
 800d814:	f04f 30ff 	mov.w	r0, #4294967295
 800d818:	e7e9      	b.n	800d7ee <__ssputs_r+0x8a>
	...

0800d81c <_svfiprintf_r>:
 800d81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	4698      	mov	r8, r3
 800d822:	898b      	ldrh	r3, [r1, #12]
 800d824:	061b      	lsls	r3, r3, #24
 800d826:	b09d      	sub	sp, #116	@ 0x74
 800d828:	4607      	mov	r7, r0
 800d82a:	460d      	mov	r5, r1
 800d82c:	4614      	mov	r4, r2
 800d82e:	d510      	bpl.n	800d852 <_svfiprintf_r+0x36>
 800d830:	690b      	ldr	r3, [r1, #16]
 800d832:	b973      	cbnz	r3, 800d852 <_svfiprintf_r+0x36>
 800d834:	2140      	movs	r1, #64	@ 0x40
 800d836:	f7fe fbd3 	bl	800bfe0 <_malloc_r>
 800d83a:	6028      	str	r0, [r5, #0]
 800d83c:	6128      	str	r0, [r5, #16]
 800d83e:	b930      	cbnz	r0, 800d84e <_svfiprintf_r+0x32>
 800d840:	230c      	movs	r3, #12
 800d842:	603b      	str	r3, [r7, #0]
 800d844:	f04f 30ff 	mov.w	r0, #4294967295
 800d848:	b01d      	add	sp, #116	@ 0x74
 800d84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84e:	2340      	movs	r3, #64	@ 0x40
 800d850:	616b      	str	r3, [r5, #20]
 800d852:	2300      	movs	r3, #0
 800d854:	9309      	str	r3, [sp, #36]	@ 0x24
 800d856:	2320      	movs	r3, #32
 800d858:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d85c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d860:	2330      	movs	r3, #48	@ 0x30
 800d862:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da00 <_svfiprintf_r+0x1e4>
 800d866:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d86a:	f04f 0901 	mov.w	r9, #1
 800d86e:	4623      	mov	r3, r4
 800d870:	469a      	mov	sl, r3
 800d872:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d876:	b10a      	cbz	r2, 800d87c <_svfiprintf_r+0x60>
 800d878:	2a25      	cmp	r2, #37	@ 0x25
 800d87a:	d1f9      	bne.n	800d870 <_svfiprintf_r+0x54>
 800d87c:	ebba 0b04 	subs.w	fp, sl, r4
 800d880:	d00b      	beq.n	800d89a <_svfiprintf_r+0x7e>
 800d882:	465b      	mov	r3, fp
 800d884:	4622      	mov	r2, r4
 800d886:	4629      	mov	r1, r5
 800d888:	4638      	mov	r0, r7
 800d88a:	f7ff ff6b 	bl	800d764 <__ssputs_r>
 800d88e:	3001      	adds	r0, #1
 800d890:	f000 80a7 	beq.w	800d9e2 <_svfiprintf_r+0x1c6>
 800d894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d896:	445a      	add	r2, fp
 800d898:	9209      	str	r2, [sp, #36]	@ 0x24
 800d89a:	f89a 3000 	ldrb.w	r3, [sl]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 809f 	beq.w	800d9e2 <_svfiprintf_r+0x1c6>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8ae:	f10a 0a01 	add.w	sl, sl, #1
 800d8b2:	9304      	str	r3, [sp, #16]
 800d8b4:	9307      	str	r3, [sp, #28]
 800d8b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8bc:	4654      	mov	r4, sl
 800d8be:	2205      	movs	r2, #5
 800d8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c4:	484e      	ldr	r0, [pc, #312]	@ (800da00 <_svfiprintf_r+0x1e4>)
 800d8c6:	f7f2 fc83 	bl	80001d0 <memchr>
 800d8ca:	9a04      	ldr	r2, [sp, #16]
 800d8cc:	b9d8      	cbnz	r0, 800d906 <_svfiprintf_r+0xea>
 800d8ce:	06d0      	lsls	r0, r2, #27
 800d8d0:	bf44      	itt	mi
 800d8d2:	2320      	movmi	r3, #32
 800d8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8d8:	0711      	lsls	r1, r2, #28
 800d8da:	bf44      	itt	mi
 800d8dc:	232b      	movmi	r3, #43	@ 0x2b
 800d8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8e8:	d015      	beq.n	800d916 <_svfiprintf_r+0xfa>
 800d8ea:	9a07      	ldr	r2, [sp, #28]
 800d8ec:	4654      	mov	r4, sl
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	f04f 0c0a 	mov.w	ip, #10
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8fa:	3b30      	subs	r3, #48	@ 0x30
 800d8fc:	2b09      	cmp	r3, #9
 800d8fe:	d94b      	bls.n	800d998 <_svfiprintf_r+0x17c>
 800d900:	b1b0      	cbz	r0, 800d930 <_svfiprintf_r+0x114>
 800d902:	9207      	str	r2, [sp, #28]
 800d904:	e014      	b.n	800d930 <_svfiprintf_r+0x114>
 800d906:	eba0 0308 	sub.w	r3, r0, r8
 800d90a:	fa09 f303 	lsl.w	r3, r9, r3
 800d90e:	4313      	orrs	r3, r2
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	46a2      	mov	sl, r4
 800d914:	e7d2      	b.n	800d8bc <_svfiprintf_r+0xa0>
 800d916:	9b03      	ldr	r3, [sp, #12]
 800d918:	1d19      	adds	r1, r3, #4
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	9103      	str	r1, [sp, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	bfbb      	ittet	lt
 800d922:	425b      	neglt	r3, r3
 800d924:	f042 0202 	orrlt.w	r2, r2, #2
 800d928:	9307      	strge	r3, [sp, #28]
 800d92a:	9307      	strlt	r3, [sp, #28]
 800d92c:	bfb8      	it	lt
 800d92e:	9204      	strlt	r2, [sp, #16]
 800d930:	7823      	ldrb	r3, [r4, #0]
 800d932:	2b2e      	cmp	r3, #46	@ 0x2e
 800d934:	d10a      	bne.n	800d94c <_svfiprintf_r+0x130>
 800d936:	7863      	ldrb	r3, [r4, #1]
 800d938:	2b2a      	cmp	r3, #42	@ 0x2a
 800d93a:	d132      	bne.n	800d9a2 <_svfiprintf_r+0x186>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	1d1a      	adds	r2, r3, #4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	9203      	str	r2, [sp, #12]
 800d944:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d948:	3402      	adds	r4, #2
 800d94a:	9305      	str	r3, [sp, #20]
 800d94c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da10 <_svfiprintf_r+0x1f4>
 800d950:	7821      	ldrb	r1, [r4, #0]
 800d952:	2203      	movs	r2, #3
 800d954:	4650      	mov	r0, sl
 800d956:	f7f2 fc3b 	bl	80001d0 <memchr>
 800d95a:	b138      	cbz	r0, 800d96c <_svfiprintf_r+0x150>
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	eba0 000a 	sub.w	r0, r0, sl
 800d962:	2240      	movs	r2, #64	@ 0x40
 800d964:	4082      	lsls	r2, r0
 800d966:	4313      	orrs	r3, r2
 800d968:	3401      	adds	r4, #1
 800d96a:	9304      	str	r3, [sp, #16]
 800d96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d970:	4824      	ldr	r0, [pc, #144]	@ (800da04 <_svfiprintf_r+0x1e8>)
 800d972:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d976:	2206      	movs	r2, #6
 800d978:	f7f2 fc2a 	bl	80001d0 <memchr>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d036      	beq.n	800d9ee <_svfiprintf_r+0x1d2>
 800d980:	4b21      	ldr	r3, [pc, #132]	@ (800da08 <_svfiprintf_r+0x1ec>)
 800d982:	bb1b      	cbnz	r3, 800d9cc <_svfiprintf_r+0x1b0>
 800d984:	9b03      	ldr	r3, [sp, #12]
 800d986:	3307      	adds	r3, #7
 800d988:	f023 0307 	bic.w	r3, r3, #7
 800d98c:	3308      	adds	r3, #8
 800d98e:	9303      	str	r3, [sp, #12]
 800d990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d992:	4433      	add	r3, r6
 800d994:	9309      	str	r3, [sp, #36]	@ 0x24
 800d996:	e76a      	b.n	800d86e <_svfiprintf_r+0x52>
 800d998:	fb0c 3202 	mla	r2, ip, r2, r3
 800d99c:	460c      	mov	r4, r1
 800d99e:	2001      	movs	r0, #1
 800d9a0:	e7a8      	b.n	800d8f4 <_svfiprintf_r+0xd8>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	3401      	adds	r4, #1
 800d9a6:	9305      	str	r3, [sp, #20]
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	f04f 0c0a 	mov.w	ip, #10
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9b4:	3a30      	subs	r2, #48	@ 0x30
 800d9b6:	2a09      	cmp	r2, #9
 800d9b8:	d903      	bls.n	800d9c2 <_svfiprintf_r+0x1a6>
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0c6      	beq.n	800d94c <_svfiprintf_r+0x130>
 800d9be:	9105      	str	r1, [sp, #20]
 800d9c0:	e7c4      	b.n	800d94c <_svfiprintf_r+0x130>
 800d9c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e7f0      	b.n	800d9ae <_svfiprintf_r+0x192>
 800d9cc:	ab03      	add	r3, sp, #12
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	462a      	mov	r2, r5
 800d9d2:	4b0e      	ldr	r3, [pc, #56]	@ (800da0c <_svfiprintf_r+0x1f0>)
 800d9d4:	a904      	add	r1, sp, #16
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	f7fc fbd6 	bl	800a188 <_printf_float>
 800d9dc:	1c42      	adds	r2, r0, #1
 800d9de:	4606      	mov	r6, r0
 800d9e0:	d1d6      	bne.n	800d990 <_svfiprintf_r+0x174>
 800d9e2:	89ab      	ldrh	r3, [r5, #12]
 800d9e4:	065b      	lsls	r3, r3, #25
 800d9e6:	f53f af2d 	bmi.w	800d844 <_svfiprintf_r+0x28>
 800d9ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9ec:	e72c      	b.n	800d848 <_svfiprintf_r+0x2c>
 800d9ee:	ab03      	add	r3, sp, #12
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	462a      	mov	r2, r5
 800d9f4:	4b05      	ldr	r3, [pc, #20]	@ (800da0c <_svfiprintf_r+0x1f0>)
 800d9f6:	a904      	add	r1, sp, #16
 800d9f8:	4638      	mov	r0, r7
 800d9fa:	f7fc fe5d 	bl	800a6b8 <_printf_i>
 800d9fe:	e7ed      	b.n	800d9dc <_svfiprintf_r+0x1c0>
 800da00:	0800ed11 	.word	0x0800ed11
 800da04:	0800ed1b 	.word	0x0800ed1b
 800da08:	0800a189 	.word	0x0800a189
 800da0c:	0800d765 	.word	0x0800d765
 800da10:	0800ed17 	.word	0x0800ed17

0800da14 <__sflush_r>:
 800da14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1c:	0716      	lsls	r6, r2, #28
 800da1e:	4605      	mov	r5, r0
 800da20:	460c      	mov	r4, r1
 800da22:	d454      	bmi.n	800dace <__sflush_r+0xba>
 800da24:	684b      	ldr	r3, [r1, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	dc02      	bgt.n	800da30 <__sflush_r+0x1c>
 800da2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	dd48      	ble.n	800dac2 <__sflush_r+0xae>
 800da30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da32:	2e00      	cmp	r6, #0
 800da34:	d045      	beq.n	800dac2 <__sflush_r+0xae>
 800da36:	2300      	movs	r3, #0
 800da38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da3c:	682f      	ldr	r7, [r5, #0]
 800da3e:	6a21      	ldr	r1, [r4, #32]
 800da40:	602b      	str	r3, [r5, #0]
 800da42:	d030      	beq.n	800daa6 <__sflush_r+0x92>
 800da44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da46:	89a3      	ldrh	r3, [r4, #12]
 800da48:	0759      	lsls	r1, r3, #29
 800da4a:	d505      	bpl.n	800da58 <__sflush_r+0x44>
 800da4c:	6863      	ldr	r3, [r4, #4]
 800da4e:	1ad2      	subs	r2, r2, r3
 800da50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da52:	b10b      	cbz	r3, 800da58 <__sflush_r+0x44>
 800da54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	2300      	movs	r3, #0
 800da5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da5c:	6a21      	ldr	r1, [r4, #32]
 800da5e:	4628      	mov	r0, r5
 800da60:	47b0      	blx	r6
 800da62:	1c43      	adds	r3, r0, #1
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	d106      	bne.n	800da76 <__sflush_r+0x62>
 800da68:	6829      	ldr	r1, [r5, #0]
 800da6a:	291d      	cmp	r1, #29
 800da6c:	d82b      	bhi.n	800dac6 <__sflush_r+0xb2>
 800da6e:	4a2a      	ldr	r2, [pc, #168]	@ (800db18 <__sflush_r+0x104>)
 800da70:	410a      	asrs	r2, r1
 800da72:	07d6      	lsls	r6, r2, #31
 800da74:	d427      	bmi.n	800dac6 <__sflush_r+0xb2>
 800da76:	2200      	movs	r2, #0
 800da78:	6062      	str	r2, [r4, #4]
 800da7a:	04d9      	lsls	r1, r3, #19
 800da7c:	6922      	ldr	r2, [r4, #16]
 800da7e:	6022      	str	r2, [r4, #0]
 800da80:	d504      	bpl.n	800da8c <__sflush_r+0x78>
 800da82:	1c42      	adds	r2, r0, #1
 800da84:	d101      	bne.n	800da8a <__sflush_r+0x76>
 800da86:	682b      	ldr	r3, [r5, #0]
 800da88:	b903      	cbnz	r3, 800da8c <__sflush_r+0x78>
 800da8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800da8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da8e:	602f      	str	r7, [r5, #0]
 800da90:	b1b9      	cbz	r1, 800dac2 <__sflush_r+0xae>
 800da92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da96:	4299      	cmp	r1, r3
 800da98:	d002      	beq.n	800daa0 <__sflush_r+0x8c>
 800da9a:	4628      	mov	r0, r5
 800da9c:	f7fe fa2c 	bl	800bef8 <_free_r>
 800daa0:	2300      	movs	r3, #0
 800daa2:	6363      	str	r3, [r4, #52]	@ 0x34
 800daa4:	e00d      	b.n	800dac2 <__sflush_r+0xae>
 800daa6:	2301      	movs	r3, #1
 800daa8:	4628      	mov	r0, r5
 800daaa:	47b0      	blx	r6
 800daac:	4602      	mov	r2, r0
 800daae:	1c50      	adds	r0, r2, #1
 800dab0:	d1c9      	bne.n	800da46 <__sflush_r+0x32>
 800dab2:	682b      	ldr	r3, [r5, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d0c6      	beq.n	800da46 <__sflush_r+0x32>
 800dab8:	2b1d      	cmp	r3, #29
 800daba:	d001      	beq.n	800dac0 <__sflush_r+0xac>
 800dabc:	2b16      	cmp	r3, #22
 800dabe:	d11e      	bne.n	800dafe <__sflush_r+0xea>
 800dac0:	602f      	str	r7, [r5, #0]
 800dac2:	2000      	movs	r0, #0
 800dac4:	e022      	b.n	800db0c <__sflush_r+0xf8>
 800dac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daca:	b21b      	sxth	r3, r3
 800dacc:	e01b      	b.n	800db06 <__sflush_r+0xf2>
 800dace:	690f      	ldr	r7, [r1, #16]
 800dad0:	2f00      	cmp	r7, #0
 800dad2:	d0f6      	beq.n	800dac2 <__sflush_r+0xae>
 800dad4:	0793      	lsls	r3, r2, #30
 800dad6:	680e      	ldr	r6, [r1, #0]
 800dad8:	bf08      	it	eq
 800dada:	694b      	ldreq	r3, [r1, #20]
 800dadc:	600f      	str	r7, [r1, #0]
 800dade:	bf18      	it	ne
 800dae0:	2300      	movne	r3, #0
 800dae2:	eba6 0807 	sub.w	r8, r6, r7
 800dae6:	608b      	str	r3, [r1, #8]
 800dae8:	f1b8 0f00 	cmp.w	r8, #0
 800daec:	dde9      	ble.n	800dac2 <__sflush_r+0xae>
 800daee:	6a21      	ldr	r1, [r4, #32]
 800daf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800daf2:	4643      	mov	r3, r8
 800daf4:	463a      	mov	r2, r7
 800daf6:	4628      	mov	r0, r5
 800daf8:	47b0      	blx	r6
 800dafa:	2800      	cmp	r0, #0
 800dafc:	dc08      	bgt.n	800db10 <__sflush_r+0xfc>
 800dafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db06:	81a3      	strh	r3, [r4, #12]
 800db08:	f04f 30ff 	mov.w	r0, #4294967295
 800db0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db10:	4407      	add	r7, r0
 800db12:	eba8 0800 	sub.w	r8, r8, r0
 800db16:	e7e7      	b.n	800dae8 <__sflush_r+0xd4>
 800db18:	dfbffffe 	.word	0xdfbffffe

0800db1c <_fflush_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	690b      	ldr	r3, [r1, #16]
 800db20:	4605      	mov	r5, r0
 800db22:	460c      	mov	r4, r1
 800db24:	b913      	cbnz	r3, 800db2c <_fflush_r+0x10>
 800db26:	2500      	movs	r5, #0
 800db28:	4628      	mov	r0, r5
 800db2a:	bd38      	pop	{r3, r4, r5, pc}
 800db2c:	b118      	cbz	r0, 800db36 <_fflush_r+0x1a>
 800db2e:	6a03      	ldr	r3, [r0, #32]
 800db30:	b90b      	cbnz	r3, 800db36 <_fflush_r+0x1a>
 800db32:	f7fd f981 	bl	800ae38 <__sinit>
 800db36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d0f3      	beq.n	800db26 <_fflush_r+0xa>
 800db3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db40:	07d0      	lsls	r0, r2, #31
 800db42:	d404      	bmi.n	800db4e <_fflush_r+0x32>
 800db44:	0599      	lsls	r1, r3, #22
 800db46:	d402      	bmi.n	800db4e <_fflush_r+0x32>
 800db48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db4a:	f7fd fb7e 	bl	800b24a <__retarget_lock_acquire_recursive>
 800db4e:	4628      	mov	r0, r5
 800db50:	4621      	mov	r1, r4
 800db52:	f7ff ff5f 	bl	800da14 <__sflush_r>
 800db56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db58:	07da      	lsls	r2, r3, #31
 800db5a:	4605      	mov	r5, r0
 800db5c:	d4e4      	bmi.n	800db28 <_fflush_r+0xc>
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	059b      	lsls	r3, r3, #22
 800db62:	d4e1      	bmi.n	800db28 <_fflush_r+0xc>
 800db64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db66:	f7fd fb71 	bl	800b24c <__retarget_lock_release_recursive>
 800db6a:	e7dd      	b.n	800db28 <_fflush_r+0xc>

0800db6c <__swhatbuf_r>:
 800db6c:	b570      	push	{r4, r5, r6, lr}
 800db6e:	460c      	mov	r4, r1
 800db70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db74:	2900      	cmp	r1, #0
 800db76:	b096      	sub	sp, #88	@ 0x58
 800db78:	4615      	mov	r5, r2
 800db7a:	461e      	mov	r6, r3
 800db7c:	da0d      	bge.n	800db9a <__swhatbuf_r+0x2e>
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db84:	f04f 0100 	mov.w	r1, #0
 800db88:	bf14      	ite	ne
 800db8a:	2340      	movne	r3, #64	@ 0x40
 800db8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db90:	2000      	movs	r0, #0
 800db92:	6031      	str	r1, [r6, #0]
 800db94:	602b      	str	r3, [r5, #0]
 800db96:	b016      	add	sp, #88	@ 0x58
 800db98:	bd70      	pop	{r4, r5, r6, pc}
 800db9a:	466a      	mov	r2, sp
 800db9c:	f000 f874 	bl	800dc88 <_fstat_r>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	dbec      	blt.n	800db7e <__swhatbuf_r+0x12>
 800dba4:	9901      	ldr	r1, [sp, #4]
 800dba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dbaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dbae:	4259      	negs	r1, r3
 800dbb0:	4159      	adcs	r1, r3
 800dbb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbb6:	e7eb      	b.n	800db90 <__swhatbuf_r+0x24>

0800dbb8 <__smakebuf_r>:
 800dbb8:	898b      	ldrh	r3, [r1, #12]
 800dbba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbbc:	079d      	lsls	r5, r3, #30
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	d507      	bpl.n	800dbd4 <__smakebuf_r+0x1c>
 800dbc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dbc8:	6023      	str	r3, [r4, #0]
 800dbca:	6123      	str	r3, [r4, #16]
 800dbcc:	2301      	movs	r3, #1
 800dbce:	6163      	str	r3, [r4, #20]
 800dbd0:	b003      	add	sp, #12
 800dbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbd4:	ab01      	add	r3, sp, #4
 800dbd6:	466a      	mov	r2, sp
 800dbd8:	f7ff ffc8 	bl	800db6c <__swhatbuf_r>
 800dbdc:	9f00      	ldr	r7, [sp, #0]
 800dbde:	4605      	mov	r5, r0
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f7fe f9fc 	bl	800bfe0 <_malloc_r>
 800dbe8:	b948      	cbnz	r0, 800dbfe <__smakebuf_r+0x46>
 800dbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbee:	059a      	lsls	r2, r3, #22
 800dbf0:	d4ee      	bmi.n	800dbd0 <__smakebuf_r+0x18>
 800dbf2:	f023 0303 	bic.w	r3, r3, #3
 800dbf6:	f043 0302 	orr.w	r3, r3, #2
 800dbfa:	81a3      	strh	r3, [r4, #12]
 800dbfc:	e7e2      	b.n	800dbc4 <__smakebuf_r+0xc>
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	6020      	str	r0, [r4, #0]
 800dc02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc06:	81a3      	strh	r3, [r4, #12]
 800dc08:	9b01      	ldr	r3, [sp, #4]
 800dc0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc0e:	b15b      	cbz	r3, 800dc28 <__smakebuf_r+0x70>
 800dc10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc14:	4630      	mov	r0, r6
 800dc16:	f000 f849 	bl	800dcac <_isatty_r>
 800dc1a:	b128      	cbz	r0, 800dc28 <__smakebuf_r+0x70>
 800dc1c:	89a3      	ldrh	r3, [r4, #12]
 800dc1e:	f023 0303 	bic.w	r3, r3, #3
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	81a3      	strh	r3, [r4, #12]
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	431d      	orrs	r5, r3
 800dc2c:	81a5      	strh	r5, [r4, #12]
 800dc2e:	e7cf      	b.n	800dbd0 <__smakebuf_r+0x18>

0800dc30 <memmove>:
 800dc30:	4288      	cmp	r0, r1
 800dc32:	b510      	push	{r4, lr}
 800dc34:	eb01 0402 	add.w	r4, r1, r2
 800dc38:	d902      	bls.n	800dc40 <memmove+0x10>
 800dc3a:	4284      	cmp	r4, r0
 800dc3c:	4623      	mov	r3, r4
 800dc3e:	d807      	bhi.n	800dc50 <memmove+0x20>
 800dc40:	1e43      	subs	r3, r0, #1
 800dc42:	42a1      	cmp	r1, r4
 800dc44:	d008      	beq.n	800dc58 <memmove+0x28>
 800dc46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc4e:	e7f8      	b.n	800dc42 <memmove+0x12>
 800dc50:	4402      	add	r2, r0
 800dc52:	4601      	mov	r1, r0
 800dc54:	428a      	cmp	r2, r1
 800dc56:	d100      	bne.n	800dc5a <memmove+0x2a>
 800dc58:	bd10      	pop	{r4, pc}
 800dc5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc62:	e7f7      	b.n	800dc54 <memmove+0x24>

0800dc64 <strncmp>:
 800dc64:	b510      	push	{r4, lr}
 800dc66:	b16a      	cbz	r2, 800dc84 <strncmp+0x20>
 800dc68:	3901      	subs	r1, #1
 800dc6a:	1884      	adds	r4, r0, r2
 800dc6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d103      	bne.n	800dc80 <strncmp+0x1c>
 800dc78:	42a0      	cmp	r0, r4
 800dc7a:	d001      	beq.n	800dc80 <strncmp+0x1c>
 800dc7c:	2a00      	cmp	r2, #0
 800dc7e:	d1f5      	bne.n	800dc6c <strncmp+0x8>
 800dc80:	1ad0      	subs	r0, r2, r3
 800dc82:	bd10      	pop	{r4, pc}
 800dc84:	4610      	mov	r0, r2
 800dc86:	e7fc      	b.n	800dc82 <strncmp+0x1e>

0800dc88 <_fstat_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4d07      	ldr	r5, [pc, #28]	@ (800dca8 <_fstat_r+0x20>)
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	4604      	mov	r4, r0
 800dc90:	4608      	mov	r0, r1
 800dc92:	4611      	mov	r1, r2
 800dc94:	602b      	str	r3, [r5, #0]
 800dc96:	f7f3 fde5 	bl	8001864 <_fstat>
 800dc9a:	1c43      	adds	r3, r0, #1
 800dc9c:	d102      	bne.n	800dca4 <_fstat_r+0x1c>
 800dc9e:	682b      	ldr	r3, [r5, #0]
 800dca0:	b103      	cbz	r3, 800dca4 <_fstat_r+0x1c>
 800dca2:	6023      	str	r3, [r4, #0]
 800dca4:	bd38      	pop	{r3, r4, r5, pc}
 800dca6:	bf00      	nop
 800dca8:	20000d44 	.word	0x20000d44

0800dcac <_isatty_r>:
 800dcac:	b538      	push	{r3, r4, r5, lr}
 800dcae:	4d06      	ldr	r5, [pc, #24]	@ (800dcc8 <_isatty_r+0x1c>)
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	4608      	mov	r0, r1
 800dcb6:	602b      	str	r3, [r5, #0]
 800dcb8:	f7f3 fde4 	bl	8001884 <_isatty>
 800dcbc:	1c43      	adds	r3, r0, #1
 800dcbe:	d102      	bne.n	800dcc6 <_isatty_r+0x1a>
 800dcc0:	682b      	ldr	r3, [r5, #0]
 800dcc2:	b103      	cbz	r3, 800dcc6 <_isatty_r+0x1a>
 800dcc4:	6023      	str	r3, [r4, #0]
 800dcc6:	bd38      	pop	{r3, r4, r5, pc}
 800dcc8:	20000d44 	.word	0x20000d44

0800dccc <_sbrk_r>:
 800dccc:	b538      	push	{r3, r4, r5, lr}
 800dcce:	4d06      	ldr	r5, [pc, #24]	@ (800dce8 <_sbrk_r+0x1c>)
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	602b      	str	r3, [r5, #0]
 800dcd8:	f7f3 fdec 	bl	80018b4 <_sbrk>
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	d102      	bne.n	800dce6 <_sbrk_r+0x1a>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	b103      	cbz	r3, 800dce6 <_sbrk_r+0x1a>
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	bd38      	pop	{r3, r4, r5, pc}
 800dce8:	20000d44 	.word	0x20000d44

0800dcec <memcpy>:
 800dcec:	440a      	add	r2, r1
 800dcee:	4291      	cmp	r1, r2
 800dcf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcf4:	d100      	bne.n	800dcf8 <memcpy+0xc>
 800dcf6:	4770      	bx	lr
 800dcf8:	b510      	push	{r4, lr}
 800dcfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd02:	4291      	cmp	r1, r2
 800dd04:	d1f9      	bne.n	800dcfa <memcpy+0xe>
 800dd06:	bd10      	pop	{r4, pc}

0800dd08 <nan>:
 800dd08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dd10 <nan+0x8>
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	00000000 	.word	0x00000000
 800dd14:	7ff80000 	.word	0x7ff80000

0800dd18 <__assert_func>:
 800dd18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd1a:	4614      	mov	r4, r2
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	4b09      	ldr	r3, [pc, #36]	@ (800dd44 <__assert_func+0x2c>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4605      	mov	r5, r0
 800dd24:	68d8      	ldr	r0, [r3, #12]
 800dd26:	b954      	cbnz	r4, 800dd3e <__assert_func+0x26>
 800dd28:	4b07      	ldr	r3, [pc, #28]	@ (800dd48 <__assert_func+0x30>)
 800dd2a:	461c      	mov	r4, r3
 800dd2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd30:	9100      	str	r1, [sp, #0]
 800dd32:	462b      	mov	r3, r5
 800dd34:	4905      	ldr	r1, [pc, #20]	@ (800dd4c <__assert_func+0x34>)
 800dd36:	f000 fba7 	bl	800e488 <fiprintf>
 800dd3a:	f000 fbb7 	bl	800e4ac <abort>
 800dd3e:	4b04      	ldr	r3, [pc, #16]	@ (800dd50 <__assert_func+0x38>)
 800dd40:	e7f4      	b.n	800dd2c <__assert_func+0x14>
 800dd42:	bf00      	nop
 800dd44:	20000170 	.word	0x20000170
 800dd48:	0800ed65 	.word	0x0800ed65
 800dd4c:	0800ed37 	.word	0x0800ed37
 800dd50:	0800ed2a 	.word	0x0800ed2a

0800dd54 <_calloc_r>:
 800dd54:	b570      	push	{r4, r5, r6, lr}
 800dd56:	fba1 5402 	umull	r5, r4, r1, r2
 800dd5a:	b93c      	cbnz	r4, 800dd6c <_calloc_r+0x18>
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	f7fe f93f 	bl	800bfe0 <_malloc_r>
 800dd62:	4606      	mov	r6, r0
 800dd64:	b928      	cbnz	r0, 800dd72 <_calloc_r+0x1e>
 800dd66:	2600      	movs	r6, #0
 800dd68:	4630      	mov	r0, r6
 800dd6a:	bd70      	pop	{r4, r5, r6, pc}
 800dd6c:	220c      	movs	r2, #12
 800dd6e:	6002      	str	r2, [r0, #0]
 800dd70:	e7f9      	b.n	800dd66 <_calloc_r+0x12>
 800dd72:	462a      	mov	r2, r5
 800dd74:	4621      	mov	r1, r4
 800dd76:	f7fd f9eb 	bl	800b150 <memset>
 800dd7a:	e7f5      	b.n	800dd68 <_calloc_r+0x14>

0800dd7c <rshift>:
 800dd7c:	6903      	ldr	r3, [r0, #16]
 800dd7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd8a:	f100 0414 	add.w	r4, r0, #20
 800dd8e:	dd45      	ble.n	800de1c <rshift+0xa0>
 800dd90:	f011 011f 	ands.w	r1, r1, #31
 800dd94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd9c:	d10c      	bne.n	800ddb8 <rshift+0x3c>
 800dd9e:	f100 0710 	add.w	r7, r0, #16
 800dda2:	4629      	mov	r1, r5
 800dda4:	42b1      	cmp	r1, r6
 800dda6:	d334      	bcc.n	800de12 <rshift+0x96>
 800dda8:	1a9b      	subs	r3, r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	1eea      	subs	r2, r5, #3
 800ddae:	4296      	cmp	r6, r2
 800ddb0:	bf38      	it	cc
 800ddb2:	2300      	movcc	r3, #0
 800ddb4:	4423      	add	r3, r4
 800ddb6:	e015      	b.n	800dde4 <rshift+0x68>
 800ddb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ddbc:	f1c1 0820 	rsb	r8, r1, #32
 800ddc0:	40cf      	lsrs	r7, r1
 800ddc2:	f105 0e04 	add.w	lr, r5, #4
 800ddc6:	46a1      	mov	r9, r4
 800ddc8:	4576      	cmp	r6, lr
 800ddca:	46f4      	mov	ip, lr
 800ddcc:	d815      	bhi.n	800ddfa <rshift+0x7e>
 800ddce:	1a9a      	subs	r2, r3, r2
 800ddd0:	0092      	lsls	r2, r2, #2
 800ddd2:	3a04      	subs	r2, #4
 800ddd4:	3501      	adds	r5, #1
 800ddd6:	42ae      	cmp	r6, r5
 800ddd8:	bf38      	it	cc
 800ddda:	2200      	movcc	r2, #0
 800dddc:	18a3      	adds	r3, r4, r2
 800ddde:	50a7      	str	r7, [r4, r2]
 800dde0:	b107      	cbz	r7, 800dde4 <rshift+0x68>
 800dde2:	3304      	adds	r3, #4
 800dde4:	1b1a      	subs	r2, r3, r4
 800dde6:	42a3      	cmp	r3, r4
 800dde8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ddec:	bf08      	it	eq
 800ddee:	2300      	moveq	r3, #0
 800ddf0:	6102      	str	r2, [r0, #16]
 800ddf2:	bf08      	it	eq
 800ddf4:	6143      	streq	r3, [r0, #20]
 800ddf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddfa:	f8dc c000 	ldr.w	ip, [ip]
 800ddfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800de02:	ea4c 0707 	orr.w	r7, ip, r7
 800de06:	f849 7b04 	str.w	r7, [r9], #4
 800de0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de0e:	40cf      	lsrs	r7, r1
 800de10:	e7da      	b.n	800ddc8 <rshift+0x4c>
 800de12:	f851 cb04 	ldr.w	ip, [r1], #4
 800de16:	f847 cf04 	str.w	ip, [r7, #4]!
 800de1a:	e7c3      	b.n	800dda4 <rshift+0x28>
 800de1c:	4623      	mov	r3, r4
 800de1e:	e7e1      	b.n	800dde4 <rshift+0x68>

0800de20 <__hexdig_fun>:
 800de20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800de24:	2b09      	cmp	r3, #9
 800de26:	d802      	bhi.n	800de2e <__hexdig_fun+0xe>
 800de28:	3820      	subs	r0, #32
 800de2a:	b2c0      	uxtb	r0, r0
 800de2c:	4770      	bx	lr
 800de2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800de32:	2b05      	cmp	r3, #5
 800de34:	d801      	bhi.n	800de3a <__hexdig_fun+0x1a>
 800de36:	3847      	subs	r0, #71	@ 0x47
 800de38:	e7f7      	b.n	800de2a <__hexdig_fun+0xa>
 800de3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800de3e:	2b05      	cmp	r3, #5
 800de40:	d801      	bhi.n	800de46 <__hexdig_fun+0x26>
 800de42:	3827      	subs	r0, #39	@ 0x27
 800de44:	e7f1      	b.n	800de2a <__hexdig_fun+0xa>
 800de46:	2000      	movs	r0, #0
 800de48:	4770      	bx	lr
	...

0800de4c <__gethex>:
 800de4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de50:	b085      	sub	sp, #20
 800de52:	468a      	mov	sl, r1
 800de54:	9302      	str	r3, [sp, #8]
 800de56:	680b      	ldr	r3, [r1, #0]
 800de58:	9001      	str	r0, [sp, #4]
 800de5a:	4690      	mov	r8, r2
 800de5c:	1c9c      	adds	r4, r3, #2
 800de5e:	46a1      	mov	r9, r4
 800de60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800de64:	2830      	cmp	r0, #48	@ 0x30
 800de66:	d0fa      	beq.n	800de5e <__gethex+0x12>
 800de68:	eba9 0303 	sub.w	r3, r9, r3
 800de6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800de70:	f7ff ffd6 	bl	800de20 <__hexdig_fun>
 800de74:	4605      	mov	r5, r0
 800de76:	2800      	cmp	r0, #0
 800de78:	d168      	bne.n	800df4c <__gethex+0x100>
 800de7a:	49a0      	ldr	r1, [pc, #640]	@ (800e0fc <__gethex+0x2b0>)
 800de7c:	2201      	movs	r2, #1
 800de7e:	4648      	mov	r0, r9
 800de80:	f7ff fef0 	bl	800dc64 <strncmp>
 800de84:	4607      	mov	r7, r0
 800de86:	2800      	cmp	r0, #0
 800de88:	d167      	bne.n	800df5a <__gethex+0x10e>
 800de8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de8e:	4626      	mov	r6, r4
 800de90:	f7ff ffc6 	bl	800de20 <__hexdig_fun>
 800de94:	2800      	cmp	r0, #0
 800de96:	d062      	beq.n	800df5e <__gethex+0x112>
 800de98:	4623      	mov	r3, r4
 800de9a:	7818      	ldrb	r0, [r3, #0]
 800de9c:	2830      	cmp	r0, #48	@ 0x30
 800de9e:	4699      	mov	r9, r3
 800dea0:	f103 0301 	add.w	r3, r3, #1
 800dea4:	d0f9      	beq.n	800de9a <__gethex+0x4e>
 800dea6:	f7ff ffbb 	bl	800de20 <__hexdig_fun>
 800deaa:	fab0 f580 	clz	r5, r0
 800deae:	096d      	lsrs	r5, r5, #5
 800deb0:	f04f 0b01 	mov.w	fp, #1
 800deb4:	464a      	mov	r2, r9
 800deb6:	4616      	mov	r6, r2
 800deb8:	3201      	adds	r2, #1
 800deba:	7830      	ldrb	r0, [r6, #0]
 800debc:	f7ff ffb0 	bl	800de20 <__hexdig_fun>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d1f8      	bne.n	800deb6 <__gethex+0x6a>
 800dec4:	498d      	ldr	r1, [pc, #564]	@ (800e0fc <__gethex+0x2b0>)
 800dec6:	2201      	movs	r2, #1
 800dec8:	4630      	mov	r0, r6
 800deca:	f7ff fecb 	bl	800dc64 <strncmp>
 800dece:	2800      	cmp	r0, #0
 800ded0:	d13f      	bne.n	800df52 <__gethex+0x106>
 800ded2:	b944      	cbnz	r4, 800dee6 <__gethex+0x9a>
 800ded4:	1c74      	adds	r4, r6, #1
 800ded6:	4622      	mov	r2, r4
 800ded8:	4616      	mov	r6, r2
 800deda:	3201      	adds	r2, #1
 800dedc:	7830      	ldrb	r0, [r6, #0]
 800dede:	f7ff ff9f 	bl	800de20 <__hexdig_fun>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d1f8      	bne.n	800ded8 <__gethex+0x8c>
 800dee6:	1ba4      	subs	r4, r4, r6
 800dee8:	00a7      	lsls	r7, r4, #2
 800deea:	7833      	ldrb	r3, [r6, #0]
 800deec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800def0:	2b50      	cmp	r3, #80	@ 0x50
 800def2:	d13e      	bne.n	800df72 <__gethex+0x126>
 800def4:	7873      	ldrb	r3, [r6, #1]
 800def6:	2b2b      	cmp	r3, #43	@ 0x2b
 800def8:	d033      	beq.n	800df62 <__gethex+0x116>
 800defa:	2b2d      	cmp	r3, #45	@ 0x2d
 800defc:	d034      	beq.n	800df68 <__gethex+0x11c>
 800defe:	1c71      	adds	r1, r6, #1
 800df00:	2400      	movs	r4, #0
 800df02:	7808      	ldrb	r0, [r1, #0]
 800df04:	f7ff ff8c 	bl	800de20 <__hexdig_fun>
 800df08:	1e43      	subs	r3, r0, #1
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b18      	cmp	r3, #24
 800df0e:	d830      	bhi.n	800df72 <__gethex+0x126>
 800df10:	f1a0 0210 	sub.w	r2, r0, #16
 800df14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df18:	f7ff ff82 	bl	800de20 <__hexdig_fun>
 800df1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800df20:	fa5f fc8c 	uxtb.w	ip, ip
 800df24:	f1bc 0f18 	cmp.w	ip, #24
 800df28:	f04f 030a 	mov.w	r3, #10
 800df2c:	d91e      	bls.n	800df6c <__gethex+0x120>
 800df2e:	b104      	cbz	r4, 800df32 <__gethex+0xe6>
 800df30:	4252      	negs	r2, r2
 800df32:	4417      	add	r7, r2
 800df34:	f8ca 1000 	str.w	r1, [sl]
 800df38:	b1ed      	cbz	r5, 800df76 <__gethex+0x12a>
 800df3a:	f1bb 0f00 	cmp.w	fp, #0
 800df3e:	bf0c      	ite	eq
 800df40:	2506      	moveq	r5, #6
 800df42:	2500      	movne	r5, #0
 800df44:	4628      	mov	r0, r5
 800df46:	b005      	add	sp, #20
 800df48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4c:	2500      	movs	r5, #0
 800df4e:	462c      	mov	r4, r5
 800df50:	e7b0      	b.n	800deb4 <__gethex+0x68>
 800df52:	2c00      	cmp	r4, #0
 800df54:	d1c7      	bne.n	800dee6 <__gethex+0x9a>
 800df56:	4627      	mov	r7, r4
 800df58:	e7c7      	b.n	800deea <__gethex+0x9e>
 800df5a:	464e      	mov	r6, r9
 800df5c:	462f      	mov	r7, r5
 800df5e:	2501      	movs	r5, #1
 800df60:	e7c3      	b.n	800deea <__gethex+0x9e>
 800df62:	2400      	movs	r4, #0
 800df64:	1cb1      	adds	r1, r6, #2
 800df66:	e7cc      	b.n	800df02 <__gethex+0xb6>
 800df68:	2401      	movs	r4, #1
 800df6a:	e7fb      	b.n	800df64 <__gethex+0x118>
 800df6c:	fb03 0002 	mla	r0, r3, r2, r0
 800df70:	e7ce      	b.n	800df10 <__gethex+0xc4>
 800df72:	4631      	mov	r1, r6
 800df74:	e7de      	b.n	800df34 <__gethex+0xe8>
 800df76:	eba6 0309 	sub.w	r3, r6, r9
 800df7a:	3b01      	subs	r3, #1
 800df7c:	4629      	mov	r1, r5
 800df7e:	2b07      	cmp	r3, #7
 800df80:	dc0a      	bgt.n	800df98 <__gethex+0x14c>
 800df82:	9801      	ldr	r0, [sp, #4]
 800df84:	f7fe f8b8 	bl	800c0f8 <_Balloc>
 800df88:	4604      	mov	r4, r0
 800df8a:	b940      	cbnz	r0, 800df9e <__gethex+0x152>
 800df8c:	4b5c      	ldr	r3, [pc, #368]	@ (800e100 <__gethex+0x2b4>)
 800df8e:	4602      	mov	r2, r0
 800df90:	21e4      	movs	r1, #228	@ 0xe4
 800df92:	485c      	ldr	r0, [pc, #368]	@ (800e104 <__gethex+0x2b8>)
 800df94:	f7ff fec0 	bl	800dd18 <__assert_func>
 800df98:	3101      	adds	r1, #1
 800df9a:	105b      	asrs	r3, r3, #1
 800df9c:	e7ef      	b.n	800df7e <__gethex+0x132>
 800df9e:	f100 0a14 	add.w	sl, r0, #20
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	4655      	mov	r5, sl
 800dfa6:	469b      	mov	fp, r3
 800dfa8:	45b1      	cmp	r9, r6
 800dfaa:	d337      	bcc.n	800e01c <__gethex+0x1d0>
 800dfac:	f845 bb04 	str.w	fp, [r5], #4
 800dfb0:	eba5 050a 	sub.w	r5, r5, sl
 800dfb4:	10ad      	asrs	r5, r5, #2
 800dfb6:	6125      	str	r5, [r4, #16]
 800dfb8:	4658      	mov	r0, fp
 800dfba:	f7fe f98f 	bl	800c2dc <__hi0bits>
 800dfbe:	016d      	lsls	r5, r5, #5
 800dfc0:	f8d8 6000 	ldr.w	r6, [r8]
 800dfc4:	1a2d      	subs	r5, r5, r0
 800dfc6:	42b5      	cmp	r5, r6
 800dfc8:	dd54      	ble.n	800e074 <__gethex+0x228>
 800dfca:	1bad      	subs	r5, r5, r6
 800dfcc:	4629      	mov	r1, r5
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f7fe fd23 	bl	800ca1a <__any_on>
 800dfd4:	4681      	mov	r9, r0
 800dfd6:	b178      	cbz	r0, 800dff8 <__gethex+0x1ac>
 800dfd8:	1e6b      	subs	r3, r5, #1
 800dfda:	1159      	asrs	r1, r3, #5
 800dfdc:	f003 021f 	and.w	r2, r3, #31
 800dfe0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dfe4:	f04f 0901 	mov.w	r9, #1
 800dfe8:	fa09 f202 	lsl.w	r2, r9, r2
 800dfec:	420a      	tst	r2, r1
 800dfee:	d003      	beq.n	800dff8 <__gethex+0x1ac>
 800dff0:	454b      	cmp	r3, r9
 800dff2:	dc36      	bgt.n	800e062 <__gethex+0x216>
 800dff4:	f04f 0902 	mov.w	r9, #2
 800dff8:	4629      	mov	r1, r5
 800dffa:	4620      	mov	r0, r4
 800dffc:	f7ff febe 	bl	800dd7c <rshift>
 800e000:	442f      	add	r7, r5
 800e002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e006:	42bb      	cmp	r3, r7
 800e008:	da42      	bge.n	800e090 <__gethex+0x244>
 800e00a:	9801      	ldr	r0, [sp, #4]
 800e00c:	4621      	mov	r1, r4
 800e00e:	f7fe f8b3 	bl	800c178 <_Bfree>
 800e012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e014:	2300      	movs	r3, #0
 800e016:	6013      	str	r3, [r2, #0]
 800e018:	25a3      	movs	r5, #163	@ 0xa3
 800e01a:	e793      	b.n	800df44 <__gethex+0xf8>
 800e01c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e020:	2a2e      	cmp	r2, #46	@ 0x2e
 800e022:	d012      	beq.n	800e04a <__gethex+0x1fe>
 800e024:	2b20      	cmp	r3, #32
 800e026:	d104      	bne.n	800e032 <__gethex+0x1e6>
 800e028:	f845 bb04 	str.w	fp, [r5], #4
 800e02c:	f04f 0b00 	mov.w	fp, #0
 800e030:	465b      	mov	r3, fp
 800e032:	7830      	ldrb	r0, [r6, #0]
 800e034:	9303      	str	r3, [sp, #12]
 800e036:	f7ff fef3 	bl	800de20 <__hexdig_fun>
 800e03a:	9b03      	ldr	r3, [sp, #12]
 800e03c:	f000 000f 	and.w	r0, r0, #15
 800e040:	4098      	lsls	r0, r3
 800e042:	ea4b 0b00 	orr.w	fp, fp, r0
 800e046:	3304      	adds	r3, #4
 800e048:	e7ae      	b.n	800dfa8 <__gethex+0x15c>
 800e04a:	45b1      	cmp	r9, r6
 800e04c:	d8ea      	bhi.n	800e024 <__gethex+0x1d8>
 800e04e:	492b      	ldr	r1, [pc, #172]	@ (800e0fc <__gethex+0x2b0>)
 800e050:	9303      	str	r3, [sp, #12]
 800e052:	2201      	movs	r2, #1
 800e054:	4630      	mov	r0, r6
 800e056:	f7ff fe05 	bl	800dc64 <strncmp>
 800e05a:	9b03      	ldr	r3, [sp, #12]
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d1e1      	bne.n	800e024 <__gethex+0x1d8>
 800e060:	e7a2      	b.n	800dfa8 <__gethex+0x15c>
 800e062:	1ea9      	subs	r1, r5, #2
 800e064:	4620      	mov	r0, r4
 800e066:	f7fe fcd8 	bl	800ca1a <__any_on>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d0c2      	beq.n	800dff4 <__gethex+0x1a8>
 800e06e:	f04f 0903 	mov.w	r9, #3
 800e072:	e7c1      	b.n	800dff8 <__gethex+0x1ac>
 800e074:	da09      	bge.n	800e08a <__gethex+0x23e>
 800e076:	1b75      	subs	r5, r6, r5
 800e078:	4621      	mov	r1, r4
 800e07a:	9801      	ldr	r0, [sp, #4]
 800e07c:	462a      	mov	r2, r5
 800e07e:	f7fe fa93 	bl	800c5a8 <__lshift>
 800e082:	1b7f      	subs	r7, r7, r5
 800e084:	4604      	mov	r4, r0
 800e086:	f100 0a14 	add.w	sl, r0, #20
 800e08a:	f04f 0900 	mov.w	r9, #0
 800e08e:	e7b8      	b.n	800e002 <__gethex+0x1b6>
 800e090:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e094:	42bd      	cmp	r5, r7
 800e096:	dd6f      	ble.n	800e178 <__gethex+0x32c>
 800e098:	1bed      	subs	r5, r5, r7
 800e09a:	42ae      	cmp	r6, r5
 800e09c:	dc34      	bgt.n	800e108 <__gethex+0x2bc>
 800e09e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0a2:	2b02      	cmp	r3, #2
 800e0a4:	d022      	beq.n	800e0ec <__gethex+0x2a0>
 800e0a6:	2b03      	cmp	r3, #3
 800e0a8:	d024      	beq.n	800e0f4 <__gethex+0x2a8>
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d115      	bne.n	800e0da <__gethex+0x28e>
 800e0ae:	42ae      	cmp	r6, r5
 800e0b0:	d113      	bne.n	800e0da <__gethex+0x28e>
 800e0b2:	2e01      	cmp	r6, #1
 800e0b4:	d10b      	bne.n	800e0ce <__gethex+0x282>
 800e0b6:	9a02      	ldr	r2, [sp, #8]
 800e0b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0bc:	6013      	str	r3, [r2, #0]
 800e0be:	2301      	movs	r3, #1
 800e0c0:	6123      	str	r3, [r4, #16]
 800e0c2:	f8ca 3000 	str.w	r3, [sl]
 800e0c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0c8:	2562      	movs	r5, #98	@ 0x62
 800e0ca:	601c      	str	r4, [r3, #0]
 800e0cc:	e73a      	b.n	800df44 <__gethex+0xf8>
 800e0ce:	1e71      	subs	r1, r6, #1
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f7fe fca2 	bl	800ca1a <__any_on>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d1ed      	bne.n	800e0b6 <__gethex+0x26a>
 800e0da:	9801      	ldr	r0, [sp, #4]
 800e0dc:	4621      	mov	r1, r4
 800e0de:	f7fe f84b 	bl	800c178 <_Bfree>
 800e0e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	6013      	str	r3, [r2, #0]
 800e0e8:	2550      	movs	r5, #80	@ 0x50
 800e0ea:	e72b      	b.n	800df44 <__gethex+0xf8>
 800e0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1f3      	bne.n	800e0da <__gethex+0x28e>
 800e0f2:	e7e0      	b.n	800e0b6 <__gethex+0x26a>
 800e0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1dd      	bne.n	800e0b6 <__gethex+0x26a>
 800e0fa:	e7ee      	b.n	800e0da <__gethex+0x28e>
 800e0fc:	0800ebb8 	.word	0x0800ebb8
 800e100:	0800ea51 	.word	0x0800ea51
 800e104:	0800ed66 	.word	0x0800ed66
 800e108:	1e6f      	subs	r7, r5, #1
 800e10a:	f1b9 0f00 	cmp.w	r9, #0
 800e10e:	d130      	bne.n	800e172 <__gethex+0x326>
 800e110:	b127      	cbz	r7, 800e11c <__gethex+0x2d0>
 800e112:	4639      	mov	r1, r7
 800e114:	4620      	mov	r0, r4
 800e116:	f7fe fc80 	bl	800ca1a <__any_on>
 800e11a:	4681      	mov	r9, r0
 800e11c:	117a      	asrs	r2, r7, #5
 800e11e:	2301      	movs	r3, #1
 800e120:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e124:	f007 071f 	and.w	r7, r7, #31
 800e128:	40bb      	lsls	r3, r7
 800e12a:	4213      	tst	r3, r2
 800e12c:	4629      	mov	r1, r5
 800e12e:	4620      	mov	r0, r4
 800e130:	bf18      	it	ne
 800e132:	f049 0902 	orrne.w	r9, r9, #2
 800e136:	f7ff fe21 	bl	800dd7c <rshift>
 800e13a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e13e:	1b76      	subs	r6, r6, r5
 800e140:	2502      	movs	r5, #2
 800e142:	f1b9 0f00 	cmp.w	r9, #0
 800e146:	d047      	beq.n	800e1d8 <__gethex+0x38c>
 800e148:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	d015      	beq.n	800e17c <__gethex+0x330>
 800e150:	2b03      	cmp	r3, #3
 800e152:	d017      	beq.n	800e184 <__gethex+0x338>
 800e154:	2b01      	cmp	r3, #1
 800e156:	d109      	bne.n	800e16c <__gethex+0x320>
 800e158:	f019 0f02 	tst.w	r9, #2
 800e15c:	d006      	beq.n	800e16c <__gethex+0x320>
 800e15e:	f8da 3000 	ldr.w	r3, [sl]
 800e162:	ea49 0903 	orr.w	r9, r9, r3
 800e166:	f019 0f01 	tst.w	r9, #1
 800e16a:	d10e      	bne.n	800e18a <__gethex+0x33e>
 800e16c:	f045 0510 	orr.w	r5, r5, #16
 800e170:	e032      	b.n	800e1d8 <__gethex+0x38c>
 800e172:	f04f 0901 	mov.w	r9, #1
 800e176:	e7d1      	b.n	800e11c <__gethex+0x2d0>
 800e178:	2501      	movs	r5, #1
 800e17a:	e7e2      	b.n	800e142 <__gethex+0x2f6>
 800e17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e17e:	f1c3 0301 	rsb	r3, r3, #1
 800e182:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e186:	2b00      	cmp	r3, #0
 800e188:	d0f0      	beq.n	800e16c <__gethex+0x320>
 800e18a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e18e:	f104 0314 	add.w	r3, r4, #20
 800e192:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e196:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e19a:	f04f 0c00 	mov.w	ip, #0
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e1a8:	d01b      	beq.n	800e1e2 <__gethex+0x396>
 800e1aa:	3201      	adds	r2, #1
 800e1ac:	6002      	str	r2, [r0, #0]
 800e1ae:	2d02      	cmp	r5, #2
 800e1b0:	f104 0314 	add.w	r3, r4, #20
 800e1b4:	d13c      	bne.n	800e230 <__gethex+0x3e4>
 800e1b6:	f8d8 2000 	ldr.w	r2, [r8]
 800e1ba:	3a01      	subs	r2, #1
 800e1bc:	42b2      	cmp	r2, r6
 800e1be:	d109      	bne.n	800e1d4 <__gethex+0x388>
 800e1c0:	1171      	asrs	r1, r6, #5
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1c8:	f006 061f 	and.w	r6, r6, #31
 800e1cc:	fa02 f606 	lsl.w	r6, r2, r6
 800e1d0:	421e      	tst	r6, r3
 800e1d2:	d13a      	bne.n	800e24a <__gethex+0x3fe>
 800e1d4:	f045 0520 	orr.w	r5, r5, #32
 800e1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1da:	601c      	str	r4, [r3, #0]
 800e1dc:	9b02      	ldr	r3, [sp, #8]
 800e1de:	601f      	str	r7, [r3, #0]
 800e1e0:	e6b0      	b.n	800df44 <__gethex+0xf8>
 800e1e2:	4299      	cmp	r1, r3
 800e1e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1e8:	d8d9      	bhi.n	800e19e <__gethex+0x352>
 800e1ea:	68a3      	ldr	r3, [r4, #8]
 800e1ec:	459b      	cmp	fp, r3
 800e1ee:	db17      	blt.n	800e220 <__gethex+0x3d4>
 800e1f0:	6861      	ldr	r1, [r4, #4]
 800e1f2:	9801      	ldr	r0, [sp, #4]
 800e1f4:	3101      	adds	r1, #1
 800e1f6:	f7fd ff7f 	bl	800c0f8 <_Balloc>
 800e1fa:	4681      	mov	r9, r0
 800e1fc:	b918      	cbnz	r0, 800e206 <__gethex+0x3ba>
 800e1fe:	4b1a      	ldr	r3, [pc, #104]	@ (800e268 <__gethex+0x41c>)
 800e200:	4602      	mov	r2, r0
 800e202:	2184      	movs	r1, #132	@ 0x84
 800e204:	e6c5      	b.n	800df92 <__gethex+0x146>
 800e206:	6922      	ldr	r2, [r4, #16]
 800e208:	3202      	adds	r2, #2
 800e20a:	f104 010c 	add.w	r1, r4, #12
 800e20e:	0092      	lsls	r2, r2, #2
 800e210:	300c      	adds	r0, #12
 800e212:	f7ff fd6b 	bl	800dcec <memcpy>
 800e216:	4621      	mov	r1, r4
 800e218:	9801      	ldr	r0, [sp, #4]
 800e21a:	f7fd ffad 	bl	800c178 <_Bfree>
 800e21e:	464c      	mov	r4, r9
 800e220:	6923      	ldr	r3, [r4, #16]
 800e222:	1c5a      	adds	r2, r3, #1
 800e224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e228:	6122      	str	r2, [r4, #16]
 800e22a:	2201      	movs	r2, #1
 800e22c:	615a      	str	r2, [r3, #20]
 800e22e:	e7be      	b.n	800e1ae <__gethex+0x362>
 800e230:	6922      	ldr	r2, [r4, #16]
 800e232:	455a      	cmp	r2, fp
 800e234:	dd0b      	ble.n	800e24e <__gethex+0x402>
 800e236:	2101      	movs	r1, #1
 800e238:	4620      	mov	r0, r4
 800e23a:	f7ff fd9f 	bl	800dd7c <rshift>
 800e23e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e242:	3701      	adds	r7, #1
 800e244:	42bb      	cmp	r3, r7
 800e246:	f6ff aee0 	blt.w	800e00a <__gethex+0x1be>
 800e24a:	2501      	movs	r5, #1
 800e24c:	e7c2      	b.n	800e1d4 <__gethex+0x388>
 800e24e:	f016 061f 	ands.w	r6, r6, #31
 800e252:	d0fa      	beq.n	800e24a <__gethex+0x3fe>
 800e254:	4453      	add	r3, sl
 800e256:	f1c6 0620 	rsb	r6, r6, #32
 800e25a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e25e:	f7fe f83d 	bl	800c2dc <__hi0bits>
 800e262:	42b0      	cmp	r0, r6
 800e264:	dbe7      	blt.n	800e236 <__gethex+0x3ea>
 800e266:	e7f0      	b.n	800e24a <__gethex+0x3fe>
 800e268:	0800ea51 	.word	0x0800ea51

0800e26c <L_shift>:
 800e26c:	f1c2 0208 	rsb	r2, r2, #8
 800e270:	0092      	lsls	r2, r2, #2
 800e272:	b570      	push	{r4, r5, r6, lr}
 800e274:	f1c2 0620 	rsb	r6, r2, #32
 800e278:	6843      	ldr	r3, [r0, #4]
 800e27a:	6804      	ldr	r4, [r0, #0]
 800e27c:	fa03 f506 	lsl.w	r5, r3, r6
 800e280:	432c      	orrs	r4, r5
 800e282:	40d3      	lsrs	r3, r2
 800e284:	6004      	str	r4, [r0, #0]
 800e286:	f840 3f04 	str.w	r3, [r0, #4]!
 800e28a:	4288      	cmp	r0, r1
 800e28c:	d3f4      	bcc.n	800e278 <L_shift+0xc>
 800e28e:	bd70      	pop	{r4, r5, r6, pc}

0800e290 <__match>:
 800e290:	b530      	push	{r4, r5, lr}
 800e292:	6803      	ldr	r3, [r0, #0]
 800e294:	3301      	adds	r3, #1
 800e296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e29a:	b914      	cbnz	r4, 800e2a2 <__match+0x12>
 800e29c:	6003      	str	r3, [r0, #0]
 800e29e:	2001      	movs	r0, #1
 800e2a0:	bd30      	pop	{r4, r5, pc}
 800e2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e2aa:	2d19      	cmp	r5, #25
 800e2ac:	bf98      	it	ls
 800e2ae:	3220      	addls	r2, #32
 800e2b0:	42a2      	cmp	r2, r4
 800e2b2:	d0f0      	beq.n	800e296 <__match+0x6>
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	e7f3      	b.n	800e2a0 <__match+0x10>

0800e2b8 <__hexnan>:
 800e2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2bc:	680b      	ldr	r3, [r1, #0]
 800e2be:	6801      	ldr	r1, [r0, #0]
 800e2c0:	115e      	asrs	r6, r3, #5
 800e2c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2c6:	f013 031f 	ands.w	r3, r3, #31
 800e2ca:	b087      	sub	sp, #28
 800e2cc:	bf18      	it	ne
 800e2ce:	3604      	addne	r6, #4
 800e2d0:	2500      	movs	r5, #0
 800e2d2:	1f37      	subs	r7, r6, #4
 800e2d4:	4682      	mov	sl, r0
 800e2d6:	4690      	mov	r8, r2
 800e2d8:	9301      	str	r3, [sp, #4]
 800e2da:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2de:	46b9      	mov	r9, r7
 800e2e0:	463c      	mov	r4, r7
 800e2e2:	9502      	str	r5, [sp, #8]
 800e2e4:	46ab      	mov	fp, r5
 800e2e6:	784a      	ldrb	r2, [r1, #1]
 800e2e8:	1c4b      	adds	r3, r1, #1
 800e2ea:	9303      	str	r3, [sp, #12]
 800e2ec:	b342      	cbz	r2, 800e340 <__hexnan+0x88>
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	9105      	str	r1, [sp, #20]
 800e2f2:	9204      	str	r2, [sp, #16]
 800e2f4:	f7ff fd94 	bl	800de20 <__hexdig_fun>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d151      	bne.n	800e3a0 <__hexnan+0xe8>
 800e2fc:	9a04      	ldr	r2, [sp, #16]
 800e2fe:	9905      	ldr	r1, [sp, #20]
 800e300:	2a20      	cmp	r2, #32
 800e302:	d818      	bhi.n	800e336 <__hexnan+0x7e>
 800e304:	9b02      	ldr	r3, [sp, #8]
 800e306:	459b      	cmp	fp, r3
 800e308:	dd13      	ble.n	800e332 <__hexnan+0x7a>
 800e30a:	454c      	cmp	r4, r9
 800e30c:	d206      	bcs.n	800e31c <__hexnan+0x64>
 800e30e:	2d07      	cmp	r5, #7
 800e310:	dc04      	bgt.n	800e31c <__hexnan+0x64>
 800e312:	462a      	mov	r2, r5
 800e314:	4649      	mov	r1, r9
 800e316:	4620      	mov	r0, r4
 800e318:	f7ff ffa8 	bl	800e26c <L_shift>
 800e31c:	4544      	cmp	r4, r8
 800e31e:	d952      	bls.n	800e3c6 <__hexnan+0x10e>
 800e320:	2300      	movs	r3, #0
 800e322:	f1a4 0904 	sub.w	r9, r4, #4
 800e326:	f844 3c04 	str.w	r3, [r4, #-4]
 800e32a:	f8cd b008 	str.w	fp, [sp, #8]
 800e32e:	464c      	mov	r4, r9
 800e330:	461d      	mov	r5, r3
 800e332:	9903      	ldr	r1, [sp, #12]
 800e334:	e7d7      	b.n	800e2e6 <__hexnan+0x2e>
 800e336:	2a29      	cmp	r2, #41	@ 0x29
 800e338:	d157      	bne.n	800e3ea <__hexnan+0x132>
 800e33a:	3102      	adds	r1, #2
 800e33c:	f8ca 1000 	str.w	r1, [sl]
 800e340:	f1bb 0f00 	cmp.w	fp, #0
 800e344:	d051      	beq.n	800e3ea <__hexnan+0x132>
 800e346:	454c      	cmp	r4, r9
 800e348:	d206      	bcs.n	800e358 <__hexnan+0xa0>
 800e34a:	2d07      	cmp	r5, #7
 800e34c:	dc04      	bgt.n	800e358 <__hexnan+0xa0>
 800e34e:	462a      	mov	r2, r5
 800e350:	4649      	mov	r1, r9
 800e352:	4620      	mov	r0, r4
 800e354:	f7ff ff8a 	bl	800e26c <L_shift>
 800e358:	4544      	cmp	r4, r8
 800e35a:	d936      	bls.n	800e3ca <__hexnan+0x112>
 800e35c:	f1a8 0204 	sub.w	r2, r8, #4
 800e360:	4623      	mov	r3, r4
 800e362:	f853 1b04 	ldr.w	r1, [r3], #4
 800e366:	f842 1f04 	str.w	r1, [r2, #4]!
 800e36a:	429f      	cmp	r7, r3
 800e36c:	d2f9      	bcs.n	800e362 <__hexnan+0xaa>
 800e36e:	1b3b      	subs	r3, r7, r4
 800e370:	f023 0303 	bic.w	r3, r3, #3
 800e374:	3304      	adds	r3, #4
 800e376:	3401      	adds	r4, #1
 800e378:	3e03      	subs	r6, #3
 800e37a:	42b4      	cmp	r4, r6
 800e37c:	bf88      	it	hi
 800e37e:	2304      	movhi	r3, #4
 800e380:	4443      	add	r3, r8
 800e382:	2200      	movs	r2, #0
 800e384:	f843 2b04 	str.w	r2, [r3], #4
 800e388:	429f      	cmp	r7, r3
 800e38a:	d2fb      	bcs.n	800e384 <__hexnan+0xcc>
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	b91b      	cbnz	r3, 800e398 <__hexnan+0xe0>
 800e390:	4547      	cmp	r7, r8
 800e392:	d128      	bne.n	800e3e6 <__hexnan+0x12e>
 800e394:	2301      	movs	r3, #1
 800e396:	603b      	str	r3, [r7, #0]
 800e398:	2005      	movs	r0, #5
 800e39a:	b007      	add	sp, #28
 800e39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a0:	3501      	adds	r5, #1
 800e3a2:	2d08      	cmp	r5, #8
 800e3a4:	f10b 0b01 	add.w	fp, fp, #1
 800e3a8:	dd06      	ble.n	800e3b8 <__hexnan+0x100>
 800e3aa:	4544      	cmp	r4, r8
 800e3ac:	d9c1      	bls.n	800e332 <__hexnan+0x7a>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3b4:	2501      	movs	r5, #1
 800e3b6:	3c04      	subs	r4, #4
 800e3b8:	6822      	ldr	r2, [r4, #0]
 800e3ba:	f000 000f 	and.w	r0, r0, #15
 800e3be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e3c2:	6020      	str	r0, [r4, #0]
 800e3c4:	e7b5      	b.n	800e332 <__hexnan+0x7a>
 800e3c6:	2508      	movs	r5, #8
 800e3c8:	e7b3      	b.n	800e332 <__hexnan+0x7a>
 800e3ca:	9b01      	ldr	r3, [sp, #4]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d0dd      	beq.n	800e38c <__hexnan+0xd4>
 800e3d0:	f1c3 0320 	rsb	r3, r3, #32
 800e3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d8:	40da      	lsrs	r2, r3
 800e3da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e3de:	4013      	ands	r3, r2
 800e3e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e3e4:	e7d2      	b.n	800e38c <__hexnan+0xd4>
 800e3e6:	3f04      	subs	r7, #4
 800e3e8:	e7d0      	b.n	800e38c <__hexnan+0xd4>
 800e3ea:	2004      	movs	r0, #4
 800e3ec:	e7d5      	b.n	800e39a <__hexnan+0xe2>

0800e3ee <__ascii_mbtowc>:
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	b901      	cbnz	r1, 800e3f4 <__ascii_mbtowc+0x6>
 800e3f2:	a901      	add	r1, sp, #4
 800e3f4:	b142      	cbz	r2, 800e408 <__ascii_mbtowc+0x1a>
 800e3f6:	b14b      	cbz	r3, 800e40c <__ascii_mbtowc+0x1e>
 800e3f8:	7813      	ldrb	r3, [r2, #0]
 800e3fa:	600b      	str	r3, [r1, #0]
 800e3fc:	7812      	ldrb	r2, [r2, #0]
 800e3fe:	1e10      	subs	r0, r2, #0
 800e400:	bf18      	it	ne
 800e402:	2001      	movne	r0, #1
 800e404:	b002      	add	sp, #8
 800e406:	4770      	bx	lr
 800e408:	4610      	mov	r0, r2
 800e40a:	e7fb      	b.n	800e404 <__ascii_mbtowc+0x16>
 800e40c:	f06f 0001 	mvn.w	r0, #1
 800e410:	e7f8      	b.n	800e404 <__ascii_mbtowc+0x16>

0800e412 <_realloc_r>:
 800e412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e416:	4680      	mov	r8, r0
 800e418:	4615      	mov	r5, r2
 800e41a:	460c      	mov	r4, r1
 800e41c:	b921      	cbnz	r1, 800e428 <_realloc_r+0x16>
 800e41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e422:	4611      	mov	r1, r2
 800e424:	f7fd bddc 	b.w	800bfe0 <_malloc_r>
 800e428:	b92a      	cbnz	r2, 800e436 <_realloc_r+0x24>
 800e42a:	f7fd fd65 	bl	800bef8 <_free_r>
 800e42e:	2400      	movs	r4, #0
 800e430:	4620      	mov	r0, r4
 800e432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e436:	f000 f840 	bl	800e4ba <_malloc_usable_size_r>
 800e43a:	4285      	cmp	r5, r0
 800e43c:	4606      	mov	r6, r0
 800e43e:	d802      	bhi.n	800e446 <_realloc_r+0x34>
 800e440:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e444:	d8f4      	bhi.n	800e430 <_realloc_r+0x1e>
 800e446:	4629      	mov	r1, r5
 800e448:	4640      	mov	r0, r8
 800e44a:	f7fd fdc9 	bl	800bfe0 <_malloc_r>
 800e44e:	4607      	mov	r7, r0
 800e450:	2800      	cmp	r0, #0
 800e452:	d0ec      	beq.n	800e42e <_realloc_r+0x1c>
 800e454:	42b5      	cmp	r5, r6
 800e456:	462a      	mov	r2, r5
 800e458:	4621      	mov	r1, r4
 800e45a:	bf28      	it	cs
 800e45c:	4632      	movcs	r2, r6
 800e45e:	f7ff fc45 	bl	800dcec <memcpy>
 800e462:	4621      	mov	r1, r4
 800e464:	4640      	mov	r0, r8
 800e466:	f7fd fd47 	bl	800bef8 <_free_r>
 800e46a:	463c      	mov	r4, r7
 800e46c:	e7e0      	b.n	800e430 <_realloc_r+0x1e>

0800e46e <__ascii_wctomb>:
 800e46e:	4603      	mov	r3, r0
 800e470:	4608      	mov	r0, r1
 800e472:	b141      	cbz	r1, 800e486 <__ascii_wctomb+0x18>
 800e474:	2aff      	cmp	r2, #255	@ 0xff
 800e476:	d904      	bls.n	800e482 <__ascii_wctomb+0x14>
 800e478:	228a      	movs	r2, #138	@ 0x8a
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	f04f 30ff 	mov.w	r0, #4294967295
 800e480:	4770      	bx	lr
 800e482:	700a      	strb	r2, [r1, #0]
 800e484:	2001      	movs	r0, #1
 800e486:	4770      	bx	lr

0800e488 <fiprintf>:
 800e488:	b40e      	push	{r1, r2, r3}
 800e48a:	b503      	push	{r0, r1, lr}
 800e48c:	4601      	mov	r1, r0
 800e48e:	ab03      	add	r3, sp, #12
 800e490:	4805      	ldr	r0, [pc, #20]	@ (800e4a8 <fiprintf+0x20>)
 800e492:	f853 2b04 	ldr.w	r2, [r3], #4
 800e496:	6800      	ldr	r0, [r0, #0]
 800e498:	9301      	str	r3, [sp, #4]
 800e49a:	f000 f83f 	bl	800e51c <_vfiprintf_r>
 800e49e:	b002      	add	sp, #8
 800e4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4a4:	b003      	add	sp, #12
 800e4a6:	4770      	bx	lr
 800e4a8:	20000170 	.word	0x20000170

0800e4ac <abort>:
 800e4ac:	b508      	push	{r3, lr}
 800e4ae:	2006      	movs	r0, #6
 800e4b0:	f000 f974 	bl	800e79c <raise>
 800e4b4:	2001      	movs	r0, #1
 800e4b6:	f7f3 f985 	bl	80017c4 <_exit>

0800e4ba <_malloc_usable_size_r>:
 800e4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4be:	1f18      	subs	r0, r3, #4
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	bfbc      	itt	lt
 800e4c4:	580b      	ldrlt	r3, [r1, r0]
 800e4c6:	18c0      	addlt	r0, r0, r3
 800e4c8:	4770      	bx	lr

0800e4ca <__sfputc_r>:
 800e4ca:	6893      	ldr	r3, [r2, #8]
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	b410      	push	{r4}
 800e4d2:	6093      	str	r3, [r2, #8]
 800e4d4:	da08      	bge.n	800e4e8 <__sfputc_r+0x1e>
 800e4d6:	6994      	ldr	r4, [r2, #24]
 800e4d8:	42a3      	cmp	r3, r4
 800e4da:	db01      	blt.n	800e4e0 <__sfputc_r+0x16>
 800e4dc:	290a      	cmp	r1, #10
 800e4de:	d103      	bne.n	800e4e8 <__sfputc_r+0x1e>
 800e4e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4e4:	f7fc bd9f 	b.w	800b026 <__swbuf_r>
 800e4e8:	6813      	ldr	r3, [r2, #0]
 800e4ea:	1c58      	adds	r0, r3, #1
 800e4ec:	6010      	str	r0, [r2, #0]
 800e4ee:	7019      	strb	r1, [r3, #0]
 800e4f0:	4608      	mov	r0, r1
 800e4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <__sfputs_r>:
 800e4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fa:	4606      	mov	r6, r0
 800e4fc:	460f      	mov	r7, r1
 800e4fe:	4614      	mov	r4, r2
 800e500:	18d5      	adds	r5, r2, r3
 800e502:	42ac      	cmp	r4, r5
 800e504:	d101      	bne.n	800e50a <__sfputs_r+0x12>
 800e506:	2000      	movs	r0, #0
 800e508:	e007      	b.n	800e51a <__sfputs_r+0x22>
 800e50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e50e:	463a      	mov	r2, r7
 800e510:	4630      	mov	r0, r6
 800e512:	f7ff ffda 	bl	800e4ca <__sfputc_r>
 800e516:	1c43      	adds	r3, r0, #1
 800e518:	d1f3      	bne.n	800e502 <__sfputs_r+0xa>
 800e51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e51c <_vfiprintf_r>:
 800e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e520:	460d      	mov	r5, r1
 800e522:	b09d      	sub	sp, #116	@ 0x74
 800e524:	4614      	mov	r4, r2
 800e526:	4698      	mov	r8, r3
 800e528:	4606      	mov	r6, r0
 800e52a:	b118      	cbz	r0, 800e534 <_vfiprintf_r+0x18>
 800e52c:	6a03      	ldr	r3, [r0, #32]
 800e52e:	b90b      	cbnz	r3, 800e534 <_vfiprintf_r+0x18>
 800e530:	f7fc fc82 	bl	800ae38 <__sinit>
 800e534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e536:	07d9      	lsls	r1, r3, #31
 800e538:	d405      	bmi.n	800e546 <_vfiprintf_r+0x2a>
 800e53a:	89ab      	ldrh	r3, [r5, #12]
 800e53c:	059a      	lsls	r2, r3, #22
 800e53e:	d402      	bmi.n	800e546 <_vfiprintf_r+0x2a>
 800e540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e542:	f7fc fe82 	bl	800b24a <__retarget_lock_acquire_recursive>
 800e546:	89ab      	ldrh	r3, [r5, #12]
 800e548:	071b      	lsls	r3, r3, #28
 800e54a:	d501      	bpl.n	800e550 <_vfiprintf_r+0x34>
 800e54c:	692b      	ldr	r3, [r5, #16]
 800e54e:	b99b      	cbnz	r3, 800e578 <_vfiprintf_r+0x5c>
 800e550:	4629      	mov	r1, r5
 800e552:	4630      	mov	r0, r6
 800e554:	f7fc fda6 	bl	800b0a4 <__swsetup_r>
 800e558:	b170      	cbz	r0, 800e578 <_vfiprintf_r+0x5c>
 800e55a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e55c:	07dc      	lsls	r4, r3, #31
 800e55e:	d504      	bpl.n	800e56a <_vfiprintf_r+0x4e>
 800e560:	f04f 30ff 	mov.w	r0, #4294967295
 800e564:	b01d      	add	sp, #116	@ 0x74
 800e566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56a:	89ab      	ldrh	r3, [r5, #12]
 800e56c:	0598      	lsls	r0, r3, #22
 800e56e:	d4f7      	bmi.n	800e560 <_vfiprintf_r+0x44>
 800e570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e572:	f7fc fe6b 	bl	800b24c <__retarget_lock_release_recursive>
 800e576:	e7f3      	b.n	800e560 <_vfiprintf_r+0x44>
 800e578:	2300      	movs	r3, #0
 800e57a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e57c:	2320      	movs	r3, #32
 800e57e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e582:	f8cd 800c 	str.w	r8, [sp, #12]
 800e586:	2330      	movs	r3, #48	@ 0x30
 800e588:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e738 <_vfiprintf_r+0x21c>
 800e58c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e590:	f04f 0901 	mov.w	r9, #1
 800e594:	4623      	mov	r3, r4
 800e596:	469a      	mov	sl, r3
 800e598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e59c:	b10a      	cbz	r2, 800e5a2 <_vfiprintf_r+0x86>
 800e59e:	2a25      	cmp	r2, #37	@ 0x25
 800e5a0:	d1f9      	bne.n	800e596 <_vfiprintf_r+0x7a>
 800e5a2:	ebba 0b04 	subs.w	fp, sl, r4
 800e5a6:	d00b      	beq.n	800e5c0 <_vfiprintf_r+0xa4>
 800e5a8:	465b      	mov	r3, fp
 800e5aa:	4622      	mov	r2, r4
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	f7ff ffa2 	bl	800e4f8 <__sfputs_r>
 800e5b4:	3001      	adds	r0, #1
 800e5b6:	f000 80a7 	beq.w	800e708 <_vfiprintf_r+0x1ec>
 800e5ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5bc:	445a      	add	r2, fp
 800e5be:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f000 809f 	beq.w	800e708 <_vfiprintf_r+0x1ec>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5d4:	f10a 0a01 	add.w	sl, sl, #1
 800e5d8:	9304      	str	r3, [sp, #16]
 800e5da:	9307      	str	r3, [sp, #28]
 800e5dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e5e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e5e2:	4654      	mov	r4, sl
 800e5e4:	2205      	movs	r2, #5
 800e5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ea:	4853      	ldr	r0, [pc, #332]	@ (800e738 <_vfiprintf_r+0x21c>)
 800e5ec:	f7f1 fdf0 	bl	80001d0 <memchr>
 800e5f0:	9a04      	ldr	r2, [sp, #16]
 800e5f2:	b9d8      	cbnz	r0, 800e62c <_vfiprintf_r+0x110>
 800e5f4:	06d1      	lsls	r1, r2, #27
 800e5f6:	bf44      	itt	mi
 800e5f8:	2320      	movmi	r3, #32
 800e5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5fe:	0713      	lsls	r3, r2, #28
 800e600:	bf44      	itt	mi
 800e602:	232b      	movmi	r3, #43	@ 0x2b
 800e604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e608:	f89a 3000 	ldrb.w	r3, [sl]
 800e60c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e60e:	d015      	beq.n	800e63c <_vfiprintf_r+0x120>
 800e610:	9a07      	ldr	r2, [sp, #28]
 800e612:	4654      	mov	r4, sl
 800e614:	2000      	movs	r0, #0
 800e616:	f04f 0c0a 	mov.w	ip, #10
 800e61a:	4621      	mov	r1, r4
 800e61c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e620:	3b30      	subs	r3, #48	@ 0x30
 800e622:	2b09      	cmp	r3, #9
 800e624:	d94b      	bls.n	800e6be <_vfiprintf_r+0x1a2>
 800e626:	b1b0      	cbz	r0, 800e656 <_vfiprintf_r+0x13a>
 800e628:	9207      	str	r2, [sp, #28]
 800e62a:	e014      	b.n	800e656 <_vfiprintf_r+0x13a>
 800e62c:	eba0 0308 	sub.w	r3, r0, r8
 800e630:	fa09 f303 	lsl.w	r3, r9, r3
 800e634:	4313      	orrs	r3, r2
 800e636:	9304      	str	r3, [sp, #16]
 800e638:	46a2      	mov	sl, r4
 800e63a:	e7d2      	b.n	800e5e2 <_vfiprintf_r+0xc6>
 800e63c:	9b03      	ldr	r3, [sp, #12]
 800e63e:	1d19      	adds	r1, r3, #4
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	9103      	str	r1, [sp, #12]
 800e644:	2b00      	cmp	r3, #0
 800e646:	bfbb      	ittet	lt
 800e648:	425b      	neglt	r3, r3
 800e64a:	f042 0202 	orrlt.w	r2, r2, #2
 800e64e:	9307      	strge	r3, [sp, #28]
 800e650:	9307      	strlt	r3, [sp, #28]
 800e652:	bfb8      	it	lt
 800e654:	9204      	strlt	r2, [sp, #16]
 800e656:	7823      	ldrb	r3, [r4, #0]
 800e658:	2b2e      	cmp	r3, #46	@ 0x2e
 800e65a:	d10a      	bne.n	800e672 <_vfiprintf_r+0x156>
 800e65c:	7863      	ldrb	r3, [r4, #1]
 800e65e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e660:	d132      	bne.n	800e6c8 <_vfiprintf_r+0x1ac>
 800e662:	9b03      	ldr	r3, [sp, #12]
 800e664:	1d1a      	adds	r2, r3, #4
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	9203      	str	r2, [sp, #12]
 800e66a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e66e:	3402      	adds	r4, #2
 800e670:	9305      	str	r3, [sp, #20]
 800e672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e748 <_vfiprintf_r+0x22c>
 800e676:	7821      	ldrb	r1, [r4, #0]
 800e678:	2203      	movs	r2, #3
 800e67a:	4650      	mov	r0, sl
 800e67c:	f7f1 fda8 	bl	80001d0 <memchr>
 800e680:	b138      	cbz	r0, 800e692 <_vfiprintf_r+0x176>
 800e682:	9b04      	ldr	r3, [sp, #16]
 800e684:	eba0 000a 	sub.w	r0, r0, sl
 800e688:	2240      	movs	r2, #64	@ 0x40
 800e68a:	4082      	lsls	r2, r0
 800e68c:	4313      	orrs	r3, r2
 800e68e:	3401      	adds	r4, #1
 800e690:	9304      	str	r3, [sp, #16]
 800e692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e696:	4829      	ldr	r0, [pc, #164]	@ (800e73c <_vfiprintf_r+0x220>)
 800e698:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e69c:	2206      	movs	r2, #6
 800e69e:	f7f1 fd97 	bl	80001d0 <memchr>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d03f      	beq.n	800e726 <_vfiprintf_r+0x20a>
 800e6a6:	4b26      	ldr	r3, [pc, #152]	@ (800e740 <_vfiprintf_r+0x224>)
 800e6a8:	bb1b      	cbnz	r3, 800e6f2 <_vfiprintf_r+0x1d6>
 800e6aa:	9b03      	ldr	r3, [sp, #12]
 800e6ac:	3307      	adds	r3, #7
 800e6ae:	f023 0307 	bic.w	r3, r3, #7
 800e6b2:	3308      	adds	r3, #8
 800e6b4:	9303      	str	r3, [sp, #12]
 800e6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6b8:	443b      	add	r3, r7
 800e6ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6bc:	e76a      	b.n	800e594 <_vfiprintf_r+0x78>
 800e6be:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	2001      	movs	r0, #1
 800e6c6:	e7a8      	b.n	800e61a <_vfiprintf_r+0xfe>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	3401      	adds	r4, #1
 800e6cc:	9305      	str	r3, [sp, #20]
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	f04f 0c0a 	mov.w	ip, #10
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6da:	3a30      	subs	r2, #48	@ 0x30
 800e6dc:	2a09      	cmp	r2, #9
 800e6de:	d903      	bls.n	800e6e8 <_vfiprintf_r+0x1cc>
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d0c6      	beq.n	800e672 <_vfiprintf_r+0x156>
 800e6e4:	9105      	str	r1, [sp, #20]
 800e6e6:	e7c4      	b.n	800e672 <_vfiprintf_r+0x156>
 800e6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e7f0      	b.n	800e6d4 <_vfiprintf_r+0x1b8>
 800e6f2:	ab03      	add	r3, sp, #12
 800e6f4:	9300      	str	r3, [sp, #0]
 800e6f6:	462a      	mov	r2, r5
 800e6f8:	4b12      	ldr	r3, [pc, #72]	@ (800e744 <_vfiprintf_r+0x228>)
 800e6fa:	a904      	add	r1, sp, #16
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f7fb fd43 	bl	800a188 <_printf_float>
 800e702:	4607      	mov	r7, r0
 800e704:	1c78      	adds	r0, r7, #1
 800e706:	d1d6      	bne.n	800e6b6 <_vfiprintf_r+0x19a>
 800e708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e70a:	07d9      	lsls	r1, r3, #31
 800e70c:	d405      	bmi.n	800e71a <_vfiprintf_r+0x1fe>
 800e70e:	89ab      	ldrh	r3, [r5, #12]
 800e710:	059a      	lsls	r2, r3, #22
 800e712:	d402      	bmi.n	800e71a <_vfiprintf_r+0x1fe>
 800e714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e716:	f7fc fd99 	bl	800b24c <__retarget_lock_release_recursive>
 800e71a:	89ab      	ldrh	r3, [r5, #12]
 800e71c:	065b      	lsls	r3, r3, #25
 800e71e:	f53f af1f 	bmi.w	800e560 <_vfiprintf_r+0x44>
 800e722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e724:	e71e      	b.n	800e564 <_vfiprintf_r+0x48>
 800e726:	ab03      	add	r3, sp, #12
 800e728:	9300      	str	r3, [sp, #0]
 800e72a:	462a      	mov	r2, r5
 800e72c:	4b05      	ldr	r3, [pc, #20]	@ (800e744 <_vfiprintf_r+0x228>)
 800e72e:	a904      	add	r1, sp, #16
 800e730:	4630      	mov	r0, r6
 800e732:	f7fb ffc1 	bl	800a6b8 <_printf_i>
 800e736:	e7e4      	b.n	800e702 <_vfiprintf_r+0x1e6>
 800e738:	0800ed11 	.word	0x0800ed11
 800e73c:	0800ed1b 	.word	0x0800ed1b
 800e740:	0800a189 	.word	0x0800a189
 800e744:	0800e4f9 	.word	0x0800e4f9
 800e748:	0800ed17 	.word	0x0800ed17

0800e74c <_raise_r>:
 800e74c:	291f      	cmp	r1, #31
 800e74e:	b538      	push	{r3, r4, r5, lr}
 800e750:	4605      	mov	r5, r0
 800e752:	460c      	mov	r4, r1
 800e754:	d904      	bls.n	800e760 <_raise_r+0x14>
 800e756:	2316      	movs	r3, #22
 800e758:	6003      	str	r3, [r0, #0]
 800e75a:	f04f 30ff 	mov.w	r0, #4294967295
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e762:	b112      	cbz	r2, 800e76a <_raise_r+0x1e>
 800e764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e768:	b94b      	cbnz	r3, 800e77e <_raise_r+0x32>
 800e76a:	4628      	mov	r0, r5
 800e76c:	f000 f830 	bl	800e7d0 <_getpid_r>
 800e770:	4622      	mov	r2, r4
 800e772:	4601      	mov	r1, r0
 800e774:	4628      	mov	r0, r5
 800e776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e77a:	f000 b817 	b.w	800e7ac <_kill_r>
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d00a      	beq.n	800e798 <_raise_r+0x4c>
 800e782:	1c59      	adds	r1, r3, #1
 800e784:	d103      	bne.n	800e78e <_raise_r+0x42>
 800e786:	2316      	movs	r3, #22
 800e788:	6003      	str	r3, [r0, #0]
 800e78a:	2001      	movs	r0, #1
 800e78c:	e7e7      	b.n	800e75e <_raise_r+0x12>
 800e78e:	2100      	movs	r1, #0
 800e790:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e794:	4620      	mov	r0, r4
 800e796:	4798      	blx	r3
 800e798:	2000      	movs	r0, #0
 800e79a:	e7e0      	b.n	800e75e <_raise_r+0x12>

0800e79c <raise>:
 800e79c:	4b02      	ldr	r3, [pc, #8]	@ (800e7a8 <raise+0xc>)
 800e79e:	4601      	mov	r1, r0
 800e7a0:	6818      	ldr	r0, [r3, #0]
 800e7a2:	f7ff bfd3 	b.w	800e74c <_raise_r>
 800e7a6:	bf00      	nop
 800e7a8:	20000170 	.word	0x20000170

0800e7ac <_kill_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	4d07      	ldr	r5, [pc, #28]	@ (800e7cc <_kill_r+0x20>)
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	4608      	mov	r0, r1
 800e7b6:	4611      	mov	r1, r2
 800e7b8:	602b      	str	r3, [r5, #0]
 800e7ba:	f7f2 fff3 	bl	80017a4 <_kill>
 800e7be:	1c43      	adds	r3, r0, #1
 800e7c0:	d102      	bne.n	800e7c8 <_kill_r+0x1c>
 800e7c2:	682b      	ldr	r3, [r5, #0]
 800e7c4:	b103      	cbz	r3, 800e7c8 <_kill_r+0x1c>
 800e7c6:	6023      	str	r3, [r4, #0]
 800e7c8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ca:	bf00      	nop
 800e7cc:	20000d44 	.word	0x20000d44

0800e7d0 <_getpid_r>:
 800e7d0:	f7f2 bfe0 	b.w	8001794 <_getpid>

0800e7d4 <_init>:
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d6:	bf00      	nop
 800e7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7da:	bc08      	pop	{r3}
 800e7dc:	469e      	mov	lr, r3
 800e7de:	4770      	bx	lr

0800e7e0 <_fini>:
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	bf00      	nop
 800e7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7e6:	bc08      	pop	{r3}
 800e7e8:	469e      	mov	lr, r3
 800e7ea:	4770      	bx	lr
