
011_USB_VCOM_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800978c  0800978c  0000a78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009900  08009900  0000b1cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009900  08009900  0000a900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009908  08009908  0000b1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009908  08009908  0000a908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800990c  0800990c  0000a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08009910  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1cc  2**0
                  CONTENTS
 10 .bss          00000bd4  200001cc  200001cc  0000b1cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000da0  20000da0  0000b1cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2d8  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003068  00000000  00000000  0001a4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0001d540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a9  00000000  00000000  0001e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202c1  00000000  00000000  0001e9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cb9  00000000  00000000  0003ec82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3108  00000000  00000000  0005093b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103a43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032a8  00000000  00000000  00103a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00106d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009774 	.word	0x08009774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08009774 	.word	0x08009774

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <handle_user_btn>:
/**
  * @brief  Debounce handler for button input.
  * @param  btn_value: Raw input value of the button (non-zero if pressed, zero if not pressed).
  * @retval Debounced button value (non-zero if debounced as pressed, zero otherwise).
  */
uint8_t handle_user_btn(uint8_t btn_value) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  static button_state_t btn_sm_state = NOT_PRESSED;
  static uint32_t curr_time = 0;
  uint32_t new_time = HAL_GetTick();
 800028a:	f000 fb87 	bl	800099c <HAL_GetTick>
 800028e:	60f8      	str	r0, [r7, #12]

  switch (btn_sm_state) {
 8000290:	4b1d      	ldr	r3, [pc, #116]	@ (8000308 <handle_user_btn+0x88>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b02      	cmp	r3, #2
 8000296:	d022      	beq.n	80002de <handle_user_btn+0x5e>
 8000298:	2b02      	cmp	r3, #2
 800029a:	dc2f      	bgt.n	80002fc <handle_user_btn+0x7c>
 800029c:	2b00      	cmp	r3, #0
 800029e:	d002      	beq.n	80002a6 <handle_user_btn+0x26>
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d00a      	beq.n	80002ba <handle_user_btn+0x3a>
 80002a4:	e02a      	b.n	80002fc <handle_user_btn+0x7c>
    case NOT_PRESSED:
      if (btn_value) {
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d024      	beq.n	80002f6 <handle_user_btn+0x76>
        btn_sm_state = BOUNCE;
 80002ac:	4b16      	ldr	r3, [pc, #88]	@ (8000308 <handle_user_btn+0x88>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
        curr_time = new_time;
 80002b2:	4a16      	ldr	r2, [pc, #88]	@ (800030c <handle_user_btn+0x8c>)
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	6013      	str	r3, [r2, #0]
      }
      break;
 80002b8:	e01d      	b.n	80002f6 <handle_user_btn+0x76>
    case BOUNCE:
      if ((new_time - curr_time) >= 100) {
 80002ba:	4b14      	ldr	r3, [pc, #80]	@ (800030c <handle_user_btn+0x8c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	1ad3      	subs	r3, r2, r3
 80002c2:	2b63      	cmp	r3, #99	@ 0x63
 80002c4:	d919      	bls.n	80002fa <handle_user_btn+0x7a>
        if (btn_value) {
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d004      	beq.n	80002d6 <handle_user_btn+0x56>
          btn_sm_state = PRESSED;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <handle_user_btn+0x88>)
 80002ce:	2202      	movs	r2, #2
 80002d0:	701a      	strb	r2, [r3, #0]
          return btn_value;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	e013      	b.n	80002fe <handle_user_btn+0x7e>
        } else {
          btn_sm_state = NOT_PRESSED;
 80002d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <handle_user_btn+0x88>)
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80002dc:	e00d      	b.n	80002fa <handle_user_btn+0x7a>
    case PRESSED:
      if (!btn_value) {
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d106      	bne.n	80002f2 <handle_user_btn+0x72>
        btn_sm_state = BOUNCE;
 80002e4:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <handle_user_btn+0x88>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
        curr_time = new_time;
 80002ea:	4a08      	ldr	r2, [pc, #32]	@ (800030c <handle_user_btn+0x8c>)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	6013      	str	r3, [r2, #0]
      }else {
        return btn_value;
      }
      break;
 80002f0:	e004      	b.n	80002fc <handle_user_btn+0x7c>
        return btn_value;
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	e003      	b.n	80002fe <handle_user_btn+0x7e>
      break;
 80002f6:	bf00      	nop
 80002f8:	e000      	b.n	80002fc <handle_user_btn+0x7c>
      break;
 80002fa:	bf00      	nop
  }
  return 0;
 80002fc:	2300      	movs	r3, #0
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200001e8 	.word	0x200001e8
 800030c:	200001ec 	.word	0x200001ec

08000310 <read_btn_state>:
  * @param  GPIOx: GPIO port.
  * @param  GPIO_Pin: GPIO pin.
  * @retval Button state
  */
uint8_t read_btn_state(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	807b      	strh	r3, [r7, #2]
 return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	4619      	mov	r1, r3
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f000 fdf7 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000326:	4603      	mov	r3, r0
}
 8000328:	4618      	mov	r0, r3
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <getDayofweek>:
  * @brief  Converts a numerical representation of the day of the week to its string equivalent.
  * @param  number: Numerical representation of the day of the week (1 for Monday, 2 for Tuesday, etc.).
  * @retval Pointer to a string representing the day of the week.
  */
char* getDayofweek(uint8_t number)
{
 8000330:	b4b0      	push	{r4, r5, r7}
 8000332:	b08b      	sub	sp, #44	@ 0x2c
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  char *weekday[] = { "Monday", "TuesDay", "Wednesday","Thursday","Friday","Saturday","Sunday"};
 800033a:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <getDayofweek+0x38>)
 800033c:	f107 040c 	add.w	r4, r7, #12
 8000340:	461d      	mov	r5, r3
 8000342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000346:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800034a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  return weekday[number-1];
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	3b01      	subs	r3, #1
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	3328      	adds	r3, #40	@ 0x28
 8000356:	443b      	add	r3, r7
 8000358:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800035c:	4618      	mov	r0, r3
 800035e:	372c      	adds	r7, #44	@ 0x2c
 8000360:	46bd      	mov	sp, r7
 8000362:	bcb0      	pop	{r4, r5, r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	080097d0 	.word	0x080097d0

0800036c <process_button_press>:
/**
  * @brief  Processes the button press and outputs the current time and date via USB.
  * @param  hrtc: Pointer to the RTC handle.
  * @retval None
  */
void process_button_press(RTC_HandleTypeDef *hrtc) {
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b08b      	sub	sp, #44	@ 0x2c
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeRead;
  RTC_DateTypeDef RTC_DateRead;

  HAL_RTC_GetTime(hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 8000374:	f107 030c 	add.w	r3, r7, #12
 8000378:	2200      	movs	r2, #0
 800037a:	4619      	mov	r1, r3
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f003 ffb6 	bl	80042ee <HAL_RTC_GetTime>
  HAL_RTC_GetDate(hrtc, &RTC_DateRead, RTC_FORMAT_BIN);
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	2200      	movs	r2, #0
 8000388:	4619      	mov	r1, r3
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f004 f891 	bl	80044b2 <HAL_RTC_GetDate>

  printmsg("Current Time is : %02d:%02d:%02d %s\r\n",\
          RTC_TimeRead.Hours,\
 8000390:	7b3b      	ldrb	r3, [r7, #12]
  printmsg("Current Time is : %02d:%02d:%02d %s\r\n",\
 8000392:	4619      	mov	r1, r3
          RTC_TimeRead.Minutes,RTC_TimeRead.Seconds,\
 8000394:	7b7b      	ldrb	r3, [r7, #13]
  printmsg("Current Time is : %02d:%02d:%02d %s\r\n",\
 8000396:	461a      	mov	r2, r3
          RTC_TimeRead.Minutes,RTC_TimeRead.Seconds,\
 8000398:	7bbb      	ldrb	r3, [r7, #14]
  printmsg("Current Time is : %02d:%02d:%02d %s\r\n",\
 800039a:	4618      	mov	r0, r3
         (RTC_TimeRead.TimeFormat == RTC_HOURFORMAT12_AM) ? "PM" : "AM");
 800039c:	7bfb      	ldrb	r3, [r7, #15]
  printmsg("Current Time is : %02d:%02d:%02d %s\r\n",\
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d101      	bne.n	80003a6 <process_button_press+0x3a>
 80003a2:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <process_button_press+0x74>)
 80003a4:	e000      	b.n	80003a8 <process_button_press+0x3c>
 80003a6:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <process_button_press+0x78>)
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	4603      	mov	r3, r0
 80003ac:	480e      	ldr	r0, [pc, #56]	@ (80003e8 <process_button_press+0x7c>)
 80003ae:	f000 f81f 	bl	80003f0 <printmsg>
  printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",\
          RTC_DateRead.Month,\
 80003b2:	7a7b      	ldrb	r3, [r7, #9]
  printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",\
 80003b4:	461d      	mov	r5, r3
          RTC_DateRead.Date,\
 80003b6:	7abb      	ldrb	r3, [r7, #10]
  printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",\
 80003b8:	461e      	mov	r6, r3
          2000 + RTC_DateRead.Year,
 80003ba:	7afb      	ldrb	r3, [r7, #11]
  printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",\
 80003bc:	f503 64fa 	add.w	r4, r3, #2000	@ 0x7d0
 80003c0:	7a3b      	ldrb	r3, [r7, #8]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffb4 	bl	8000330 <getDayofweek>
 80003c8:	4603      	mov	r3, r0
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	4623      	mov	r3, r4
 80003ce:	4632      	mov	r2, r6
 80003d0:	4629      	mov	r1, r5
 80003d2:	4806      	ldr	r0, [pc, #24]	@ (80003ec <process_button_press+0x80>)
 80003d4:	f000 f80c 	bl	80003f0 <printmsg>
          getDayofweek(RTC_DateRead.WeekDay));
}
 80003d8:	bf00      	nop
 80003da:	3724      	adds	r7, #36	@ 0x24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e0:	080097ec 	.word	0x080097ec
 80003e4:	080097f0 	.word	0x080097f0
 80003e8:	080097f4 	.word	0x080097f4
 80003ec:	0800981c 	.word	0x0800981c

080003f0 <printmsg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printmsg(char *format,...)
{
 80003f0:	b40f      	push	{r0, r1, r2, r3}
 80003f2:	b580      	push	{r7, lr}
 80003f4:	b096      	sub	sp, #88	@ 0x58
 80003f6:	af00      	add	r7, sp, #0
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80003f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80003fc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000406:	4618      	mov	r0, r3
 8000408:	f008 fd2a 	bl	8008e60 <vsiprintf>
	CDC_Transmit_FS((uint8_t *)str, strlen(str));
 800040c:	f107 0308 	add.w	r3, r7, #8
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff fedd 	bl	80001d0 <strlen>
 8000416:	4603      	mov	r3, r0
 8000418:	b29a      	uxth	r2, r3
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	4611      	mov	r1, r2
 8000420:	4618      	mov	r0, r3
 8000422:	f008 f8fd 	bl	8008620 <CDC_Transmit_FS>
	va_end(args);
}
 8000426:	bf00      	nop
 8000428:	3758      	adds	r7, #88	@ 0x58
 800042a:	46bd      	mov	sp, r7
 800042c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000430:	b004      	add	sp, #16
 8000432:	4770      	bx	lr

08000434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fa55 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f82f 	bl	80004a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000442:	f000 f8e7 	bl	8000614 <MX_GPIO_Init>
  HAL_Delay(500);
 8000446:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800044a:	f000 fab3 	bl	80009b4 <HAL_Delay>
  MX_USB_DEVICE_Init();
 800044e:	f008 f829 	bl	80084a4 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000452:	f000 f885 	bl	8000560 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printmsg("RTC calendar:\r\n");
 8000456:	480f      	ldr	r0, [pc, #60]	@ (8000494 <main+0x60>)
 8000458:	f7ff ffca 	bl	80003f0 <printmsg>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
//    HAL_Delay(100);
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
//    HAL_Delay(100);
    if (button_pressed) {
 800045c:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <main+0x64>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0fb      	beq.n	800045c <main+0x28>
      btn_val = read_btn_state(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin);
 8000464:	2101      	movs	r1, #1
 8000466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800046a:	f7ff ff51 	bl	8000310 <read_btn_state>
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]

      btn_val = handle_user_btn(btn_val);// switch de-bounce
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff03 	bl	8000280 <handle_user_btn>
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
      if (btn_val == GPIO_PIN_SET) {
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d1eb      	bne.n	800045c <main+0x28>
        process_button_press(&hrtc);
 8000484:	4805      	ldr	r0, [pc, #20]	@ (800049c <main+0x68>)
 8000486:	f7ff ff71 	bl	800036c <process_button_press>
        button_pressed = 0;
 800048a:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <main+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
    if (button_pressed) {
 8000490:	e7e4      	b.n	800045c <main+0x28>
 8000492:	bf00      	nop
 8000494:	08009844 	.word	0x08009844
 8000498:	20000210 	.word	0x20000210
 800049c:	200001f0 	.word	0x200001f0

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b09e      	sub	sp, #120	@ 0x78
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004aa:	2228      	movs	r2, #40	@ 0x28
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f008 fce0 	bl	8008e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c4:	463b      	mov	r3, r7
 80004c6:	223c      	movs	r2, #60	@ 0x3c
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f008 fcd2 	bl	8008e74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80004d0:	2309      	movs	r3, #9
 80004d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004d8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004e2:	2301      	movs	r3, #1
 80004e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e6:	2302      	movs	r3, #2
 80004e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004ee:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004f4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fa1c 	bl	8002938 <HAL_RCC_OscConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000506:	f000 f8ed 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	230f      	movs	r3, #15
 800050c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050e:	2302      	movs	r3, #2
 8000510:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800051a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000520:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000524:	2102      	movs	r1, #2
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fa44 	bl	80039b4 <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000532:	f000 f8d7 	bl	80006e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RTC;
 8000536:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800053a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800053c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000540:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000542:	2300      	movs	r3, #0
 8000544:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000546:	463b      	mov	r3, r7
 8000548:	4618      	mov	r0, r3
 800054a:	f003 fc03 	bl	8003d54 <HAL_RCCEx_PeriphCLKConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000554:	f000 f8c6 	bl	80006e4 <Error_Handler>
  }
}
 8000558:	bf00      	nop
 800055a:	3778      	adds	r7, #120	@ 0x78
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000574:	2300      	movs	r3, #0
 8000576:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000578:	4b24      	ldr	r3, [pc, #144]	@ (800060c <MX_RTC_Init+0xac>)
 800057a:	4a25      	ldr	r2, [pc, #148]	@ (8000610 <MX_RTC_Init+0xb0>)
 800057c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800057e:	4b23      	ldr	r3, [pc, #140]	@ (800060c <MX_RTC_Init+0xac>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000584:	4b21      	ldr	r3, [pc, #132]	@ (800060c <MX_RTC_Init+0xac>)
 8000586:	227f      	movs	r2, #127	@ 0x7f
 8000588:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800058a:	4b20      	ldr	r3, [pc, #128]	@ (800060c <MX_RTC_Init+0xac>)
 800058c:	22ff      	movs	r2, #255	@ 0xff
 800058e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000590:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <MX_RTC_Init+0xac>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000596:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <MX_RTC_Init+0xac>)
 8000598:	2200      	movs	r2, #0
 800059a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800059c:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <MX_RTC_Init+0xac>)
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005a2:	481a      	ldr	r0, [pc, #104]	@ (800060c <MX_RTC_Init+0xac>)
 80005a4:	f003 fd86 	bl	80040b4 <HAL_RTC_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80005ae:	f000 f899 	bl	80006e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	480f      	ldr	r0, [pc, #60]	@ (800060c <MX_RTC_Init+0xac>)
 80005ce:	f003 fdf4 	bl	80041ba <HAL_RTC_SetTime>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80005d8:	f000 f884 	bl	80006e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80005dc:	2301      	movs	r3, #1
 80005de:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80005e0:	2301      	movs	r3, #1
 80005e2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	2201      	movs	r2, #1
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	@ (800060c <MX_RTC_Init+0xac>)
 80005f4:	f003 fed9 	bl	80043aa <HAL_RTC_SetDate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80005fe:	f000 f871 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200001f0 	.word	0x200001f0
 8000610:	40002800 	.word	0x40002800

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062a:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <MX_GPIO_Init+0xa4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a22      	ldr	r2, [pc, #136]	@ (80006b8 <MX_GPIO_Init+0xa4>)
 8000630:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_GPIO_Init+0xa4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_GPIO_Init+0xa4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a1c      	ldr	r2, [pc, #112]	@ (80006b8 <MX_GPIO_Init+0xa4>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <MX_GPIO_Init+0xa4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	210e      	movs	r1, #14
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f000 fc6f 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067e:	f000 facf 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000682:	230e      	movs	r3, #14
 8000684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f000 fac0 	bl	8000c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2006      	movs	r0, #6
 80006a6:	f000 fa84 	bl	8000bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006aa:	2006      	movs	r0, #6
 80006ac:	f000 fa9d 	bl	8000bea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0) {
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d102      	bne.n	80006d2 <HAL_GPIO_EXTI_Callback+0x16>
    button_pressed = GPIO_PIN_SET;
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <HAL_GPIO_EXTI_Callback+0x24>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
  }
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000210 	.word	0x20000210

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <Error_Handler+0x8>

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <HAL_MspInit+0x44>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000734 <HAL_MspInit+0x44>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <HAL_MspInit+0x44>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <HAL_MspInit+0x44>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <HAL_MspInit+0x44>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <HAL_MspInit+0x44>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0d      	ldr	r2, [pc, #52]	@ (800077c <HAL_RTC_MspInit+0x44>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d111      	bne.n	800076e <HAL_RTC_MspInit+0x36>
 800074a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800074e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	fa93 f3a3 	rbit	r3, r3
 8000756:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000758:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800075a:	fab3 f383 	clz	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <HAL_RTC_MspInit+0x48>)
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	461a      	mov	r2, r3
 800076a:	2301      	movs	r3, #1
 800076c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40002800 	.word	0x40002800
 8000780:	10908100 	.word	0x10908100

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <UsageFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007da:	f000 f8cb 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fbc4 	bl	8000f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007f4:	4802      	ldr	r0, [pc, #8]	@ (8000800 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80007f6:	f000 fcc2 	bl	800117e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000764 	.word	0x20000764

08000804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800080c:	4a14      	ldr	r2, [pc, #80]	@ (8000860 <_sbrk+0x5c>)
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <_sbrk+0x60>)
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <_sbrk+0x64>)
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <_sbrk+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d207      	bcs.n	8000844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000834:	f008 fb26 	bl	8008e84 <__errno>
 8000838:	4603      	mov	r3, r0
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	e009      	b.n	8000858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <_sbrk+0x64>)
 8000854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000a000 	.word	0x2000a000
 8000864:	00000400 	.word	0x00000400
 8000868:	20000214 	.word	0x20000214
 800086c:	20000da0 	.word	0x20000da0

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	@ (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000898:	f7ff ffea 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	@ (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	@ (80008d8 <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	@ (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f008 fae5 	bl	8008e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c6:	f7ff fdb5 	bl	8000434 <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80008d8:	08009910 	.word	0x08009910
  ldr r2, =_sbss
 80008dc:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80008e0:	20000da0 	.word	0x20000da0

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f94f 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	200f      	movs	r0, #15
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fef4 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f967 	bl	8000c06 <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f92f 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	@ (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	20000218 	.word	0x20000218

0800099c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;  
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000218 	.word	0x20000218

080009b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009bc:	f7ff ffee 	bl	800099c <HAL_GetTick>
 80009c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009cc:	d005      	beq.n	80009da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_Delay+0x44>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009da:	bf00      	nop
 80009dc:	f7ff ffde 	bl	800099c <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d8f7      	bhi.n	80009dc <HAL_Delay+0x28>
  {
  }
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0b      	blt.n	8000a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 021f 	and.w	r2, r3, #31
 8000a78:	4907      	ldr	r1, [pc, #28]	@ (8000a98 <__NVIC_EnableIRQ+0x38>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	095b      	lsrs	r3, r3, #5
 8000a80:	2001      	movs	r0, #1
 8000a82:	fa00 f202 	lsl.w	r2, r0, r2
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	@ (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	@ (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	@ 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff29 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff3e 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff8e 	bl	8000af0 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff31 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffa2 	bl	8000b58 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	e154      	b.n	8000eda <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 8146 	beq.w	8000ed4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d005      	beq.n	8000c60 <HAL_GPIO_Init+0x40>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d130      	bne.n	8000cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c96:	2201      	movs	r2, #1
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	f003 0201 	and.w	r2, r3, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d017      	beq.n	8000cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d123      	bne.n	8000d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	6939      	ldr	r1, [r7, #16]
 8000d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0203 	and.w	r2, r3, #3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 80a0 	beq.w	8000ed4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d94:	4b58      	ldr	r3, [pc, #352]	@ (8000ef8 <HAL_GPIO_Init+0x2d8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a57      	ldr	r2, [pc, #348]	@ (8000ef8 <HAL_GPIO_Init+0x2d8>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b55      	ldr	r3, [pc, #340]	@ (8000ef8 <HAL_GPIO_Init+0x2d8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dac:	4a53      	ldr	r2, [pc, #332]	@ (8000efc <HAL_GPIO_Init+0x2dc>)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dd6:	d019      	beq.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a49      	ldr	r2, [pc, #292]	@ (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d013      	beq.n	8000e08 <HAL_GPIO_Init+0x1e8>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a48      	ldr	r2, [pc, #288]	@ (8000f04 <HAL_GPIO_Init+0x2e4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d00d      	beq.n	8000e04 <HAL_GPIO_Init+0x1e4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a47      	ldr	r2, [pc, #284]	@ (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d007      	beq.n	8000e00 <HAL_GPIO_Init+0x1e0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a46      	ldr	r2, [pc, #280]	@ (8000f0c <HAL_GPIO_Init+0x2ec>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d101      	bne.n	8000dfc <HAL_GPIO_Init+0x1dc>
 8000df8:	2304      	movs	r3, #4
 8000dfa:	e008      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	e006      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e00:	2303      	movs	r3, #3
 8000e02:	e004      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4093      	lsls	r3, r2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e1e:	4937      	ldr	r1, [pc, #220]	@ (8000efc <HAL_GPIO_Init+0x2dc>)
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2c:	4b38      	ldr	r3, [pc, #224]	@ (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e50:	4a2f      	ldr	r2, [pc, #188]	@ (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e56:	4b2e      	ldr	r3, [pc, #184]	@ (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e7a:	4a25      	ldr	r2, [pc, #148]	@ (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e80:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ece:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f47f aea3 	bne.w	8000c30 <HAL_GPIO_Init+0x10>
  }
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	48001000 	.word	0x48001000
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e001      	b.n	8000f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb92 	bl	80006bc <HAL_GPIO_EXTI_Callback>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0b9      	b.n	800112a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f007 fc5e 	bl	800888c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 fb8c 	bl	80046fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e03e      	b.n	8001066 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3311      	adds	r3, #17
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3310      	adds	r3, #16
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	3313      	adds	r3, #19
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	3320      	adds	r3, #32
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	440b      	add	r3, r1
 8001046:	3324      	adds	r3, #36	@ 0x24
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	3301      	adds	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	429a      	cmp	r2, r3
 800106e:	d3bb      	bcc.n	8000fe8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e044      	b.n	8001100 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	440b      	add	r3, r1
 80010c6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	440b      	add	r3, r1
 80010dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	3301      	adds	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	791b      	ldrb	r3, [r3, #4]
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	429a      	cmp	r2, r3
 8001108:	d3b5      	bcc.n	8001076 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3304      	adds	r3, #4
 8001112:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001116:	f003 fb0b 	bl	8004730 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_PCD_Start+0x16>
 8001144:	2302      	movs	r3, #2
 8001146:	e016      	b.n	8001176 <HAL_PCD_Start+0x44>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fab9 	bl	80046cc <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800115a:	2101      	movs	r1, #1
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f007 fe31 	bl	8008dc4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f005 fd76 	bl	8006c58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f005 fd6f 	bl	8006c6e <USB_ReadInterrupts>
 8001190:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fab1 	bl	8001704 <PCD_EP_ISR_Handler>

    return;
 80011a2:	e0bd      	b.n	8001320 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d013      	beq.n	80011d6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011c0:	b292      	uxth	r2, r2
 80011c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f007 fc01 	bl	80089ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011cc:	2100      	movs	r1, #0
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f8a9 	bl	8001326 <HAL_PCD_SetAddress>

    return;
 80011d4:	e0a4      	b.n	8001320 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011f2:	b292      	uxth	r2, r2
 80011f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80011f8:	e092      	b.n	8001320 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00c      	beq.n	800121e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001216:	b292      	uxth	r2, r2
 8001218:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800121c:	e080      	b.n	8001320 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d027      	beq.n	8001278 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0204 	bic.w	r2, r2, #4
 800123a:	b292      	uxth	r2, r2
 800123c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0208 	bic.w	r2, r2, #8
 8001252:	b292      	uxth	r2, r2
 8001254:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f007 fbf1 	bl	8008a40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001266:	b29a      	uxth	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001270:	b292      	uxth	r2, r2
 8001272:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001276:	e053      	b.n	8001320 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800127e:	2b00      	cmp	r3, #0
 8001280:	d027      	beq.n	80012d2 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0208 	orr.w	r2, r2, #8
 8001294:	b292      	uxth	r2, r2
 8001296:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012ac:	b292      	uxth	r2, r2
 80012ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0204 	orr.w	r2, r2, #4
 80012c4:	b292      	uxth	r2, r2
 80012c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f007 fb9e 	bl	8008a0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80012d0:	e026      	b.n	8001320 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00f      	beq.n	80012fc <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80012ee:	b292      	uxth	r2, r2
 80012f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f007 fb5c 	bl	80089b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80012fa:	e011      	b.n	8001320 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800130e:	b29a      	uxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001318:	b292      	uxth	r2, r2
 800131a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800131e:	bf00      	nop
  }
}
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_PCD_SetAddress+0x1a>
 800133c:	2302      	movs	r3, #2
 800133e:	e012      	b.n	8001366 <HAL_PCD_SetAddress+0x40>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f005 fc6a 	bl	8006c30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	4608      	mov	r0, r1
 8001378:	4611      	mov	r1, r2
 800137a:	461a      	mov	r2, r3
 800137c:	4603      	mov	r3, r0
 800137e:	70fb      	strb	r3, [r7, #3]
 8001380:	460b      	mov	r3, r1
 8001382:	803b      	strh	r3, [r7, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800138c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	da0e      	bge.n	80013b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	f003 0207 	and.w	r2, r3, #7
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	3310      	adds	r3, #16
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	705a      	strb	r2, [r3, #1]
 80013b0:	e00e      	b.n	80013d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	f003 0207 	and.w	r2, r3, #7
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013dc:	883a      	ldrh	r2, [r7, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	78ba      	ldrb	r2, [r7, #2]
 80013e6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013e8:	78bb      	ldrb	r3, [r7, #2]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d102      	bne.n	80013f4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_PCD_EP_Open+0x94>
 80013fe:	2302      	movs	r3, #2
 8001400:	e00e      	b.n	8001420 <HAL_PCD_EP_Open+0xb2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68f9      	ldr	r1, [r7, #12]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 f9ab 	bl	800476c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800141e:	7afb      	ldrb	r3, [r7, #11]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da0e      	bge.n	800145a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	f003 0207 	and.w	r2, r3, #7
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	3310      	adds	r3, #16
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2201      	movs	r2, #1
 8001456:	705a      	strb	r2, [r3, #1]
 8001458:	e00e      	b.n	8001478 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	f003 0207 	and.w	r2, r3, #7
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	b2da      	uxtb	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_PCD_EP_Close+0x6a>
 800148e:	2302      	movs	r3, #2
 8001490:	e00e      	b.n	80014b0 <HAL_PCD_EP_Close+0x88>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68f9      	ldr	r1, [r7, #12]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 fd27 	bl	8004ef4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	460b      	mov	r3, r1
 80014c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	f003 0207 	and.w	r2, r3, #7
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2200      	movs	r2, #0
 80014f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014f8:	7afb      	ldrb	r3, [r7, #11]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6979      	ldr	r1, [r7, #20]
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fedf 	bl	80052ce <USB_EPStartXfer>

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0207 	and.w	r2, r3, #7
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800153c:	681b      	ldr	r3, [r3, #0]
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	460b      	mov	r3, r1
 8001558:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155a:	7afb      	ldrb	r3, [r7, #11]
 800155c:	f003 0207 	and.w	r2, r3, #7
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	3310      	adds	r3, #16
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2201      	movs	r2, #1
 8001594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001596:	7afb      	ldrb	r3, [r7, #11]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	b2da      	uxtb	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6979      	ldr	r1, [r7, #20]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fe90 	bl	80052ce <USB_EPStartXfer>

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	7912      	ldrb	r2, [r2, #4]
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e03e      	b.n	8001654 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da0e      	bge.n	80015fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	f003 0207 	and.w	r2, r3, #7
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	3310      	adds	r3, #16
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2201      	movs	r2, #1
 80015f8:	705a      	strb	r2, [r3, #1]
 80015fa:	e00c      	b.n	8001616 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	b2da      	uxtb	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_PCD_EP_SetStall+0x7e>
 8001632:	2302      	movs	r3, #2
 8001634:	e00e      	b.n	8001654 <HAL_PCD_EP_SetStall+0x9c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68f9      	ldr	r1, [r7, #12]
 8001644:	4618      	mov	r0, r3
 8001646:	f005 f9f4 	bl	8006a32 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	7912      	ldrb	r2, [r2, #4]
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e040      	b.n	80016fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800167a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800167e:	2b00      	cmp	r3, #0
 8001680:	da0e      	bge.n	80016a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	f003 0207 	and.w	r2, r3, #7
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	3310      	adds	r3, #16
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	705a      	strb	r2, [r3, #1]
 800169e:	e00e      	b.n	80016be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	f003 0207 	and.w	r2, r3, #7
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_PCD_EP_ClrStall+0x82>
 80016da:	2302      	movs	r3, #2
 80016dc:	e00e      	b.n	80016fc <HAL_PCD_EP_ClrStall+0xa0>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68f9      	ldr	r1, [r7, #12]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 f9f1 	bl	8006ad4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b096      	sub	sp, #88	@ 0x58
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800170c:	e3bb      	b.n	8001e86 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001716:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800171a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001728:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 8175 	bne.w	8001a1c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001732:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	d14e      	bne.n	80017dc <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800174a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800174e:	81fb      	strh	r3, [r7, #14]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800175a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800175e:	b29b      	uxth	r3, r3
 8001760:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3310      	adds	r3, #16
 8001766:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001770:	b29b      	uxth	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	3302      	adds	r3, #2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001792:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	441a      	add	r2, r3
 800179e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017a2:	2100      	movs	r1, #0
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f007 f8ea 	bl	800897e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7b1b      	ldrb	r3, [r3, #12]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8368 	beq.w	8001e86 <PCD_EP_ISR_Handler+0x782>
 80017b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 8363 	bne.w	8001e86 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7b1b      	ldrb	r3, [r3, #12]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	731a      	strb	r2, [r3, #12]
 80017da:	e354      	b.n	8001e86 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017e2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80017f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d034      	beq.n	8001864 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	3306      	adds	r3, #6
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001824:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001832:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001836:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001838:	b29b      	uxth	r3, r3
 800183a:	f005 fa6e 	bl	8006d1a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b29a      	uxth	r2, r3
 8001846:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800184a:	4013      	ands	r3, r2
 800184c:	823b      	strh	r3, [r7, #16]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	8a3a      	ldrh	r2, [r7, #16]
 8001854:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001858:	b292      	uxth	r2, r2
 800185a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f007 f861 	bl	8008924 <HAL_PCD_SetupStageCallback>
 8001862:	e310      	b.n	8001e86 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001864:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001868:	2b00      	cmp	r3, #0
 800186a:	f280 830c 	bge.w	8001e86 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800187a:	4013      	ands	r3, r2
 800187c:	83fb      	strh	r3, [r7, #30]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	8bfa      	ldrh	r2, [r7, #30]
 8001884:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001888:	b292      	uxth	r2, r2
 800188a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001894:	b29b      	uxth	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	3306      	adds	r3, #6
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d019      	beq.n	80018f4 <PCD_EP_ISR_Handler+0x1f0>
 80018c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d015      	beq.n	80018f4 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ce:	6959      	ldr	r1, [r3, #20]
 80018d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018d8:	b29b      	uxth	r3, r3
 80018da:	f005 fa1e 	bl	8006d1a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	441a      	add	r2, r3
 80018e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018ec:	2100      	movs	r1, #0
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f007 f82a 	bl	8008948 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80018fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 82bd 	bne.w	8001e86 <PCD_EP_ISR_Handler+0x782>
 800190c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001910:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001914:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001918:	f000 82b5 	beq.w	8001e86 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4413      	add	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001946:	b29a      	uxth	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	801a      	strh	r2, [r3, #0]
 800194c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <PCD_EP_ISR_Handler+0x266>
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800195e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001962:	b29a      	uxth	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	e039      	b.n	80019de <PCD_EP_ISR_Handler+0x2da>
 800196a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001970:	d818      	bhi.n	80019a4 <PCD_EP_ISR_Handler+0x2a0>
 8001972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	647b      	str	r3, [r7, #68]	@ 0x44
 800197a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <PCD_EP_ISR_Handler+0x288>
 8001986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001988:	3301      	adds	r3, #1
 800198a:	647b      	str	r3, [r7, #68]	@ 0x44
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	b29a      	uxth	r2, r3
 8001992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001994:	b29b      	uxth	r3, r3
 8001996:	029b      	lsls	r3, r3, #10
 8001998:	b29b      	uxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b29a      	uxth	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	801a      	strh	r2, [r3, #0]
 80019a2:	e01c      	b.n	80019de <PCD_EP_ISR_Handler+0x2da>
 80019a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80019ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <PCD_EP_ISR_Handler+0x2ba>
 80019b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ba:	3b01      	subs	r3, #1
 80019bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	029b      	lsls	r3, r3, #10
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019d8:	b29a      	uxth	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ee:	827b      	strh	r3, [r7, #18]
 80019f0:	8a7b      	ldrh	r3, [r7, #18]
 80019f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80019f6:	827b      	strh	r3, [r7, #18]
 80019f8:	8a7b      	ldrh	r3, [r7, #18]
 80019fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80019fe:	827b      	strh	r3, [r7, #18]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	8a7b      	ldrh	r3, [r7, #18]
 8001a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	8013      	strh	r3, [r2, #0]
 8001a1a:	e234      	b.n	8001e86 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a30:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f280 80fc 	bge.w	8001c32 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a50:	4013      	ands	r3, r2
 8001a52:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001a68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a70:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a88:	7b1b      	ldrb	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d125      	bne.n	8001ada <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3306      	adds	r3, #6
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001aba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8092 	beq.w	8001be8 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aca:	6959      	ldr	r1, [r3, #20]
 8001acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ace:	88da      	ldrh	r2, [r3, #6]
 8001ad0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ad4:	f005 f921 	bl	8006d1a <USB_ReadPMA>
 8001ad8:	e086      	b.n	8001be8 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001adc:	78db      	ldrb	r3, [r3, #3]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d10a      	bne.n	8001af8 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ae2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f9d9 	bl	8001ea2 <HAL_PCD_EP_DB_Receive>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001af6:	e077      	b.n	8001be8 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b12:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	441a      	add	r2, r3
 8001b24:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001b28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d024      	beq.n	8001ba0 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b7e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d02e      	beq.n	8001be8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b90:	6959      	ldr	r1, [r3, #20]
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	891a      	ldrh	r2, [r3, #8]
 8001b96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b9a:	f005 f8be 	bl	8006d1a <USB_ReadPMA>
 8001b9e:	e023      	b.n	8001be8 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3306      	adds	r3, #6
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001bcc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d009      	beq.n	8001be8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bda:	6959      	ldr	r1, [r3, #20]
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bde:	895a      	ldrh	r2, [r3, #10]
 8001be0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001be4:	f005 f899 	bl	8006d1a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bea:	69da      	ldr	r2, [r3, #28]
 8001bec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bf0:	441a      	add	r2, r3
 8001bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bfe:	441a      	add	r2, r3
 8001c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c02:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <PCD_EP_ISR_Handler+0x514>
 8001c0c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d206      	bcs.n	8001c26 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f006 fe92 	bl	8008948 <HAL_PCD_DataOutStageCallback>
 8001c24:	e005      	b.n	8001c32 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 fb4e 	bl	80052ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c32:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8123 	beq.w	8001e86 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c40:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	3310      	adds	r3, #16
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	441a      	add	r2, r3
 8001c80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f040 80a2 	bne.w	8001dde <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	7b1b      	ldrb	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8093 	beq.w	8001dd0 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001caa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d046      	beq.n	8001d44 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d126      	bne.n	8001d0c <PCD_EP_ISR_Handler+0x608>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	4413      	add	r3, r2
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	011a      	lsls	r2, r3, #4
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	4413      	add	r3, r2
 8001ce0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ce4:	623b      	str	r3, [r7, #32]
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	e061      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x6cc>
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d15d      	bne.n	8001dd0 <PCD_EP_ISR_Handler+0x6cc>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d28:	4413      	add	r3, r2
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	011a      	lsls	r2, r3, #4
 8001d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d34:	4413      	add	r3, r2
 8001d36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3e:	2200      	movs	r2, #0
 8001d40:	801a      	strh	r2, [r3, #0]
 8001d42:	e045      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4c:	785b      	ldrb	r3, [r3, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d126      	bne.n	8001da0 <PCD_EP_ISR_Handler+0x69c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d66:	4413      	add	r3, r2
 8001d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	011a      	lsls	r2, r3, #4
 8001d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d72:	4413      	add	r3, r2
 8001d74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d88:	801a      	strh	r2, [r3, #0]
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e017      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x6cc>
 8001da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da2:	785b      	ldrb	r3, [r3, #1]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d113      	bne.n	8001dd0 <PCD_EP_ISR_Handler+0x6cc>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001db6:	4413      	add	r3, r2
 8001db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	011a      	lsls	r2, r3, #4
 8001dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f006 fdd1 	bl	800897e <HAL_PCD_DataInStageCallback>
 8001ddc:	e053      	b.n	8001e86 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001dde:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d146      	bne.n	8001e78 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d907      	bls.n	8001e32 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e2a:	1ad2      	subs	r2, r2, r3
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2e:	619a      	str	r2, [r3, #24]
 8001e30:	e002      	b.n	8001e38 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d106      	bne.n	8001e4e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f006 fd99 	bl	800897e <HAL_PCD_DataInStageCallback>
 8001e4c:	e01b      	b.n	8001e86 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e56:	441a      	add	r2, r3
 8001e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5e:	69da      	ldr	r2, [r3, #28]
 8001e60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e64:	441a      	add	r2, r3
 8001e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e68:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fa2c 	bl	80052ce <USB_EPStartXfer>
 8001e76:	e006      	b.n	8001e86 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f91b 	bl	80020bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f6ff ac3b 	blt.w	800170e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3758      	adds	r7, #88	@ 0x58
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b088      	sub	sp, #32
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	4613      	mov	r3, r2
 8001eae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d07e      	beq.n	8001fb8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	8b7b      	ldrh	r3, [r7, #26]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d306      	bcc.n	8001efc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	8b7b      	ldrh	r3, [r7, #26]
 8001ef4:	1ad2      	subs	r2, r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	619a      	str	r2, [r3, #24]
 8001efa:	e002      	b.n	8001f02 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d123      	bne.n	8001f52 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f24:	833b      	strh	r3, [r7, #24]
 8001f26:	8b3b      	ldrh	r3, [r7, #24]
 8001f28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f2c:	833b      	strh	r3, [r7, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	441a      	add	r2, r3
 8001f3c:	8b3b      	ldrh	r3, [r7, #24]
 8001f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01f      	beq.n	8001f9c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f76:	82fb      	strh	r3, [r7, #22]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	441a      	add	r2, r3
 8001f86:	8afb      	ldrh	r3, [r7, #22]
 8001f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f9c:	8b7b      	ldrh	r3, [r7, #26]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8087 	beq.w	80020b2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	6959      	ldr	r1, [r3, #20]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	891a      	ldrh	r2, [r3, #8]
 8001fb0:	8b7b      	ldrh	r3, [r7, #26]
 8001fb2:	f004 feb2 	bl	8006d1a <USB_ReadPMA>
 8001fb6:	e07c      	b.n	80020b2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3306      	adds	r3, #6
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	8b7b      	ldrh	r3, [r7, #26]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d306      	bcc.n	8001ffa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	8b7b      	ldrh	r3, [r7, #26]
 8001ff2:	1ad2      	subs	r2, r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	e002      	b.n	8002000 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d123      	bne.n	8002050 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800201e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002022:	83fb      	strh	r3, [r7, #30]
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800202a:	83fb      	strh	r3, [r7, #30]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	441a      	add	r2, r3
 800203a:	8bfb      	ldrh	r3, [r7, #30]
 800203c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800204c:	b29b      	uxth	r3, r3
 800204e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11f      	bne.n	800209a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002074:	83bb      	strh	r3, [r7, #28]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	441a      	add	r2, r3
 8002084:	8bbb      	ldrh	r3, [r7, #28]
 8002086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800208a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800208e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002092:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002096:	b29b      	uxth	r3, r3
 8002098:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800209a:	8b7b      	ldrh	r3, [r7, #26]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	6959      	ldr	r1, [r3, #20]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	895a      	ldrh	r2, [r3, #10]
 80020ac:	8b7b      	ldrh	r3, [r7, #26]
 80020ae:	f004 fe34 	bl	8006d1a <USB_ReadPMA>
    }
  }

  return count;
 80020b2:	8b7b      	ldrh	r3, [r7, #26]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b0a4      	sub	sp, #144	@ 0x90
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 81dd 	beq.w	8002490 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	3302      	adds	r3, #2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fe:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800210a:	429a      	cmp	r2, r3
 800210c:	d907      	bls.n	800211e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	619a      	str	r2, [r3, #24]
 800211c:	e002      	b.n	8002124 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	f040 80b9 	bne.w	80022a0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d126      	bne.n	8002184 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214a:	4413      	add	r3, r2
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	011a      	lsls	r2, r3, #4
 8002154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002156:	4413      	add	r3, r2
 8002158:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800215c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800215e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002168:	b29a      	uxth	r2, r3
 800216a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216c:	801a      	strh	r2, [r3, #0]
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800217c:	b29a      	uxth	r2, r3
 800217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002180:	801a      	strh	r2, [r3, #0]
 8002182:	e01a      	b.n	80021ba <HAL_PCD_EP_DB_Transmit+0xfe>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d116      	bne.n	80021ba <HAL_PCD_EP_DB_Transmit+0xfe>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	637b      	str	r3, [r7, #52]	@ 0x34
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a0:	4413      	add	r3, r2
 80021a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	011a      	lsls	r2, r3, #4
 80021aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ac:	4413      	add	r3, r2
 80021ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80021b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b6:	2200      	movs	r2, #0
 80021b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	785b      	ldrb	r3, [r3, #1]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d126      	bne.n	8002216 <HAL_PCD_EP_DB_Transmit+0x15a>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	011a      	lsls	r2, r3, #4
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4413      	add	r3, r2
 80021ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	801a      	strh	r2, [r3, #0]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800220a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800220e:	b29a      	uxth	r2, r3
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	e017      	b.n	8002246 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	785b      	ldrb	r3, [r3, #1]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d113      	bne.n	8002246 <HAL_PCD_EP_DB_Transmit+0x18a>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	4413      	add	r3, r2
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	011a      	lsls	r2, r3, #4
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	4413      	add	r3, r2
 800223a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800223e:	623b      	str	r3, [r7, #32]
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	2200      	movs	r2, #0
 8002244:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f006 fb96 	bl	800897e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 82fc 	beq.w	8002856 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002278:	82fb      	strh	r3, [r7, #22]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	441a      	add	r2, r3
 8002288:	8afb      	ldrh	r3, [r7, #22]
 800228a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800228e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002292:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800229a:	b29b      	uxth	r3, r3
 800229c:	8013      	strh	r3, [r2, #0]
 800229e:	e2da      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d021      	beq.n	80022ee <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	441a      	add	r2, r3
 80022d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80022da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	f040 82ae 	bne.w	8002856 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002302:	441a      	add	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002310:	441a      	add	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	429a      	cmp	r2, r3
 8002320:	d30b      	bcc.n	800233a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002332:	1ad2      	subs	r2, r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	621a      	str	r2, [r3, #32]
 8002338:	e017      	b.n	800236a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002342:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002346:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002352:	e00a      	b.n	800236a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2200      	movs	r2, #0
 8002368:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	785b      	ldrb	r3, [r3, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d165      	bne.n	800243e <HAL_PCD_EP_DB_Transmit+0x382>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002380:	b29b      	uxth	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002386:	4413      	add	r3, r2
 8002388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	011a      	lsls	r2, r3, #4
 8002390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002392:	4413      	add	r3, r2
 8002394:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800239a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c4:	801a      	strh	r2, [r3, #0]
 80023c6:	e057      	b.n	8002478 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80023ce:	d818      	bhi.n	8002402 <HAL_PCD_EP_DB_Transmit+0x346>
 80023d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d4:	085b      	lsrs	r3, r3, #1
 80023d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_PCD_EP_DB_Transmit+0x32e>
 80023e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023e6:	3301      	adds	r3, #1
 80023e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fe:	801a      	strh	r2, [r3, #0]
 8002400:	e03a      	b.n	8002478 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	64bb      	str	r3, [r7, #72]	@ 0x48
 800240a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <HAL_PCD_EP_DB_Transmit+0x360>
 8002416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002418:	3b01      	subs	r3, #1
 800241a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800241c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	b29a      	uxth	r2, r3
 8002422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002424:	b29b      	uxth	r3, r3
 8002426:	029b      	lsls	r3, r3, #10
 8002428:	b29b      	uxth	r3, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	b29b      	uxth	r3, r3
 800242e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002436:	b29a      	uxth	r2, r3
 8002438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243a:	801a      	strh	r2, [r3, #0]
 800243c:	e01c      	b.n	8002478 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d118      	bne.n	8002478 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	647b      	str	r3, [r7, #68]	@ 0x44
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002454:	b29b      	uxth	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800245a:	4413      	add	r3, r2
 800245c:	647b      	str	r3, [r7, #68]	@ 0x44
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	011a      	lsls	r2, r3, #4
 8002464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002466:	4413      	add	r3, r2
 8002468:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800246c:	643b      	str	r3, [r7, #64]	@ 0x40
 800246e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002472:	b29a      	uxth	r2, r3
 8002474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002476:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6959      	ldr	r1, [r3, #20]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	891a      	ldrh	r2, [r3, #8]
 8002484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002488:	b29b      	uxth	r3, r3
 800248a:	f004 fc00 	bl	8006c8e <USB_WritePMA>
 800248e:	e1e2      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	3306      	adds	r3, #6
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d307      	bcc.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80024d0:	1ad2      	subs	r2, r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	619a      	str	r2, [r3, #24]
 80024d6:	e002      	b.n	80024de <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 80c0 	bne.w	8002668 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	785b      	ldrb	r3, [r3, #1]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d126      	bne.n	800253e <HAL_PCD_EP_DB_Transmit+0x482>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024fe:	b29b      	uxth	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002504:	4413      	add	r3, r2
 8002506:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	011a      	lsls	r2, r3, #4
 800250e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002510:	4413      	add	r3, r2
 8002512:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002516:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002522:	b29a      	uxth	r2, r3
 8002524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002526:	801a      	strh	r2, [r3, #0]
 8002528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002536:	b29a      	uxth	r2, r3
 8002538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800253a:	801a      	strh	r2, [r3, #0]
 800253c:	e01a      	b.n	8002574 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d116      	bne.n	8002574 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	667b      	str	r3, [r7, #100]	@ 0x64
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800255a:	4413      	add	r3, r2
 800255c:	667b      	str	r3, [r7, #100]	@ 0x64
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	011a      	lsls	r2, r3, #4
 8002564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002566:	4413      	add	r3, r2
 8002568:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800256c:	663b      	str	r3, [r7, #96]	@ 0x60
 800256e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002570:	2200      	movs	r2, #0
 8002572:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	677b      	str	r3, [r7, #116]	@ 0x74
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	785b      	ldrb	r3, [r3, #1]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d12b      	bne.n	80025da <HAL_PCD_EP_DB_Transmit+0x51e>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002596:	4413      	add	r3, r2
 8002598:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	011a      	lsls	r2, r3, #4
 80025a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025a2:	4413      	add	r3, r2
 80025a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025d6:	801a      	strh	r2, [r3, #0]
 80025d8:	e017      	b.n	800260a <HAL_PCD_EP_DB_Transmit+0x54e>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	785b      	ldrb	r3, [r3, #1]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d113      	bne.n	800260a <HAL_PCD_EP_DB_Transmit+0x54e>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f0:	4413      	add	r3, r2
 80025f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	011a      	lsls	r2, r3, #4
 80025fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025fc:	4413      	add	r3, r2
 80025fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002602:	673b      	str	r3, [r7, #112]	@ 0x70
 8002604:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002606:	2200      	movs	r2, #0
 8002608:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f006 f9b4 	bl	800897e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 811a 	bne.w	8002856 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800263c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8002652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800265a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800265e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002662:	b29b      	uxth	r3, r3
 8002664:	8013      	strh	r3, [r2, #0]
 8002666:	e0f6      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d121      	bne.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800268c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	441a      	add	r2, r3
 800269e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80026a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026bc:	2b01      	cmp	r3, #1
 80026be:	f040 80ca 	bne.w	8002856 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026ca:	441a      	add	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026d8:	441a      	add	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6a1a      	ldr	r2, [r3, #32]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d30b      	bcc.n	8002702 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	621a      	str	r2, [r3, #32]
 8002700:	e017      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d108      	bne.n	800271c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800270a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800270e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800271a:	e00a      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	657b      	str	r3, [r7, #84]	@ 0x54
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d165      	bne.n	800280c <HAL_PCD_EP_DB_Transmit+0x750>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800274e:	b29b      	uxth	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002754:	4413      	add	r3, r2
 8002756:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	011a      	lsls	r2, r3, #4
 800275e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002760:	4413      	add	r3, r2
 8002762:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002766:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002768:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002772:	b29a      	uxth	r2, r3
 8002774:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_PCD_EP_DB_Transmit+0x6da>
 8002780:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278e:	b29a      	uxth	r2, r3
 8002790:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002792:	801a      	strh	r2, [r3, #0]
 8002794:	e054      	b.n	8002840 <HAL_PCD_EP_DB_Transmit+0x784>
 8002796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800279a:	2b3e      	cmp	r3, #62	@ 0x3e
 800279c:	d818      	bhi.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x714>
 800279e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80027b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027b4:	3301      	adds	r3, #1
 80027b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	029b      	lsls	r3, r3, #10
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4313      	orrs	r3, r2
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027cc:	801a      	strh	r2, [r3, #0]
 80027ce:	e037      	b.n	8002840 <HAL_PCD_EP_DB_Transmit+0x784>
 80027d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <HAL_PCD_EP_DB_Transmit+0x72e>
 80027e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027e6:	3b01      	subs	r3, #1
 80027e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	029b      	lsls	r3, r3, #10
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4313      	orrs	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002804:	b29a      	uxth	r2, r3
 8002806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	e019      	b.n	8002840 <HAL_PCD_EP_DB_Transmit+0x784>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d115      	bne.n	8002840 <HAL_PCD_EP_DB_Transmit+0x784>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002822:	4413      	add	r3, r2
 8002824:	657b      	str	r3, [r7, #84]	@ 0x54
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	011a      	lsls	r2, r3, #4
 800282c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282e:	4413      	add	r3, r2
 8002830:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002834:	653b      	str	r3, [r7, #80]	@ 0x50
 8002836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800283a:	b29a      	uxth	r2, r3
 800283c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800283e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6959      	ldr	r1, [r3, #20]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	895a      	ldrh	r2, [r3, #10]
 800284c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002850:	b29b      	uxth	r3, r3
 8002852:	f004 fa1c 	bl	8006c8e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800286c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002870:	82bb      	strh	r3, [r7, #20]
 8002872:	8abb      	ldrh	r3, [r7, #20]
 8002874:	f083 0310 	eor.w	r3, r3, #16
 8002878:	82bb      	strh	r3, [r7, #20]
 800287a:	8abb      	ldrh	r3, [r7, #20]
 800287c:	f083 0320 	eor.w	r3, r3, #32
 8002880:	82bb      	strh	r3, [r7, #20]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	441a      	add	r2, r3
 8002890:	8abb      	ldrh	r3, [r7, #20]
 8002892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800289a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800289e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3790      	adds	r7, #144	@ 0x90
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	817b      	strh	r3, [r7, #10]
 80028be:	4613      	mov	r3, r2
 80028c0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ce:	897b      	ldrh	r3, [r7, #10]
 80028d0:	f003 0207 	and.w	r2, r3, #7
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	3310      	adds	r3, #16
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e009      	b.n	80028fa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028e6:	897a      	ldrh	r2, [r7, #10]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028fa:	893b      	ldrh	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d107      	bne.n	8002910 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	b29a      	uxth	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	80da      	strh	r2, [r3, #6]
 800290e:	e00b      	b.n	8002928 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2201      	movs	r2, #1
 8002914:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b29a      	uxth	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	b29a      	uxth	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800293e:	af00      	add	r7, sp, #0
 8002940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002944:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002948:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	f001 b823 	b.w	80039a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 817d 	beq.w	8002c6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002974:	4bbc      	ldr	r3, [pc, #752]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b04      	cmp	r3, #4
 800297e:	d00c      	beq.n	800299a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002980:	4bb9      	ldr	r3, [pc, #740]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b08      	cmp	r3, #8
 800298a:	d15c      	bne.n	8002a46 <HAL_RCC_OscConfig+0x10e>
 800298c:	4bb6      	ldr	r3, [pc, #728]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002998:	d155      	bne.n	8002a46 <HAL_RCC_OscConfig+0x10e>
 800299a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800299e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  return result;
 80029ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d102      	bne.n	80029cc <HAL_RCC_OscConfig+0x94>
 80029c6:	4ba8      	ldr	r3, [pc, #672]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	e015      	b.n	80029f8 <HAL_RCC_OscConfig+0xc0>
 80029cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029d0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80029e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80029e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80029f4:	4b9c      	ldr	r3, [pc, #624]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029fc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002a00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002a04:	fa92 f2a2 	rbit	r2, r2
 8002a08:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002a0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002a10:	fab2 f282 	clz	r2, r2
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f042 0220 	orr.w	r2, r2, #32
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f002 021f 	and.w	r2, r2, #31
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f202 	lsl.w	r2, r1, r2
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 811f 	beq.w	8002c6c <HAL_RCC_OscConfig+0x334>
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 8116 	bne.w	8002c6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f000 bfaf 	b.w	80039a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x12e>
 8002a58:	4b83      	ldr	r3, [pc, #524]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a82      	ldr	r2, [pc, #520]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e036      	b.n	8002ad4 <HAL_RCC_OscConfig+0x19c>
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x158>
 8002a76:	4b7c      	ldr	r3, [pc, #496]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7b      	ldr	r2, [pc, #492]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b79      	ldr	r3, [pc, #484]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a78      	ldr	r2, [pc, #480]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e021      	b.n	8002ad4 <HAL_RCC_OscConfig+0x19c>
 8002a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x184>
 8002aa2:	4b71      	ldr	r3, [pc, #452]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a70      	ldr	r2, [pc, #448]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b6e      	ldr	r3, [pc, #440]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6d      	ldr	r2, [pc, #436]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x19c>
 8002abc:	4b6a      	ldr	r3, [pc, #424]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a69      	ldr	r2, [pc, #420]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b67      	ldr	r3, [pc, #412]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a66      	ldr	r2, [pc, #408]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ad4:	4b64      	ldr	r3, [pc, #400]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	f023 020f 	bic.w	r2, r3, #15
 8002adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	495f      	ldr	r1, [pc, #380]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d059      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fd ff4d 	bl	800099c <HAL_GetTick>
 8002b02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b08:	f7fd ff48 	bl	800099c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b64      	cmp	r3, #100	@ 0x64
 8002b16:	d902      	bls.n	8002b1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	f000 bf43 	b.w	80039a4 <HAL_RCC_OscConfig+0x106c>
 8002b1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b22:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002b32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d102      	bne.n	8002b50 <HAL_RCC_OscConfig+0x218>
 8002b4a:	4b47      	ldr	r3, [pc, #284]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	e015      	b.n	8002b7c <HAL_RCC_OscConfig+0x244>
 8002b50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b54:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002b64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b68:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002b6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002b78:	4b3b      	ldr	r3, [pc, #236]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b80:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002b84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b88:	fa92 f2a2 	rbit	r2, r2
 8002b8c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002b90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f002 021f 	and.w	r2, r2, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ab      	beq.n	8002b08 <HAL_RCC_OscConfig+0x1d0>
 8002bb0:	e05d      	b.n	8002c6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fd fef3 	bl	800099c <HAL_GetTick>
 8002bb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7fd feee 	bl	800099c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b64      	cmp	r3, #100	@ 0x64
 8002bca:	d902      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	f000 bee9 	b.w	80039a4 <HAL_RCC_OscConfig+0x106c>
 8002bd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002be6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0x2cc>
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e015      	b.n	8002c30 <HAL_RCC_OscConfig+0x2f8>
 8002c04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c08:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002c18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c1c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002c20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <HAL_RCC_OscConfig+0x330>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c34:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002c38:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002c3c:	fa92 f2a2 	rbit	r2, r2
 8002c40:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002c44:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002c48:	fab2 f282 	clz	r2, r2
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f042 0220 	orr.w	r2, r2, #32
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	f002 021f 	and.w	r2, r2, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ab      	bne.n	8002bbc <HAL_RCC_OscConfig+0x284>
 8002c64:	e003      	b.n	8002c6e <HAL_RCC_OscConfig+0x336>
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 817d 	beq.w	8002f7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c84:	4ba6      	ldr	r3, [pc, #664]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c90:	4ba3      	ldr	r3, [pc, #652]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d172      	bne.n	8002d82 <HAL_RCC_OscConfig+0x44a>
 8002c9c:	4ba0      	ldr	r3, [pc, #640]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d16c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x44a>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002cba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x3a0>
 8002cd2:	4b93      	ldr	r3, [pc, #588]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	e013      	b.n	8002d00 <HAL_RCC_OscConfig+0x3c8>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002cea:	2302      	movs	r3, #2
 8002cec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002cf0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002cfc:	4b88      	ldr	r3, [pc, #544]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	2202      	movs	r2, #2
 8002d02:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002d06:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002d0a:	fa92 f2a2 	rbit	r2, r2
 8002d0e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002d12:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002d16:	fab2 f282 	clz	r2, r2
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	f042 0220 	orr.w	r2, r2, #32
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f002 021f 	and.w	r2, r2, #31
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCC_OscConfig+0x410>
 8002d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d002      	beq.n	8002d48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f000 be2e 	b.w	80039a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b75      	ldr	r3, [pc, #468]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	21f8      	movs	r1, #248	@ 0xf8
 8002d5e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002d66:	fa91 f1a1 	rbit	r1, r1
 8002d6a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002d6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002d72:	fab1 f181 	clz	r1, r1
 8002d76:	b2c9      	uxtb	r1, r1
 8002d78:	408b      	lsls	r3, r1
 8002d7a:	4969      	ldr	r1, [pc, #420]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d80:	e0fd      	b.n	8002f7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8088 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x56c>
 8002d94:	2301      	movs	r3, #1
 8002d96:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002da6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002db4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fd fdec 	bl	800099c <HAL_GetTick>
 8002dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dca:	f7fd fde7 	bl	800099c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d902      	bls.n	8002de0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	f000 bde2 	b.w	80039a4 <HAL_RCC_OscConfig+0x106c>
 8002de0:	2302      	movs	r3, #2
 8002de2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002df2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d102      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4d8>
 8002e0a:	4b45      	ldr	r3, [pc, #276]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	e013      	b.n	8002e38 <HAL_RCC_OscConfig+0x500>
 8002e10:	2302      	movs	r3, #2
 8002e12:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002e22:	2302      	movs	r3, #2
 8002e24:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002e28:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002e34:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002e3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002e42:	fa92 f2a2 	rbit	r2, r2
 8002e46:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002e4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002e4e:	fab2 f282 	clz	r2, r2
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f042 0220 	orr.w	r2, r2, #32
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	f002 021f 	and.w	r2, r2, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0af      	beq.n	8002dca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	21f8      	movs	r1, #248	@ 0xf8
 8002e80:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e88:	fa91 f1a1 	rbit	r1, r1
 8002e8c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002e90:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002e94:	fab1 f181 	clz	r1, r1
 8002e98:	b2c9      	uxtb	r1, r1
 8002e9a:	408b      	lsls	r3, r1
 8002e9c:	4920      	ldr	r1, [pc, #128]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
 8002ea2:	e06c      	b.n	8002f7e <HAL_RCC_OscConfig+0x646>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002eb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ec4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2300      	movs	r3, #0
 8002ece:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fd fd64 	bl	800099c <HAL_GetTick>
 8002ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fd fd5f 	bl	800099c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d902      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	f000 bd5a 	b.w	80039a4 <HAL_RCC_OscConfig+0x106c>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d104      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5ec>
 8002f1a:	4b01      	ldr	r3, [pc, #4]	@ (8002f20 <HAL_RCC_OscConfig+0x5e8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	e015      	b.n	8002f4c <HAL_RCC_OscConfig+0x614>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	2302      	movs	r3, #2
 8002f26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f36:	2302      	movs	r3, #2
 8002f38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002f48:	4bc8      	ldr	r3, [pc, #800]	@ (800326c <HAL_RCC_OscConfig+0x934>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002f52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002f56:	fa92 f2a2 	rbit	r2, r2
 8002f5a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002f5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002f62:	fab2 f282 	clz	r2, r2
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f042 0220 	orr.w	r2, r2, #32
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	f002 021f 	and.w	r2, r2, #31
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f202 	lsl.w	r2, r1, r2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ad      	bne.n	8002eda <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8110 	beq.w	80031b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d079      	beq.n	8003098 <HAL_RCC_OscConfig+0x760>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4bab      	ldr	r3, [pc, #684]	@ (8003270 <HAL_RCC_OscConfig+0x938>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2301      	movs	r3, #1
 8002fcc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7fd fce5 	bl	800099c <HAL_GetTick>
 8002fd2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fd fce0 	bl	800099c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d902      	bls.n	8002fee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	f000 bcdb 	b.w	80039a4 <HAL_RCC_OscConfig+0x106c>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003008:	2202      	movs	r2, #2
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003010:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	fa93 f2a3 	rbit	r2, r3
 800301a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800302c:	2202      	movs	r2, #2
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f2a3 	rbit	r2, r3
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003046:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003048:	4b88      	ldr	r3, [pc, #544]	@ (800326c <HAL_RCC_OscConfig+0x934>)
 800304a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800304c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003050:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003054:	2102      	movs	r1, #2
 8003056:	6019      	str	r1, [r3, #0]
 8003058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fa93 f1a3 	rbit	r1, r3
 8003066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800306e:	6019      	str	r1, [r3, #0]
  return result;
 8003070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003074:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0a0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x6a0>
 8003096:	e08d      	b.n	80031b4 <HAL_RCC_OscConfig+0x87c>
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	fa93 f2a3 	rbit	r2, r3
 80030b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80030ba:	601a      	str	r2, [r3, #0]
  return result;
 80030bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80030c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b68      	ldr	r3, [pc, #416]	@ (8003270 <HAL_RCC_OscConfig+0x938>)
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	461a      	mov	r2, r3
 80030d6:	2300      	movs	r3, #0
 80030d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fd fc5f 	bl	800099c <HAL_GetTick>
 80030de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fd fc5a 	bl	800099c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d902      	bls.n	80030fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	f000 bc55 	b.w	80039a4 <HAL_RCC_OscConfig+0x106c>
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003102:	2202      	movs	r2, #2
 8003104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	fa93 f2a3 	rbit	r2, r3
 8003114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003118:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003126:	2202      	movs	r2, #2
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	fa93 f2a3 	rbit	r2, r3
 8003138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800314a:	2202      	movs	r2, #2
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003164:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003166:	4b41      	ldr	r3, [pc, #260]	@ (800326c <HAL_RCC_OscConfig+0x934>)
 8003168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003172:	2102      	movs	r1, #2
 8003174:	6019      	str	r1, [r3, #0]
 8003176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fa93 f1a3 	rbit	r1, r3
 8003184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003188:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800318c:	6019      	str	r1, [r3, #0]
  return result;
 800318e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003192:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d197      	bne.n	80030e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 81a1 	beq.w	800350c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d0:	4b26      	ldr	r3, [pc, #152]	@ (800326c <HAL_RCC_OscConfig+0x934>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d116      	bne.n	800320a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031dc:	4b23      	ldr	r3, [pc, #140]	@ (800326c <HAL_RCC_OscConfig+0x934>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4a22      	ldr	r2, [pc, #136]	@ (800326c <HAL_RCC_OscConfig+0x934>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	61d3      	str	r3, [r2, #28]
 80031e8:	4b20      	ldr	r3, [pc, #128]	@ (800326c <HAL_RCC_OscConfig+0x934>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80031f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003202:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	4b1a      	ldr	r3, [pc, #104]	@ (8003274 <HAL_RCC_OscConfig+0x93c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11a      	bne.n	800324c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003216:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <HAL_RCC_OscConfig+0x93c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a16      	ldr	r2, [pc, #88]	@ (8003274 <HAL_RCC_OscConfig+0x93c>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003220:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fd fbbb 	bl	800099c <HAL_GetTick>
 8003226:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	e009      	b.n	8003240 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fd fbb6 	bl	800099c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b64      	cmp	r3, #100	@ 0x64
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e3b1      	b.n	80039a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <HAL_RCC_OscConfig+0x93c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ef      	beq.n	800322c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d10d      	bne.n	8003278 <HAL_RCC_OscConfig+0x940>
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <HAL_RCC_OscConfig+0x934>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a02      	ldr	r2, [pc, #8]	@ (800326c <HAL_RCC_OscConfig+0x934>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6213      	str	r3, [r2, #32]
 8003268:	e03c      	b.n	80032e4 <HAL_RCC_OscConfig+0x9ac>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	10908120 	.word	0x10908120
 8003274:	40007000 	.word	0x40007000
 8003278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10c      	bne.n	80032a2 <HAL_RCC_OscConfig+0x96a>
 8003288:	4bc1      	ldr	r3, [pc, #772]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4ac0      	ldr	r2, [pc, #768]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	6213      	str	r3, [r2, #32]
 8003294:	4bbe      	ldr	r3, [pc, #760]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4abd      	ldr	r2, [pc, #756]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 800329a:	f023 0304 	bic.w	r3, r3, #4
 800329e:	6213      	str	r3, [r2, #32]
 80032a0:	e020      	b.n	80032e4 <HAL_RCC_OscConfig+0x9ac>
 80032a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x994>
 80032b2:	4bb7      	ldr	r3, [pc, #732]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4ab6      	ldr	r2, [pc, #728]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	6213      	str	r3, [r2, #32]
 80032be:	4bb4      	ldr	r3, [pc, #720]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4ab3      	ldr	r2, [pc, #716]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6213      	str	r3, [r2, #32]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0x9ac>
 80032cc:	4bb0      	ldr	r3, [pc, #704]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4aaf      	ldr	r2, [pc, #700]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	6213      	str	r3, [r2, #32]
 80032d8:	4bad      	ldr	r3, [pc, #692]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	4aac      	ldr	r2, [pc, #688]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80032de:	f023 0304 	bic.w	r3, r3, #4
 80032e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8081 	beq.w	80033f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fd fb51 	bl	800099c <HAL_GetTick>
 80032fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fd fb4c 	bl	800099c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e345      	b.n	80039a4 <HAL_RCC_OscConfig+0x106c>
 8003318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003320:	2202      	movs	r2, #2
 8003322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003340:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003344:	2202      	movs	r2, #2
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	fa93 f2a3 	rbit	r2, r3
 8003356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800335e:	601a      	str	r2, [r3, #0]
  return result;
 8003360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003364:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003368:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d102      	bne.n	8003384 <HAL_RCC_OscConfig+0xa4c>
 800337e:	4b84      	ldr	r3, [pc, #528]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	e013      	b.n	80033ac <HAL_RCC_OscConfig+0xa74>
 8003384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003388:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800338c:	2202      	movs	r2, #2
 800338e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003394:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	fa93 f2a3 	rbit	r2, r3
 800339e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	4b79      	ldr	r3, [pc, #484]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80033b4:	2102      	movs	r1, #2
 80033b6:	6011      	str	r1, [r2, #0]
 80033b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	fa92 f1a2 	rbit	r1, r2
 80033c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033ce:	6011      	str	r1, [r2, #0]
  return result;
 80033d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	fab2 f282 	clz	r2, r2
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	f002 021f 	and.w	r2, r2, #31
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d084      	beq.n	8003300 <HAL_RCC_OscConfig+0x9c8>
 80033f6:	e07f      	b.n	80034f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f8:	f7fd fad0 	bl	800099c <HAL_GetTick>
 80033fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	e00b      	b.n	800341a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fd facb 	bl	800099c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e2c4      	b.n	80039a4 <HAL_RCC_OscConfig+0x106c>
 800341a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003422:	2202      	movs	r2, #2
 8003424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	fa93 f2a3 	rbit	r2, r3
 8003434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003438:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003442:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003446:	2202      	movs	r2, #2
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	fa93 f2a3 	rbit	r2, r3
 8003458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003460:	601a      	str	r2, [r3, #0]
  return result;
 8003462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003466:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800346a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f043 0302 	orr.w	r3, r3, #2
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d102      	bne.n	8003486 <HAL_RCC_OscConfig+0xb4e>
 8003480:	4b43      	ldr	r3, [pc, #268]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	e013      	b.n	80034ae <HAL_RCC_OscConfig+0xb76>
 8003486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800348e:	2202      	movs	r2, #2
 8003490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003496:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fa93 f2a3 	rbit	r2, r3
 80034a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	4b39      	ldr	r3, [pc, #228]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80034b6:	2102      	movs	r1, #2
 80034b8:	6011      	str	r1, [r2, #0]
 80034ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	fa92 f1a2 	rbit	r1, r2
 80034c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034cc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034d0:	6011      	str	r1, [r2, #0]
  return result;
 80034d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034d6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	fab2 f282 	clz	r2, r2
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	f002 021f 	and.w	r2, r2, #31
 80034ec:	2101      	movs	r1, #1
 80034ee:	fa01 f202 	lsl.w	r2, r1, r2
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d184      	bne.n	8003402 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4b23      	ldr	r3, [pc, #140]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	4a22      	ldr	r2, [pc, #136]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800350a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8242 	beq.w	80039a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351e:	4b1c      	ldr	r3, [pc, #112]	@ (8003590 <HAL_RCC_OscConfig+0xc58>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b08      	cmp	r3, #8
 8003528:	f000 8213 	beq.w	8003952 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800352c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003530:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2b02      	cmp	r3, #2
 800353a:	f040 8162 	bne.w	8003802 <HAL_RCC_OscConfig+0xeca>
 800353e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003542:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003546:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800354a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003550:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	fa93 f2a3 	rbit	r2, r3
 800355a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003562:	601a      	str	r2, [r3, #0]
  return result;
 8003564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003568:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800356c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003578:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	461a      	mov	r2, r3
 8003580:	2300      	movs	r3, #0
 8003582:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fd fa0a 	bl	800099c <HAL_GetTick>
 8003588:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358c:	e00c      	b.n	80035a8 <HAL_RCC_OscConfig+0xc70>
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd fa02 	bl	800099c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e1fd      	b.n	80039a4 <HAL_RCC_OscConfig+0x106c>
 80035a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80035b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	fa93 f2a3 	rbit	r2, r3
 80035c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80035cc:	601a      	str	r2, [r3, #0]
  return result;
 80035ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80035d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d102      	bne.n	80035f2 <HAL_RCC_OscConfig+0xcba>
 80035ec:	4bb0      	ldr	r3, [pc, #704]	@ (80038b0 <HAL_RCC_OscConfig+0xf78>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	e027      	b.n	8003642 <HAL_RCC_OscConfig+0xd0a>
 80035f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003604:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fa93 f2a3 	rbit	r2, r3
 800360e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003612:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003620:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	fa93 f2a3 	rbit	r2, r3
 8003634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003638:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	4b9c      	ldr	r3, [pc, #624]	@ (80038b0 <HAL_RCC_OscConfig+0xf78>)
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003646:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800364a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800364e:	6011      	str	r1, [r2, #0]
 8003650:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003654:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	fa92 f1a2 	rbit	r1, r2
 800365e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003662:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003666:	6011      	str	r1, [r2, #0]
  return result;
 8003668:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800366c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	fab2 f282 	clz	r2, r2
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	f042 0220 	orr.w	r2, r2, #32
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	f002 021f 	and.w	r2, r2, #31
 8003682:	2101      	movs	r1, #1
 8003684:	fa01 f202 	lsl.w	r2, r1, r2
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d182      	bne.n	8003594 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800368e:	4b88      	ldr	r3, [pc, #544]	@ (80038b0 <HAL_RCC_OscConfig+0xf78>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80036a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	430b      	orrs	r3, r1
 80036b0:	497f      	ldr	r1, [pc, #508]	@ (80038b0 <HAL_RCC_OscConfig+0xf78>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
 80036b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80036be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	fa93 f2a3 	rbit	r2, r3
 80036d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036da:	601a      	str	r2, [r3, #0]
  return result;
 80036dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	461a      	mov	r2, r3
 80036f8:	2301      	movs	r3, #1
 80036fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fd f94e 	bl	800099c <HAL_GetTick>
 8003700:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003704:	e009      	b.n	800371a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003706:	f7fd f949 	bl	800099c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e144      	b.n	80039a4 <HAL_RCC_OscConfig+0x106c>
 800371a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003722:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	fa93 f2a3 	rbit	r2, r3
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800373e:	601a      	str	r2, [r3, #0]
  return result;
 8003740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003744:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003748:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	d102      	bne.n	8003764 <HAL_RCC_OscConfig+0xe2c>
 800375e:	4b54      	ldr	r3, [pc, #336]	@ (80038b0 <HAL_RCC_OscConfig+0xf78>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	e027      	b.n	80037b4 <HAL_RCC_OscConfig+0xe7c>
 8003764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003768:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800376c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	fa93 f2a3 	rbit	r2, r3
 8003780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003784:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003792:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	fa93 f2a3 	rbit	r2, r3
 80037a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	4b3f      	ldr	r3, [pc, #252]	@ (80038b0 <HAL_RCC_OscConfig+0xf78>)
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037b8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80037bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037c0:	6011      	str	r1, [r2, #0]
 80037c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037c6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	fa92 f1a2 	rbit	r1, r2
 80037d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037d8:	6011      	str	r1, [r2, #0]
  return result;
 80037da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037de:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	fab2 f282 	clz	r2, r2
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	f042 0220 	orr.w	r2, r2, #32
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	f002 021f 	and.w	r2, r2, #31
 80037f4:	2101      	movs	r1, #1
 80037f6:	fa01 f202 	lsl.w	r2, r1, r2
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d082      	beq.n	8003706 <HAL_RCC_OscConfig+0xdce>
 8003800:	e0cf      	b.n	80039a2 <HAL_RCC_OscConfig+0x106a>
 8003802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003806:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800380a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800380e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003814:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003822:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003826:	601a      	str	r2, [r3, #0]
  return result;
 8003828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003830:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800383c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	461a      	mov	r2, r3
 8003844:	2300      	movs	r3, #0
 8003846:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd f8a8 	bl	800099c <HAL_GetTick>
 800384c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003850:	e009      	b.n	8003866 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003852:	f7fd f8a3 	bl	800099c <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e09e      	b.n	80039a4 <HAL_RCC_OscConfig+0x106c>
 8003866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800386e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003878:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	fa93 f2a3 	rbit	r2, r3
 8003882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003886:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800388a:	601a      	str	r2, [r3, #0]
  return result;
 800388c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003890:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003894:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d104      	bne.n	80038b4 <HAL_RCC_OscConfig+0xf7c>
 80038aa:	4b01      	ldr	r3, [pc, #4]	@ (80038b0 <HAL_RCC_OscConfig+0xf78>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	e029      	b.n	8003904 <HAL_RCC_OscConfig+0xfcc>
 80038b0:	40021000 	.word	0x40021000
 80038b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80038bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	fa93 f2a3 	rbit	r2, r3
 80038d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038de:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	fa93 f2a3 	rbit	r2, r3
 80038f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	4b2b      	ldr	r3, [pc, #172]	@ (80039b0 <HAL_RCC_OscConfig+0x1078>)
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003908:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800390c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003910:	6011      	str	r1, [r2, #0]
 8003912:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003916:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	fa92 f1a2 	rbit	r1, r2
 8003920:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003924:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003928:	6011      	str	r1, [r2, #0]
  return result;
 800392a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800392e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	fab2 f282 	clz	r2, r2
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	f042 0220 	orr.w	r2, r2, #32
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	f002 021f 	and.w	r2, r2, #31
 8003944:	2101      	movs	r1, #1
 8003946:	fa01 f202 	lsl.w	r2, r1, r2
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d180      	bne.n	8003852 <HAL_RCC_OscConfig+0xf1a>
 8003950:	e027      	b.n	80039a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003956:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e01e      	b.n	80039a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003966:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <HAL_RCC_OscConfig+0x1078>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800396e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003972:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	429a      	cmp	r2, r3
 8003984:	d10b      	bne.n	800399e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003986:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800398a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800398e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003992:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b09e      	sub	sp, #120	@ 0x78
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e162      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b90      	ldr	r3, [pc, #576]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b8d      	ldr	r3, [pc, #564]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	498b      	ldr	r1, [pc, #556]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b89      	ldr	r3, [pc, #548]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e14a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b82      	ldr	r3, [pc, #520]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	497f      	ldr	r1, [pc, #508]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80dc 	beq.w	8003be0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d13c      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xf6>
 8003a30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xa6>
 8003a54:	4b6f      	ldr	r3, [pc, #444]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	e00f      	b.n	8003a7a <HAL_RCC_ClockConfig+0xc6>
 8003a5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a76:	4b67      	ldr	r3, [pc, #412]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a82:	fa92 f2a2 	rbit	r2, r2
 8003a86:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003a88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a8a:	fab2 f282 	clz	r2, r2
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	f042 0220 	orr.w	r2, r2, #32
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	f002 021f 	and.w	r2, r2, #31
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d17b      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0f3      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d13c      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x178>
 8003ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_RCC_ClockConfig+0x128>
 8003ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	e00f      	b.n	8003afc <HAL_RCC_ClockConfig+0x148>
 8003adc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af8:	4b46      	ldr	r3, [pc, #280]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b00:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003b02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b04:	fa92 f2a2 	rbit	r2, r2
 8003b08:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003b0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b0c:	fab2 f282 	clz	r2, r2
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f042 0220 	orr.w	r2, r2, #32
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f002 021f 	and.w	r2, r2, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d13a      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b2      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
 8003b4e:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	e00d      	b.n	8003b70 <HAL_RCC_ClockConfig+0x1bc>
 8003b54:	2302      	movs	r3, #2
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b60:	2302      	movs	r3, #2
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	2202      	movs	r2, #2
 8003b72:	61ba      	str	r2, [r7, #24]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	fa92 f2a2 	rbit	r2, r2
 8003b7a:	617a      	str	r2, [r7, #20]
  return result;
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	fab2 f282 	clz	r2, r2
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	f042 0220 	orr.w	r2, r2, #32
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f002 021f 	and.w	r2, r2, #31
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f202 	lsl.w	r2, r1, r2
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e079      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	491a      	ldr	r1, [pc, #104]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fc fef4 	bl	800099c <HAL_GetTick>
 8003bb4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fc fef0 	bl	800099c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e061      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d214      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0207 	bic.w	r2, r3, #7
 8003bf6:	4906      	ldr	r1, [pc, #24]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b04      	ldr	r3, [pc, #16]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e040      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	491a      	ldr	r1, [pc, #104]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c42:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4912      	ldr	r1, [pc, #72]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c56:	f000 f829 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c64:	22f0      	movs	r2, #240	@ 0xf0
 8003c66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	fa92 f2a2 	rbit	r2, r2
 8003c6e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	fab2 f282 	clz	r2, r2
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	40d3      	lsrs	r3, r2
 8003c7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ca0 <HAL_RCC_ClockConfig+0x2ec>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c82:	4a08      	ldr	r2, [pc, #32]	@ (8003ca4 <HAL_RCC_ClockConfig+0x2f0>)
 8003c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c86:	4b08      	ldr	r3, [pc, #32]	@ (8003ca8 <HAL_RCC_ClockConfig+0x2f4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc fe42 	bl	8000914 <HAL_InitTick>
  
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3778      	adds	r7, #120	@ 0x78
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	0800989c 	.word	0x0800989c
 8003ca4:	20000000 	.word	0x20000000
 8003ca8:	20000004 	.word	0x20000004

08003cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x30>
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8003cda:	e026      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cdc:	4b19      	ldr	r3, [pc, #100]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cde:	613b      	str	r3, [r7, #16]
      break;
 8003ce0:	e026      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	4a17      	ldr	r2, [pc, #92]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cec:	5cd3      	ldrb	r3, [r2, r3]
 8003cee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	4a14      	ldr	r2, [pc, #80]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d08:	4a0e      	ldr	r2, [pc, #56]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e004      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	613b      	str	r3, [r7, #16]
      break;
 8003d28:	e002      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d2c:	613b      	str	r3, [r7, #16]
      break;
 8003d2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d30:	693b      	ldr	r3, [r7, #16]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000
 8003d44:	007a1200 	.word	0x007a1200
 8003d48:	080098ac 	.word	0x080098ac
 8003d4c:	080098bc 	.word	0x080098bc
 8003d50:	003d0900 	.word	0x003d0900

08003d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b092      	sub	sp, #72	@ 0x48
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80d4 	beq.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d78:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10e      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d84:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	61d3      	str	r3, [r2, #28]
 8003d90:	4b48      	ldr	r3, [pc, #288]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	4b45      	ldr	r3, [pc, #276]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d118      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dae:	4b42      	ldr	r3, [pc, #264]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a41      	ldr	r2, [pc, #260]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dba:	f7fc fdef 	bl	800099c <HAL_GetTick>
 8003dbe:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc2:	f7fc fdeb 	bl	800099c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	@ 0x64
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e169      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	4b38      	ldr	r3, [pc, #224]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de0:	4b34      	ldr	r3, [pc, #208]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8084 	beq.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d07c      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e00:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b26      	ldr	r3, [pc, #152]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3e:	fab3 f383 	clz	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	4b1d      	ldr	r3, [pc, #116]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2300      	movs	r3, #0
 8003e50:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e52:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e56:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d04b      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fc fd9b 	bl	800099c <HAL_GetTick>
 8003e66:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fc fd97 	bl	800099c <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e113      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003e80:	2302      	movs	r3, #2
 8003e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	61fb      	str	r3, [r7, #28]
  return result;
 8003e98:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d108      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003eae:	4b01      	ldr	r3, [pc, #4]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	e00d      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	10908100 	.word	0x10908100
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	fa93 f3a3 	rbit	r3, r3
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	4b78      	ldr	r3, [pc, #480]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	613a      	str	r2, [r7, #16]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	fa92 f2a2 	rbit	r2, r2
 8003eda:	60fa      	str	r2, [r7, #12]
  return result;
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	fab2 f282 	clz	r2, r2
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	f002 021f 	and.w	r2, r2, #31
 8003eee:	2101      	movs	r1, #1
 8003ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0b7      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003efa:	4b6d      	ldr	r3, [pc, #436]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	496a      	ldr	r1, [pc, #424]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f14:	4b66      	ldr	r3, [pc, #408]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	4a65      	ldr	r2, [pc, #404]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2c:	4b60      	ldr	r3, [pc, #384]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	f023 0203 	bic.w	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	495d      	ldr	r1, [pc, #372]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f4a:	4b59      	ldr	r3, [pc, #356]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4956      	ldr	r1, [pc, #344]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f68:	4b51      	ldr	r3, [pc, #324]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	494e      	ldr	r1, [pc, #312]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f86:	4b4a      	ldr	r3, [pc, #296]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	f023 0210 	bic.w	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4947      	ldr	r1, [pc, #284]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003fa4:	4b42      	ldr	r3, [pc, #264]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb0:	493f      	ldr	r1, [pc, #252]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	f023 0220 	bic.w	r2, r3, #32
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	4938      	ldr	r1, [pc, #224]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fe0:	4b33      	ldr	r3, [pc, #204]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	4930      	ldr	r1, [pc, #192]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	4929      	ldr	r1, [pc, #164]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800401c:	4b24      	ldr	r3, [pc, #144]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	4921      	ldr	r1, [pc, #132]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800403a:	4b1d      	ldr	r3, [pc, #116]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	491a      	ldr	r1, [pc, #104]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	4912      	ldr	r1, [pc, #72]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004076:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	490b      	ldr	r1, [pc, #44]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a0:	4903      	ldr	r1, [pc, #12]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3748      	adds	r7, #72	@ 0x48
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000

080040b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e073      	b.n	80041b2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	7f5b      	ldrb	r3, [r3, #29]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc fb2c 	bl	8000738 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d055      	beq.n	80041a0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	22ca      	movs	r2, #202	@ 0xca
 80040fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2253      	movs	r2, #83	@ 0x53
 8004102:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fa49 	bl	800459c <RTC_EnterInitMode>
 800410a:	4603      	mov	r3, r0
 800410c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d12c      	bne.n	800416e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004126:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6899      	ldr	r1, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68d2      	ldr	r2, [r2, #12]
 800414e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6919      	ldr	r1, [r3, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	041a      	lsls	r2, r3, #16
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fa50 	bl	800460a <RTC_ExitInitMode>
 800416a:	4603      	mov	r3, r0
 800416c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d110      	bne.n	8004196 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	22ff      	movs	r2, #255	@ 0xff
 800419c:	625a      	str	r2, [r3, #36]	@ 0x24
 800419e:	e001      	b.n	80041a4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041ba:	b590      	push	{r4, r7, lr}
 80041bc:	b087      	sub	sp, #28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	7f1b      	ldrb	r3, [r3, #28]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_RTC_SetTime+0x1c>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e087      	b.n	80042e6 <HAL_RTC_SetTime+0x12c>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2202      	movs	r2, #2
 80041e0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d126      	bne.n	8004236 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fa27 	bl	8004654 <RTC_ByteToBcd2>
 8004206:	4603      	mov	r3, r0
 8004208:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fa20 	bl	8004654 <RTC_ByteToBcd2>
 8004214:	4603      	mov	r3, r0
 8004216:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004218:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	789b      	ldrb	r3, [r3, #2]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fa18 	bl	8004654 <RTC_ByteToBcd2>
 8004224:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004226:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	78db      	ldrb	r3, [r3, #3]
 800422e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	e018      	b.n	8004268 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004256:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800425c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	78db      	ldrb	r3, [r3, #3]
 8004262:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	22ca      	movs	r2, #202	@ 0xca
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2253      	movs	r2, #83	@ 0x53
 8004276:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f98f 	bl	800459c <RTC_EnterInitMode>
 800427e:	4603      	mov	r3, r0
 8004280:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d120      	bne.n	80042ca <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004292:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004296:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6899      	ldr	r1, [r3, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f9a2 	bl	800460a <RTC_ExitInitMode>
 80042c6:	4603      	mov	r3, r0
 80042c8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	22ff      	movs	r2, #255	@ 0xff
 80042dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]

  return status;
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd90      	pop	{r4, r7, pc}

080042ee <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004320:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004324:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004330:	b2da      	uxtb	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004340:	b2da      	uxtb	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	0d9b      	lsrs	r3, r3, #22
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d11a      	bne.n	80043a0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f98e 	bl	8004690 <RTC_Bcd2ToByte>
 8004374:	4603      	mov	r3, r0
 8004376:	461a      	mov	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 f985 	bl	8004690 <RTC_Bcd2ToByte>
 8004386:	4603      	mov	r3, r0
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	789b      	ldrb	r3, [r3, #2]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f97c 	bl	8004690 <RTC_Bcd2ToByte>
 8004398:	4603      	mov	r3, r0
 800439a:	461a      	mov	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043aa:	b590      	push	{r4, r7, lr}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	7f1b      	ldrb	r3, [r3, #28]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_RTC_SetDate+0x1c>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e071      	b.n	80044aa <HAL_RTC_SetDate+0x100>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2202      	movs	r2, #2
 80043d0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10e      	bne.n	80043f6 <HAL_RTC_SetDate+0x4c>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	785b      	ldrb	r3, [r3, #1]
 80043e8:	f023 0310 	bic.w	r3, r3, #16
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	330a      	adds	r3, #10
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11c      	bne.n	8004436 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	78db      	ldrb	r3, [r3, #3]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 f927 	bl	8004654 <RTC_ByteToBcd2>
 8004406:	4603      	mov	r3, r0
 8004408:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f920 	bl	8004654 <RTC_ByteToBcd2>
 8004414:	4603      	mov	r3, r0
 8004416:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004418:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	789b      	ldrb	r3, [r3, #2]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f918 	bl	8004654 <RTC_ByteToBcd2>
 8004424:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004426:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e00e      	b.n	8004454 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	78db      	ldrb	r3, [r3, #3]
 800443a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004442:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004448:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	22ca      	movs	r2, #202	@ 0xca
 800445a:	625a      	str	r2, [r3, #36]	@ 0x24
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2253      	movs	r2, #83	@ 0x53
 8004462:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f899 	bl	800459c <RTC_EnterInitMode>
 800446a:	4603      	mov	r3, r0
 800446c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800446e:	7cfb      	ldrb	r3, [r7, #19]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10c      	bne.n	800448e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800447e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004482:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f8c0 	bl	800460a <RTC_ExitInitMode>
 800448a:	4603      	mov	r3, r0
 800448c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	22ff      	movs	r2, #255	@ 0xff
 80044a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]

  return status;
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}

080044b2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80044d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	0b5b      	lsrs	r3, r3, #13
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11a      	bne.n	8004546 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	78db      	ldrb	r3, [r3, #3]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 f8bb 	bl	8004690 <RTC_Bcd2ToByte>
 800451a:	4603      	mov	r3, r0
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f8b2 	bl	8004690 <RTC_Bcd2ToByte>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	789b      	ldrb	r3, [r3, #2]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f8a9 	bl	8004690 <RTC_Bcd2ToByte>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0d      	ldr	r2, [pc, #52]	@ (8004598 <HAL_RTC_WaitForSynchro+0x48>)
 8004562:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004564:	f7fc fa1a 	bl	800099c <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800456a:	e009      	b.n	8004580 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800456c:	f7fc fa16 	bl	800099c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800457a:	d901      	bls.n	8004580 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e007      	b.n	8004590 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ee      	beq.n	800456c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	0001ff5f 	.word	0x0001ff5f

0800459c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d122      	bne.n	8004600 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045ca:	f7fc f9e7 	bl	800099c <HAL_GetTick>
 80045ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045d0:	e00c      	b.n	80045ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045d2:	f7fc f9e3 	bl	800099c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045e0:	d904      	bls.n	80045ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <RTC_EnterInitMode+0x64>
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d1e8      	bne.n	80045d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004624:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff8b 	bl	8004550 <HAL_RTC_WaitForSynchro>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2204      	movs	r2, #4
 8004644:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004662:	e005      	b.n	8004670 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3301      	adds	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	3b0a      	subs	r3, #10
 800466e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	2b09      	cmp	r3, #9
 8004674:	d8f6      	bhi.n	8004664 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	b2da      	uxtb	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	4313      	orrs	r3, r2
 8004682:	b2db      	uxtb	r3, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4413      	add	r3, r2
 80046be:	b2db      	uxtb	r3, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046dc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80046e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004702:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004706:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	b29b      	uxth	r3, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	b29b      	uxth	r3, r3
 8004718:	4013      	ands	r3, r2
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	1d3b      	adds	r3, r7, #4
 800473a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800476c:	b480      	push	{r7}
 800476e:	b09d      	sub	sp, #116	@ 0x74
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800478e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004792:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	78db      	ldrb	r3, [r3, #3]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d81f      	bhi.n	80047de <USB_ActivateEndpoint+0x72>
 800479e:	a201      	add	r2, pc, #4	@ (adr r2, 80047a4 <USB_ActivateEndpoint+0x38>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047e7 	.word	0x080047e7
 80047b0:	080047c3 	.word	0x080047c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80047c0:	e012      	b.n	80047e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80047c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80047ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80047ce:	e00b      	b.n	80047e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80047dc:	e004      	b.n	80047e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80047e4:	e000      	b.n	80047e8 <USB_ActivateEndpoint+0x7c>
      break;
 80047e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004806:	b29b      	uxth	r3, r3
 8004808:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	b21b      	sxth	r3, r3
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	b21a      	sxth	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b21b      	sxth	r3, r3
 800482a:	4313      	orrs	r3, r2
 800482c:	b21b      	sxth	r3, r3
 800482e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800484c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004850:	b29b      	uxth	r3, r3
 8004852:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	7b1b      	ldrb	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 8178 	bne.w	8004b4e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8084 	beq.w	8004970 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004872:	b29b      	uxth	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4413      	add	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	011a      	lsls	r2, r3, #4
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	88db      	ldrh	r3, [r3, #6]
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	b29b      	uxth	r3, r3
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	827b      	strh	r3, [r7, #18]
 80048aa:	8a7b      	ldrh	r3, [r7, #18]
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01b      	beq.n	80048ec <USB_ActivateEndpoint+0x180>
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ca:	823b      	strh	r3, [r7, #16]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	8a3b      	ldrh	r3, [r7, #16]
 80048d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	78db      	ldrb	r3, [r3, #3]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d020      	beq.n	8004936 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800490a:	81bb      	strh	r3, [r7, #12]
 800490c:	89bb      	ldrh	r3, [r7, #12]
 800490e:	f083 0320 	eor.w	r3, r3, #32
 8004912:	81bb      	strh	r3, [r7, #12]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	89bb      	ldrh	r3, [r7, #12]
 8004920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800492c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004930:	b29b      	uxth	r3, r3
 8004932:	8013      	strh	r3, [r2, #0]
 8004934:	e2d5      	b.n	8004ee2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800494c:	81fb      	strh	r3, [r7, #14]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800495e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800496a:	b29b      	uxth	r3, r3
 800496c:	8013      	strh	r3, [r2, #0]
 800496e:	e2b8      	b.n	8004ee2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800497a:	b29b      	uxth	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004980:	4413      	add	r3, r2
 8004982:	633b      	str	r3, [r7, #48]	@ 0x30
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011a      	lsls	r2, r3, #4
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	4413      	add	r3, r2
 800498e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	88db      	ldrh	r3, [r3, #6]
 8004998:	085b      	lsrs	r3, r3, #1
 800499a:	b29b      	uxth	r3, r3
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b4:	4413      	add	r3, r2
 80049b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	011a      	lsls	r2, r3, #4
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	4413      	add	r3, r2
 80049c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	801a      	strh	r2, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <USB_ActivateEndpoint+0x28a>
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	e039      	b.n	8004a6a <USB_ActivateEndpoint+0x2fe>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80049fc:	d818      	bhi.n	8004a30 <USB_ActivateEndpoint+0x2c4>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <USB_ActivateEndpoint+0x2ac>
 8004a12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a14:	3301      	adds	r3, #1
 8004a16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	029b      	lsls	r3, r3, #10
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	4313      	orrs	r3, r2
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	e01c      	b.n	8004a6a <USB_ActivateEndpoint+0x2fe>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <USB_ActivateEndpoint+0x2de>
 8004a44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a46:	3b01      	subs	r3, #1
 8004a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	029b      	lsls	r3, r3, #10
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01b      	beq.n	8004aba <USB_ActivateEndpoint+0x34e>
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a98:	843b      	strh	r3, [r7, #32]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	8c3b      	ldrh	r3, [r7, #32]
 8004aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d124      	bne.n	8004b0c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad8:	83bb      	strh	r3, [r7, #28]
 8004ada:	8bbb      	ldrh	r3, [r7, #28]
 8004adc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004ae0:	83bb      	strh	r3, [r7, #28]
 8004ae2:	8bbb      	ldrh	r3, [r7, #28]
 8004ae4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ae8:	83bb      	strh	r3, [r7, #28]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	441a      	add	r2, r3
 8004af4:	8bbb      	ldrh	r3, [r7, #28]
 8004af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8013      	strh	r3, [r2, #0]
 8004b0a:	e1ea      	b.n	8004ee2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b22:	83fb      	strh	r3, [r7, #30]
 8004b24:	8bfb      	ldrh	r3, [r7, #30]
 8004b26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b2a:	83fb      	strh	r3, [r7, #30]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	8bfb      	ldrh	r3, [r7, #30]
 8004b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]
 8004b4c:	e1c9      	b.n	8004ee2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	78db      	ldrb	r3, [r3, #3]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d11e      	bne.n	8004b94 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
 8004b92:	e01d      	b.n	8004bd0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004baa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004be0:	4413      	add	r3, r2
 8004be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	011a      	lsls	r2, r3, #4
 8004bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	891b      	ldrh	r3, [r3, #8]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c02:	801a      	strh	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c14:	4413      	add	r3, r2
 8004c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	011a      	lsls	r2, r3, #4
 8004c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	895b      	ldrh	r3, [r3, #10]
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f040 8093 	bne.w	8004d68 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004c52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01b      	beq.n	8004c96 <USB_ActivateEndpoint+0x52a>
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c74:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	441a      	add	r2, r3
 8004c80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004ca4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01b      	beq.n	8004ce6 <USB_ActivateEndpoint+0x57a>
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cde:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfc:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cfe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004d00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d04:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004d06:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004d08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d0c:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	441a      	add	r2, r3
 8004d18:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	441a      	add	r2, r3
 8004d50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	8013      	strh	r3, [r2, #0]
 8004d66:	e0bc      	b.n	8004ee2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01d      	beq.n	8004dc0 <USB_ActivateEndpoint+0x654>
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004dd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01d      	beq.n	8004e18 <USB_ActivateEndpoint+0x6ac>
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	441a      	add	r2, r3
 8004e00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	78db      	ldrb	r3, [r3, #3]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d024      	beq.n	8004e6a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e36:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004e3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e3e:	f083 0320 	eor.w	r3, r3, #32
 8004e42:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	8013      	strh	r3, [r2, #0]
 8004e68:	e01d      	b.n	8004ea6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e80:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ee2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3774      	adds	r7, #116	@ 0x74
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop

08004ef4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b08d      	sub	sp, #52	@ 0x34
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	7b1b      	ldrb	r3, [r3, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 808e 	bne.w	8005024 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d044      	beq.n	8004f9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	81bb      	strh	r3, [r7, #12]
 8004f1e:	89bb      	ldrh	r3, [r7, #12]
 8004f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01b      	beq.n	8004f60 <USB_DeactivateEndpoint+0x6c>
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3e:	817b      	strh	r3, [r7, #10]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	441a      	add	r2, r3
 8004f4a:	897b      	ldrh	r3, [r7, #10]
 8004f4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f76:	813b      	strh	r3, [r7, #8]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	893b      	ldrh	r3, [r7, #8]
 8004f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	8013      	strh	r3, [r2, #0]
 8004f98:	e192      	b.n	80052c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	827b      	strh	r3, [r7, #18]
 8004fa8:	8a7b      	ldrh	r3, [r7, #18]
 8004faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01b      	beq.n	8004fea <USB_DeactivateEndpoint+0xf6>
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc8:	823b      	strh	r3, [r7, #16]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	8a3b      	ldrh	r3, [r7, #16]
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005000:	81fb      	strh	r3, [r7, #14]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	441a      	add	r2, r3
 800500c:	89fb      	ldrh	r3, [r7, #14]
 800500e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800501a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501e:	b29b      	uxth	r3, r3
 8005020:	8013      	strh	r3, [r2, #0]
 8005022:	e14d      	b.n	80052c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	785b      	ldrb	r3, [r3, #1]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 80a5 	bne.w	8005178 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	843b      	strh	r3, [r7, #32]
 800503c:	8c3b      	ldrh	r3, [r7, #32]
 800503e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01b      	beq.n	800507e <USB_DeactivateEndpoint+0x18a>
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800505c:	83fb      	strh	r3, [r7, #30]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	8bfb      	ldrh	r3, [r7, #30]
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005072:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	83bb      	strh	r3, [r7, #28]
 800508c:	8bbb      	ldrh	r3, [r7, #28]
 800508e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01b      	beq.n	80050ce <USB_DeactivateEndpoint+0x1da>
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ac:	837b      	strh	r3, [r7, #26]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	441a      	add	r2, r3
 80050b8:	8b7b      	ldrh	r3, [r7, #26]
 80050ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e4:	833b      	strh	r3, [r7, #24]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	441a      	add	r2, r3
 80050f0:	8b3b      	ldrh	r3, [r7, #24]
 80050f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005102:	b29b      	uxth	r3, r3
 8005104:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800511c:	82fb      	strh	r3, [r7, #22]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	441a      	add	r2, r3
 8005128:	8afb      	ldrh	r3, [r7, #22]
 800512a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800513a:	b29b      	uxth	r3, r3
 800513c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005154:	82bb      	strh	r3, [r7, #20]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	8abb      	ldrh	r3, [r7, #20]
 8005162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800516a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800516e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005172:	b29b      	uxth	r3, r3
 8005174:	8013      	strh	r3, [r2, #0]
 8005176:	e0a3      	b.n	80052c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005186:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <USB_DeactivateEndpoint+0x2d4>
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	441a      	add	r2, r3
 80051b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80051b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80051d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80051d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <USB_DeactivateEndpoint+0x324>
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800520c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005210:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005214:	b29b      	uxth	r3, r3
 8005216:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800523c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800524c:	b29b      	uxth	r3, r3
 800524e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005266:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800527c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005284:	b29b      	uxth	r3, r3
 8005286:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800529a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	441a      	add	r2, r3
 80052aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3734      	adds	r7, #52	@ 0x34
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b0c2      	sub	sp, #264	@ 0x108
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052dc:	6018      	str	r0, [r3, #0]
 80052de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	f040 86b7 	bne.w	8006068 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80052fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	d908      	bls.n	8005328 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005326:	e007      	b.n	8005338 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800532c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800533c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	7b1b      	ldrb	r3, [r3, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d13a      	bne.n	80053be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6959      	ldr	r1, [r3, #20]
 8005354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	88da      	ldrh	r2, [r3, #6]
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005364:	b29b      	uxth	r3, r3
 8005366:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800536a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800536e:	6800      	ldr	r0, [r0, #0]
 8005370:	f001 fc8d 	bl	8006c8e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800538e:	b29b      	uxth	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4413      	add	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	011a      	lsls	r2, r3, #4
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4413      	add	r3, r2
 80053aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	f000 be1f 	b.w	8005ffc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80053be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	78db      	ldrb	r3, [r3, #3]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	f040 8462 	bne.w	8005c94 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80053d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6a1a      	ldr	r2, [r3, #32]
 80053dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	f240 83df 	bls.w	8005bac <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80053ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005414:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	441a      	add	r2, r3
 8005432:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800543a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800543e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800544a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a1a      	ldr	r2, [r3, #32]
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 81c7 	beq.w	800581e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	633b      	str	r3, [r7, #48]	@ 0x30
 800549c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d177      	bne.n	800559c <USB_EPStartXfer+0x2ce>
 80054ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054cc:	4413      	add	r3, r2
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	011a      	lsls	r2, r3, #4
 80054de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e0:	4413      	add	r3, r2
 80054e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <USB_EPStartXfer+0x248>
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550e:	b29a      	uxth	r2, r3
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e067      	b.n	80055e6 <USB_EPStartXfer+0x318>
 8005516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551a:	2b3e      	cmp	r3, #62	@ 0x3e
 800551c:	d81c      	bhi.n	8005558 <USB_EPStartXfer+0x28a>
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <USB_EPStartXfer+0x270>
 8005534:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005538:	3301      	adds	r3, #1
 800553a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29a      	uxth	r2, r3
 8005544:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005548:	b29b      	uxth	r3, r3
 800554a:	029b      	lsls	r3, r3, #10
 800554c:	b29b      	uxth	r3, r3
 800554e:	4313      	orrs	r3, r2
 8005550:	b29a      	uxth	r2, r3
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	e046      	b.n	80055e6 <USB_EPStartXfer+0x318>
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	2b00      	cmp	r3, #0
 800556c:	d104      	bne.n	8005578 <USB_EPStartXfer+0x2aa>
 800556e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005572:	3b01      	subs	r3, #1
 8005574:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29a      	uxth	r2, r3
 800557e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005582:	b29b      	uxth	r3, r3
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	b29b      	uxth	r3, r3
 8005588:	4313      	orrs	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005594:	b29a      	uxth	r2, r3
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e024      	b.n	80055e6 <USB_EPStartXfer+0x318>
 800559c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d11c      	bne.n	80055e6 <USB_EPStartXfer+0x318>
 80055ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	4413      	add	r3, r2
 80055c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	011a      	lsls	r2, r3, #4
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	895b      	ldrh	r3, [r3, #10]
 80055f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6959      	ldr	r1, [r3, #20]
 8005602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005606:	b29b      	uxth	r3, r3
 8005608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800560c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005610:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005614:	6800      	ldr	r0, [r0, #0]
 8005616:	f001 fb3a 	bl	8006c8e <USB_WritePMA>
            ep->xfer_buff += len;
 800561a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695a      	ldr	r2, [r3, #20]
 8005626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562a:	441a      	add	r2, r3
 800562c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a1a      	ldr	r2, [r3, #32]
 8005644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	429a      	cmp	r2, r3
 8005652:	d90f      	bls.n	8005674 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a1a      	ldr	r2, [r3, #32]
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005664:	1ad2      	subs	r2, r2, r3
 8005666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	621a      	str	r2, [r3, #32]
 8005672:	e00e      	b.n	8005692 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d177      	bne.n	8005792 <USB_EPStartXfer+0x4c4>
 80056a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056bc:	b29b      	uxth	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	4413      	add	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	011a      	lsls	r2, r3, #4
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	4413      	add	r3, r2
 80056d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	801a      	strh	r2, [r3, #0]
 80056ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <USB_EPStartXfer+0x43e>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005704:	b29a      	uxth	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	e06d      	b.n	80057e8 <USB_EPStartXfer+0x51a>
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005710:	2b3e      	cmp	r3, #62	@ 0x3e
 8005712:	d81c      	bhi.n	800574e <USB_EPStartXfer+0x480>
 8005714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800571e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <USB_EPStartXfer+0x466>
 800572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572e:	3301      	adds	r3, #1
 8005730:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29a      	uxth	r2, r3
 800573a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573e:	b29b      	uxth	r3, r3
 8005740:	029b      	lsls	r3, r3, #10
 8005742:	b29b      	uxth	r3, r3
 8005744:	4313      	orrs	r3, r2
 8005746:	b29a      	uxth	r2, r3
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	801a      	strh	r2, [r3, #0]
 800574c:	e04c      	b.n	80057e8 <USB_EPStartXfer+0x51a>
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <USB_EPStartXfer+0x4a0>
 8005764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005768:	3b01      	subs	r3, #1
 800576a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29a      	uxth	r2, r3
 8005774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005778:	b29b      	uxth	r3, r3
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	b29b      	uxth	r3, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	b29b      	uxth	r3, r3
 8005782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578a:	b29a      	uxth	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e02a      	b.n	80057e8 <USB_EPStartXfer+0x51a>
 8005792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d122      	bne.n	80057e8 <USB_EPStartXfer+0x51a>
 80057a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	623b      	str	r3, [r7, #32]
 80057ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057bc:	b29b      	uxth	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	4413      	add	r3, r2
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	011a      	lsls	r2, r3, #4
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	4413      	add	r3, r2
 80057d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	891b      	ldrh	r3, [r3, #8]
 80057f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6959      	ldr	r1, [r3, #20]
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005808:	b29b      	uxth	r3, r3
 800580a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800580e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005812:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005816:	6800      	ldr	r0, [r0, #0]
 8005818:	f001 fa39 	bl	8006c8e <USB_WritePMA>
 800581c:	e3ee      	b.n	8005ffc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800581e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d177      	bne.n	800591e <USB_EPStartXfer+0x650>
 800582e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800583a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800584e:	4413      	add	r3, r2
 8005850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	011a      	lsls	r2, r3, #4
 8005860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005862:	4413      	add	r3, r2
 8005864:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005868:	647b      	str	r3, [r7, #68]	@ 0x44
 800586a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005874:	b29a      	uxth	r2, r3
 8005876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <USB_EPStartXfer+0x5ca>
 8005882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005890:	b29a      	uxth	r2, r3
 8005892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005894:	801a      	strh	r2, [r3, #0]
 8005896:	e06d      	b.n	8005974 <USB_EPStartXfer+0x6a6>
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589c:	2b3e      	cmp	r3, #62	@ 0x3e
 800589e:	d81c      	bhi.n	80058da <USB_EPStartXfer+0x60c>
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <USB_EPStartXfer+0x5f2>
 80058b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ba:	3301      	adds	r3, #1
 80058bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	029b      	lsls	r3, r3, #10
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4313      	orrs	r3, r2
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	e04c      	b.n	8005974 <USB_EPStartXfer+0x6a6>
 80058da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <USB_EPStartXfer+0x62c>
 80058f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058f4:	3b01      	subs	r3, #1
 80058f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29a      	uxth	r2, r3
 8005900:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005904:	b29b      	uxth	r3, r3
 8005906:	029b      	lsls	r3, r3, #10
 8005908:	b29b      	uxth	r3, r3
 800590a:	4313      	orrs	r3, r2
 800590c:	b29b      	uxth	r3, r3
 800590e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005916:	b29a      	uxth	r2, r3
 8005918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800591a:	801a      	strh	r2, [r3, #0]
 800591c:	e02a      	b.n	8005974 <USB_EPStartXfer+0x6a6>
 800591e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d122      	bne.n	8005974 <USB_EPStartXfer+0x6a6>
 800592e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	653b      	str	r3, [r7, #80]	@ 0x50
 800593a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005948:	b29b      	uxth	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800594e:	4413      	add	r3, r2
 8005950:	653b      	str	r3, [r7, #80]	@ 0x50
 8005952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	011a      	lsls	r2, r3, #4
 8005960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005962:	4413      	add	r3, r2
 8005964:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596e:	b29a      	uxth	r2, r3
 8005970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005972:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	891b      	ldrh	r3, [r3, #8]
 8005980:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6959      	ldr	r1, [r3, #20]
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	b29b      	uxth	r3, r3
 8005996:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800599a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800599e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059a2:	6800      	ldr	r0, [r0, #0]
 80059a4:	f001 f973 	bl	8006c8e <USB_WritePMA>
            ep->xfer_buff += len;
 80059a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b8:	441a      	add	r2, r3
 80059ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6a1a      	ldr	r2, [r3, #32]
 80059d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d90f      	bls.n	8005a02 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80059e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f2:	1ad2      	subs	r2, r2, r3
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	621a      	str	r2, [r3, #32]
 8005a00:	e00e      	b.n	8005a20 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d177      	bne.n	8005b2c <USB_EPStartXfer+0x85e>
 8005a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5c:	4413      	add	r3, r2
 8005a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	011a      	lsls	r2, r3, #4
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <USB_EPStartXfer+0x7d8>
 8005a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e067      	b.n	8005b76 <USB_EPStartXfer+0x8a8>
 8005aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aaa:	2b3e      	cmp	r3, #62	@ 0x3e
 8005aac:	d81c      	bhi.n	8005ae8 <USB_EPStartXfer+0x81a>
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d004      	beq.n	8005ace <USB_EPStartXfer+0x800>
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	e046      	b.n	8005b76 <USB_EPStartXfer+0x8a8>
 8005ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <USB_EPStartXfer+0x83a>
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b02:	3b01      	subs	r3, #1
 8005b04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	029b      	lsls	r3, r3, #10
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	e024      	b.n	8005b76 <USB_EPStartXfer+0x8a8>
 8005b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d11c      	bne.n	8005b76 <USB_EPStartXfer+0x8a8>
 8005b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b50:	4413      	add	r3, r2
 8005b52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	011a      	lsls	r2, r3, #4
 8005b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b64:	4413      	add	r3, r2
 8005b66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	895b      	ldrh	r3, [r3, #10]
 8005b82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6959      	ldr	r1, [r3, #20]
 8005b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ba0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ba4:	6800      	ldr	r0, [r0, #0]
 8005ba6:	f001 f872 	bl	8006c8e <USB_WritePMA>
 8005baa:	e227      	b.n	8005ffc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	441a      	add	r2, r3
 8005c00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c38:	4413      	add	r3, r2
 8005c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	011a      	lsls	r2, r3, #4
 8005c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	891b      	ldrh	r3, [r3, #8]
 8005c6a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6959      	ldr	r1, [r3, #20]
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c84:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c88:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c8c:	6800      	ldr	r0, [r0, #0]
 8005c8e:	f000 fffe 	bl	8006c8e <USB_WritePMA>
 8005c92:	e1b3      	b.n	8005ffc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80c6 	beq.w	8005e66 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d177      	bne.n	8005de6 <USB_EPStartXfer+0xb18>
 8005cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d16:	4413      	add	r3, r2
 8005d18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	011a      	lsls	r2, r3, #4
 8005d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d30:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <USB_EPStartXfer+0xa92>
 8005d4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e067      	b.n	8005e30 <USB_EPStartXfer+0xb62>
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d64:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d66:	d81c      	bhi.n	8005da2 <USB_EPStartXfer+0xad4>
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d004      	beq.n	8005d88 <USB_EPStartXfer+0xaba>
 8005d7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d82:	3301      	adds	r3, #1
 8005d84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e046      	b.n	8005e30 <USB_EPStartXfer+0xb62>
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <USB_EPStartXfer+0xaf4>
 8005db8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	029b      	lsls	r3, r3, #10
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e024      	b.n	8005e30 <USB_EPStartXfer+0xb62>
 8005de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d11c      	bne.n	8005e30 <USB_EPStartXfer+0xb62>
 8005df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e0a:	4413      	add	r3, r2
 8005e0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	011a      	lsls	r2, r3, #4
 8005e1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e1e:	4413      	add	r3, r2
 8005e20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	895b      	ldrh	r3, [r3, #10]
 8005e3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6959      	ldr	r1, [r3, #20]
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e5e:	6800      	ldr	r0, [r0, #0]
 8005e60:	f000 ff15 	bl	8006c8e <USB_WritePMA>
 8005e64:	e0ca      	b.n	8005ffc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d177      	bne.n	8005f66 <USB_EPStartXfer+0xc98>
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e96:	4413      	add	r3, r2
 8005e98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	011a      	lsls	r2, r3, #4
 8005ea8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005eaa:	4413      	add	r3, r2
 8005eac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <USB_EPStartXfer+0xc12>
 8005eca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	e073      	b.n	8005fc8 <USB_EPStartXfer+0xcfa>
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ee6:	d81c      	bhi.n	8005f22 <USB_EPStartXfer+0xc54>
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eec:	085b      	lsrs	r3, r3, #1
 8005eee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <USB_EPStartXfer+0xc3a>
 8005efe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f02:	3301      	adds	r3, #1
 8005f04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	029b      	lsls	r3, r3, #10
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e052      	b.n	8005fc8 <USB_EPStartXfer+0xcfa>
 8005f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <USB_EPStartXfer+0xc74>
 8005f38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	029b      	lsls	r3, r3, #10
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	4313      	orrs	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f62:	801a      	strh	r2, [r3, #0]
 8005f64:	e030      	b.n	8005fc8 <USB_EPStartXfer+0xcfa>
 8005f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d128      	bne.n	8005fc8 <USB_EPStartXfer+0xcfa>
 8005f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	891b      	ldrh	r3, [r3, #8]
 8005fd4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6959      	ldr	r1, [r3, #20]
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005fee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ff2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ff6:	6800      	ldr	r0, [r0, #0]
 8005ff8:	f000 fe49 	bl	8006c8e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006022:	817b      	strh	r3, [r7, #10]
 8006024:	897b      	ldrh	r3, [r7, #10]
 8006026:	f083 0310 	eor.w	r3, r3, #16
 800602a:	817b      	strh	r3, [r7, #10]
 800602c:	897b      	ldrh	r3, [r7, #10]
 800602e:	f083 0320 	eor.w	r3, r3, #32
 8006032:	817b      	strh	r3, [r7, #10]
 8006034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	897b      	ldrh	r3, [r7, #10]
 8006050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006060:	b29b      	uxth	r3, r3
 8006062:	8013      	strh	r3, [r2, #0]
 8006064:	f000 bcdf 	b.w	8006a26 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	7b1b      	ldrb	r3, [r3, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f040 80bc 	bne.w	80061f2 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800607a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	d917      	bls.n	80060c6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80060a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	619a      	str	r2, [r3, #24]
 80060c4:	e00e      	b.n	80060e4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80060d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2200      	movs	r2, #0
 80060e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006100:	b29b      	uxth	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006108:	4413      	add	r3, r2
 800610a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	011a      	lsls	r2, r3, #4
 800611c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006120:	4413      	add	r3, r2
 8006122:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800612a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006136:	b29a      	uxth	r2, r3
 8006138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800613c:	801a      	strh	r2, [r3, #0]
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <USB_EPStartXfer+0xe94>
 8006146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	f000 bc28 	b.w	80069b2 <USB_EPStartXfer+0x16e4>
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006166:	2b3e      	cmp	r3, #62	@ 0x3e
 8006168:	d81f      	bhi.n	80061aa <USB_EPStartXfer+0xedc>
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <USB_EPStartXfer+0xebc>
 8006180:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006184:	3301      	adds	r3, #1
 8006186:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800618a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29a      	uxth	r2, r3
 8006192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006196:	b29b      	uxth	r3, r3
 8006198:	029b      	lsls	r3, r3, #10
 800619a:	b29b      	uxth	r3, r3
 800619c:	4313      	orrs	r3, r2
 800619e:	b29a      	uxth	r2, r3
 80061a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	f000 bc04 	b.w	80069b2 <USB_EPStartXfer+0x16e4>
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <USB_EPStartXfer+0xefc>
 80061c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80061c4:	3b01      	subs	r3, #1
 80061c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	029b      	lsls	r3, r3, #10
 80061da:	b29b      	uxth	r3, r3
 80061dc:	4313      	orrs	r3, r2
 80061de:	b29b      	uxth	r3, r3
 80061e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e3df      	b.n	80069b2 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80061f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	78db      	ldrb	r3, [r3, #3]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	f040 8218 	bne.w	8006634 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	785b      	ldrb	r3, [r3, #1]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f040 809d 	bne.w	8006350 <USB_EPStartXfer+0x1082>
 8006216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006232:	b29b      	uxth	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800623a:	4413      	add	r3, r2
 800623c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	011a      	lsls	r2, r3, #4
 800624e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006252:	4413      	add	r3, r2
 8006254:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800625c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10c      	bne.n	800629a <USB_EPStartXfer+0xfcc>
 8006280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006290:	b29a      	uxth	r2, r3
 8006292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e08f      	b.n	80063ba <USB_EPStartXfer+0x10ec>
 800629a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80062a8:	d826      	bhi.n	80062f8 <USB_EPStartXfer+0x102a>
 80062aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <USB_EPStartXfer+0x100c>
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d4:	3301      	adds	r3, #1
 80062d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	029b      	lsls	r3, r3, #10
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	e060      	b.n	80063ba <USB_EPStartXfer+0x10ec>
 80062f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800630a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <USB_EPStartXfer+0x105a>
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006322:	3b01      	subs	r3, #1
 8006324:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29a      	uxth	r2, r3
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006334:	b29b      	uxth	r3, r3
 8006336:	029b      	lsls	r3, r3, #10
 8006338:	b29b      	uxth	r3, r3
 800633a:	4313      	orrs	r3, r2
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29a      	uxth	r2, r3
 8006348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	e034      	b.n	80063ba <USB_EPStartXfer+0x10ec>
 8006350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d12c      	bne.n	80063ba <USB_EPStartXfer+0x10ec>
 8006360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800636e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800637c:	b29b      	uxth	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006384:	4413      	add	r3, r2
 8006386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800638a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	011a      	lsls	r2, r3, #4
 8006398:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800639c:	4413      	add	r3, r2
 800639e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f040 809d 	bne.w	8006514 <USB_EPStartXfer+0x1246>
 80063da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063fe:	4413      	add	r3, r2
 8006400:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	011a      	lsls	r2, r3, #4
 8006412:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006416:	4413      	add	r3, r2
 8006418:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800641c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800642c:	b29a      	uxth	r2, r3
 800642e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006432:	801a      	strh	r2, [r3, #0]
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10c      	bne.n	800645e <USB_EPStartXfer+0x1190>
 8006444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006454:	b29a      	uxth	r2, r3
 8006456:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	e088      	b.n	8006570 <USB_EPStartXfer+0x12a2>
 800645e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b3e      	cmp	r3, #62	@ 0x3e
 800646c:	d826      	bhi.n	80064bc <USB_EPStartXfer+0x11ee>
 800646e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <USB_EPStartXfer+0x11d0>
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006498:	3301      	adds	r3, #1
 800649a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800649e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	029b      	lsls	r3, r3, #10
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	4313      	orrs	r3, r2
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	e059      	b.n	8006570 <USB_EPStartXfer+0x12a2>
 80064bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <USB_EPStartXfer+0x121e>
 80064e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e6:	3b01      	subs	r3, #1
 80064e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	029b      	lsls	r3, r3, #10
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	4313      	orrs	r3, r2
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650a:	b29a      	uxth	r2, r3
 800650c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e02d      	b.n	8006570 <USB_EPStartXfer+0x12a2>
 8006514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d125      	bne.n	8006570 <USB_EPStartXfer+0x12a2>
 8006524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006532:	b29b      	uxth	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800653a:	4413      	add	r3, r2
 800653c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	011a      	lsls	r2, r3, #4
 800654e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006552:	4413      	add	r3, r2
 8006554:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006558:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	b29a      	uxth	r2, r3
 800656a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800656e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8218 	beq.w	80069b2 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006586:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <USB_EPStartXfer+0x12ec>
 80065ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10d      	bne.n	80065d6 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 81f5 	bne.w	80069b2 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 81ee 	bne.w	80069b2 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80065d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065fc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	441a      	add	r2, r3
 800661a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800661e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800662a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800662e:	b29b      	uxth	r3, r3
 8006630:	8013      	strh	r3, [r2, #0]
 8006632:	e1be      	b.n	80069b2 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	78db      	ldrb	r3, [r3, #3]
 8006640:	2b01      	cmp	r3, #1
 8006642:	f040 81b4 	bne.w	80069ae <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d917      	bls.n	8006692 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8006662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	1ad2      	subs	r2, r2, r3
 8006684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	619a      	str	r2, [r3, #24]
 8006690:	e00e      	b.n	80066b0 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8006692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80066a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2200      	movs	r2, #0
 80066ae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f040 8085 	bne.w	80067cc <USB_EPStartXfer+0x14fe>
 80066c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066e6:	4413      	add	r3, r2
 80066e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	011a      	lsls	r2, r3, #4
 80066fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066fe:	4413      	add	r3, r2
 8006700:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006704:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006708:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006714:	b29a      	uxth	r2, r3
 8006716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10c      	bne.n	800673e <USB_EPStartXfer+0x1470>
 8006724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006734:	b29a      	uxth	r2, r3
 8006736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	e077      	b.n	800682e <USB_EPStartXfer+0x1560>
 800673e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006742:	2b3e      	cmp	r3, #62	@ 0x3e
 8006744:	d81e      	bhi.n	8006784 <USB_EPStartXfer+0x14b6>
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <USB_EPStartXfer+0x1498>
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006760:	3301      	adds	r3, #1
 8006762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29a      	uxth	r2, r3
 800676e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006772:	b29b      	uxth	r3, r3
 8006774:	029b      	lsls	r3, r3, #10
 8006776:	b29b      	uxth	r3, r3
 8006778:	4313      	orrs	r3, r2
 800677a:	b29a      	uxth	r2, r3
 800677c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006780:	801a      	strh	r2, [r3, #0]
 8006782:	e054      	b.n	800682e <USB_EPStartXfer+0x1560>
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800678e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006792:	f003 031f 	and.w	r3, r3, #31
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <USB_EPStartXfer+0x14d6>
 800679a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800679e:	3b01      	subs	r3, #1
 80067a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	029b      	lsls	r3, r3, #10
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	4313      	orrs	r3, r2
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	e030      	b.n	800682e <USB_EPStartXfer+0x1560>
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d128      	bne.n	800682e <USB_EPStartXfer+0x1560>
 80067dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006800:	4413      	add	r3, r2
 8006802:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	011a      	lsls	r2, r3, #4
 8006814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006818:	4413      	add	r3, r2
 800681a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800681e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006826:	b29a      	uxth	r2, r3
 8006828:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800683c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	785b      	ldrb	r3, [r3, #1]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f040 8085 	bne.w	8006958 <USB_EPStartXfer+0x168a>
 800684e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800686a:	b29b      	uxth	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006872:	4413      	add	r3, r2
 8006874:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	011a      	lsls	r2, r3, #4
 8006886:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800688a:	4413      	add	r3, r2
 800688c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006894:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10c      	bne.n	80068ca <USB_EPStartXfer+0x15fc>
 80068b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	e073      	b.n	80069b2 <USB_EPStartXfer+0x16e4>
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80068d0:	d81e      	bhi.n	8006910 <USB_EPStartXfer+0x1642>
 80068d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <USB_EPStartXfer+0x1624>
 80068e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ec:	3301      	adds	r3, #1
 80068ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068fe:	b29b      	uxth	r3, r3
 8006900:	029b      	lsls	r3, r3, #10
 8006902:	b29b      	uxth	r3, r3
 8006904:	4313      	orrs	r3, r2
 8006906:	b29a      	uxth	r2, r3
 8006908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	e050      	b.n	80069b2 <USB_EPStartXfer+0x16e4>
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <USB_EPStartXfer+0x1662>
 8006926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800692a:	3b01      	subs	r3, #1
 800692c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006930:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29a      	uxth	r2, r3
 8006938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800693c:	b29b      	uxth	r3, r3
 800693e:	029b      	lsls	r3, r3, #10
 8006940:	b29b      	uxth	r3, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	b29b      	uxth	r3, r3
 8006946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800694e:	b29a      	uxth	r2, r3
 8006950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006954:	801a      	strh	r2, [r3, #0]
 8006956:	e02c      	b.n	80069b2 <USB_EPStartXfer+0x16e4>
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	785b      	ldrb	r3, [r3, #1]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d124      	bne.n	80069b2 <USB_EPStartXfer+0x16e4>
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006976:	b29b      	uxth	r3, r3
 8006978:	461a      	mov	r2, r3
 800697a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800697e:	4413      	add	r3, r2
 8006980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	011a      	lsls	r2, r3, #4
 8006992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006996:	4413      	add	r3, r2
 8006998:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800699c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069aa:	801a      	strh	r2, [r3, #0]
 80069ac:	e001      	b.n	80069b2 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e03a      	b.n	8006a28 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	441a      	add	r2, r3
 8006a0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d020      	beq.n	8006a86 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a5a:	81bb      	strh	r3, [r7, #12]
 8006a5c:	89bb      	ldrh	r3, [r7, #12]
 8006a5e:	f083 0310 	eor.w	r3, r3, #16
 8006a62:	81bb      	strh	r3, [r7, #12]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	441a      	add	r2, r3
 8006a6e:	89bb      	ldrh	r3, [r7, #12]
 8006a70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	8013      	strh	r3, [r2, #0]
 8006a84:	e01f      	b.n	8006ac6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9c:	81fb      	strh	r3, [r7, #14]
 8006a9e:	89fb      	ldrh	r3, [r7, #14]
 8006aa0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006aa4:	81fb      	strh	r3, [r7, #14]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	89fb      	ldrh	r3, [r7, #14]
 8006ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	7b1b      	ldrb	r3, [r3, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f040 809d 	bne.w	8006c22 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d04c      	beq.n	8006b8a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	823b      	strh	r3, [r7, #16]
 8006afe:	8a3b      	ldrh	r3, [r7, #16]
 8006b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01b      	beq.n	8006b40 <USB_EPClearStall+0x6c>
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1e:	81fb      	strh	r3, [r7, #14]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	89fb      	ldrh	r3, [r7, #14]
 8006b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	78db      	ldrb	r3, [r3, #3]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d06c      	beq.n	8006c22 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b5e:	81bb      	strh	r3, [r7, #12]
 8006b60:	89bb      	ldrh	r3, [r7, #12]
 8006b62:	f083 0320 	eor.w	r3, r3, #32
 8006b66:	81bb      	strh	r3, [r7, #12]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	89bb      	ldrh	r3, [r7, #12]
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
 8006b88:	e04b      	b.n	8006c22 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	82fb      	strh	r3, [r7, #22]
 8006b98:	8afb      	ldrh	r3, [r7, #22]
 8006b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01b      	beq.n	8006bda <USB_EPClearStall+0x106>
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb8:	82bb      	strh	r3, [r7, #20]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	441a      	add	r2, r3
 8006bc4:	8abb      	ldrh	r3, [r7, #20]
 8006bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf0:	827b      	strh	r3, [r7, #18]
 8006bf2:	8a7b      	ldrh	r3, [r7, #18]
 8006bf4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bf8:	827b      	strh	r3, [r7, #18]
 8006bfa:	8a7b      	ldrh	r3, [r7, #18]
 8006bfc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c00:	827b      	strh	r3, [r7, #18]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	441a      	add	r2, r3
 8006c0c:	8a7b      	ldrh	r3, [r7, #18]
 8006c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2280      	movs	r2, #128	@ 0x80
 8006c46:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c80:	68fb      	ldr	r3, [r7, #12]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b08b      	sub	sp, #44	@ 0x2c
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	4611      	mov	r1, r2
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	80fb      	strh	r3, [r7, #6]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ca4:	88bb      	ldrh	r3, [r7, #4]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	005a      	lsls	r2, r3, #1
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cc0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc6:	e01e      	b.n	8006d06 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	b21a      	sxth	r2, r3
 8006cd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	b21b      	sxth	r3, r3
 8006ce0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	8a7a      	ldrh	r2, [r7, #18]
 8006ce6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	3302      	adds	r3, #2
 8006cec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	3302      	adds	r3, #2
 8006cf2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d02:	3b01      	subs	r3, #1
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1dd      	bne.n	8006cc8 <USB_WritePMA+0x3a>
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	372c      	adds	r7, #44	@ 0x2c
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b08b      	sub	sp, #44	@ 0x2c
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	4611      	mov	r1, r2
 8006d26:	461a      	mov	r2, r3
 8006d28:	460b      	mov	r3, r1
 8006d2a:	80fb      	strh	r3, [r7, #6]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d30:	88bb      	ldrh	r3, [r7, #4]
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	005a      	lsls	r2, r3, #1
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d52:	e01b      	b.n	8006d8c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	3302      	adds	r3, #2
 8006d60:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	3302      	adds	r3, #2
 8006d84:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e0      	bne.n	8006d54 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006d92:	88bb      	ldrh	r3, [r7, #4]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	701a      	strb	r2, [r3, #0]
  }
}
 8006dae:	bf00      	nop
 8006db0:	372c      	adds	r7, #44	@ 0x2c
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	7c1b      	ldrb	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d115      	bne.n	8006dfe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	2181      	movs	r1, #129	@ 0x81
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 feb3 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dea:	2202      	movs	r2, #2
 8006dec:	2101      	movs	r1, #1
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 fea9 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006dfc:	e012      	b.n	8006e24 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dfe:	2340      	movs	r3, #64	@ 0x40
 8006e00:	2202      	movs	r2, #2
 8006e02:	2181      	movs	r1, #129	@ 0x81
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fe9e 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e10:	2340      	movs	r3, #64	@ 0x40
 8006e12:	2202      	movs	r2, #2
 8006e14:	2101      	movs	r1, #1
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fe95 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e24:	2308      	movs	r3, #8
 8006e26:	2203      	movs	r2, #3
 8006e28:	2182      	movs	r1, #130	@ 0x82
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fe8b 	bl	8008b46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e36:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e3a:	f001 ffab 	bl	8008d94 <USBD_static_malloc>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d102      	bne.n	8006e56 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e50:	2301      	movs	r3, #1
 8006e52:	73fb      	strb	r3, [r7, #15]
 8006e54:	e026      	b.n	8006ea4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e5c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	7c1b      	ldrb	r3, [r3, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 ff4b 	bl	8008d28 <USBD_LL_PrepareReceive>
 8006e92:	e007      	b.n	8006ea4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e9a:	2340      	movs	r3, #64	@ 0x40
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 ff42 	bl	8008d28 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ebe:	2181      	movs	r1, #129	@ 0x81
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fe66 	bl	8008b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ecc:	2101      	movs	r1, #1
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fe5f 	bl	8008b92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006edc:	2182      	movs	r1, #130	@ 0x82
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fe57 	bl	8008b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00e      	beq.n	8006f12 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 ff53 	bl	8008db0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d039      	beq.n	8006fba <USBD_CDC_Setup+0x9e>
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d17f      	bne.n	800704a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	88db      	ldrh	r3, [r3, #6]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d029      	beq.n	8006fa6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	b25b      	sxtb	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	da11      	bge.n	8006f80 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f68:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	88d2      	ldrh	r2, [r2, #6]
 8006f6e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f70:	6939      	ldr	r1, [r7, #16]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	88db      	ldrh	r3, [r3, #6]
 8006f76:	461a      	mov	r2, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fa0f 	bl	800839c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006f7e:	e06b      	b.n	8007058 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	785a      	ldrb	r2, [r3, #1]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f96:	6939      	ldr	r1, [r7, #16]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	88db      	ldrh	r3, [r3, #6]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fa2a 	bl	80083f8 <USBD_CtlPrepareRx>
      break;
 8006fa4:	e058      	b.n	8007058 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	7850      	ldrb	r0, [r2, #1]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	4798      	blx	r3
      break;
 8006fb8:	e04e      	b.n	8007058 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b0b      	cmp	r3, #11
 8006fc0:	d02e      	beq.n	8007020 <USBD_CDC_Setup+0x104>
 8006fc2:	2b0b      	cmp	r3, #11
 8006fc4:	dc38      	bgt.n	8007038 <USBD_CDC_Setup+0x11c>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <USBD_CDC_Setup+0xb4>
 8006fca:	2b0a      	cmp	r3, #10
 8006fcc:	d014      	beq.n	8006ff8 <USBD_CDC_Setup+0xdc>
 8006fce:	e033      	b.n	8007038 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d107      	bne.n	8006fea <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006fda:	f107 030c 	add.w	r3, r7, #12
 8006fde:	2202      	movs	r2, #2
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 f9da 	bl	800839c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fe8:	e02e      	b.n	8007048 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 f96a 	bl	80082c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ff6:	e027      	b.n	8007048 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d107      	bne.n	8007012 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007002:	f107 030f 	add.w	r3, r7, #15
 8007006:	2201      	movs	r2, #1
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 f9c6 	bl	800839c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007010:	e01a      	b.n	8007048 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 f956 	bl	80082c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800701a:	2302      	movs	r3, #2
 800701c:	75fb      	strb	r3, [r7, #23]
          break;
 800701e:	e013      	b.n	8007048 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007026:	2b03      	cmp	r3, #3
 8007028:	d00d      	beq.n	8007046 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 f94a 	bl	80082c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007032:	2302      	movs	r3, #2
 8007034:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007036:	e006      	b.n	8007046 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 f943 	bl	80082c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007040:	2302      	movs	r3, #2
 8007042:	75fb      	strb	r3, [r7, #23]
          break;
 8007044:	e000      	b.n	8007048 <USBD_CDC_Setup+0x12c>
          break;
 8007046:	bf00      	nop
      }
      break;
 8007048:	e006      	b.n	8007058 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 f93a 	bl	80082c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007052:	2302      	movs	r3, #2
 8007054:	75fb      	strb	r3, [r7, #23]
      break;
 8007056:	bf00      	nop
  }

  return ret;
 8007058:	7dfb      	ldrb	r3, [r7, #23]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007074:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800707c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007084:	2b00      	cmp	r3, #0
 8007086:	d03a      	beq.n	80070fe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007088:	78fa      	ldrb	r2, [r7, #3]
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	440b      	add	r3, r1
 8007096:	331c      	adds	r3, #28
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d029      	beq.n	80070f2 <USBD_CDC_DataIn+0x90>
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	331c      	adds	r3, #28
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	78f9      	ldrb	r1, [r7, #3]
 80070b2:	68b8      	ldr	r0, [r7, #8]
 80070b4:	460b      	mov	r3, r1
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4403      	add	r3, r0
 80070be:	3320      	adds	r3, #32
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d110      	bne.n	80070f2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	440b      	add	r3, r1
 80070de:	331c      	adds	r3, #28
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070e4:	78f9      	ldrb	r1, [r7, #3]
 80070e6:	2300      	movs	r3, #0
 80070e8:	2200      	movs	r2, #0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fdf9 	bl	8008ce2 <USBD_LL_Transmit>
 80070f0:	e003      	b.n	80070fa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e000      	b.n	8007100 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80070fe:	2302      	movs	r3, #2
  }
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800711a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fe24 	bl	8008d6e <USBD_LL_GetRxDataSize>
 8007126:	4602      	mov	r2, r0
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00d      	beq.n	8007154 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800714c:	4611      	mov	r1, r2
 800714e:	4798      	blx	r3

    return USBD_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800716c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007174:	2b00      	cmp	r3, #0
 8007176:	d014      	beq.n	80071a2 <USBD_CDC_EP0_RxReady+0x44>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800717e:	2bff      	cmp	r3, #255	@ 0xff
 8007180:	d00f      	beq.n	80071a2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007190:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007198:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	22ff      	movs	r2, #255	@ 0xff
 800719e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2243      	movs	r2, #67	@ 0x43
 80071b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80071ba:	4b03      	ldr	r3, [pc, #12]	@ (80071c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	20000094 	.word	0x20000094

080071cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2243      	movs	r2, #67	@ 0x43
 80071d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80071da:	4b03      	ldr	r3, [pc, #12]	@ (80071e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	20000050 	.word	0x20000050

080071ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2243      	movs	r2, #67	@ 0x43
 80071f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80071fa:	4b03      	ldr	r3, [pc, #12]	@ (8007208 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	200000d8 	.word	0x200000d8

0800720c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	220a      	movs	r2, #10
 8007218:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800721a:	4b03      	ldr	r3, [pc, #12]	@ (8007228 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	2000000c 	.word	0x2000000c

0800722c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007236:	2302      	movs	r3, #2
 8007238:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800725a:	b480      	push	{r7}
 800725c:	b087      	sub	sp, #28
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	4613      	mov	r3, r2
 8007266:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800726e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007278:	88fa      	ldrh	r2, [r7, #6]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800728e:	b480      	push	{r7}
 8007290:	b085      	sub	sp, #20
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01c      	beq.n	800730a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d115      	bne.n	8007306 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2181      	movs	r1, #129	@ 0x81
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fcf0 	bl	8008ce2 <USBD_LL_Transmit>

      return USBD_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e002      	b.n	800730c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800730a:	2302      	movs	r3, #2
  }
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007322:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d017      	beq.n	800735e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7c1b      	ldrb	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800733c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007340:	2101      	movs	r1, #1
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fcf0 	bl	8008d28 <USBD_LL_PrepareReceive>
 8007348:	e007      	b.n	800735a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007350:	2340      	movs	r3, #64	@ 0x40
 8007352:	2101      	movs	r1, #1
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 fce7 	bl	8008d28 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	e000      	b.n	8007360 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800735e:	2302      	movs	r3, #2
  }
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	4613      	mov	r3, r2
 8007374:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800737c:	2302      	movs	r3, #2
 800737e:	e01a      	b.n	80073b6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	79fa      	ldrb	r2, [r7, #7]
 80073ac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f001 fb54 	bl	8008a5c <USBD_LL_Init>

  return USBD_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d006      	beq.n	80073e0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
 80073de:	e001      	b.n	80073e4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073e0:	2302      	movs	r3, #2
 80073e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 fb88 	bl	8008b10 <USBD_LL_Start>

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800742c:	2302      	movs	r3, #2
 800742e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00c      	beq.n	8007454 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	460b      	mov	r3, r1
 8007468:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	4611      	mov	r1, r2
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fedb 	bl	8008252 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074aa:	461a      	mov	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d016      	beq.n	80074ee <USBD_LL_SetupStage+0x6a>
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d81c      	bhi.n	80074fe <USBD_LL_SetupStage+0x7a>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <USBD_LL_SetupStage+0x4a>
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d008      	beq.n	80074de <USBD_LL_SetupStage+0x5a>
 80074cc:	e017      	b.n	80074fe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f9ce 	bl	8007878 <USBD_StdDevReq>
      break;
 80074dc:	e01a      	b.n	8007514 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa30 	bl	800794c <USBD_StdItfReq>
      break;
 80074ec:	e012      	b.n	8007514 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa70 	bl	80079dc <USBD_StdEPReq>
      break;
 80074fc:	e00a      	b.n	8007514 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007504:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007508:	b2db      	uxtb	r3, r3
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 fb5f 	bl	8008bd0 <USBD_LL_StallEP>
      break;
 8007512:	bf00      	nop
  }

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	460b      	mov	r3, r1
 8007528:	607a      	str	r2, [r7, #4]
 800752a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d14b      	bne.n	80075ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007538:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007540:	2b03      	cmp	r3, #3
 8007542:	d134      	bne.n	80075ae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	429a      	cmp	r2, r3
 800754e:	d919      	bls.n	8007584 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	1ad2      	subs	r2, r2, r3
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007566:	429a      	cmp	r2, r3
 8007568:	d203      	bcs.n	8007572 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800756e:	b29b      	uxth	r3, r3
 8007570:	e002      	b.n	8007578 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007576:	b29b      	uxth	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 ff59 	bl	8008434 <USBD_CtlContinueRx>
 8007582:	e038      	b.n	80075f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00a      	beq.n	80075a6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007596:	2b03      	cmp	r3, #3
 8007598:	d105      	bne.n	80075a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 ff56 	bl	8008458 <USBD_CtlSendStatus>
 80075ac:	e023      	b.n	80075f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075b4:	2b05      	cmp	r3, #5
 80075b6:	d11e      	bne.n	80075f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80075c0:	2100      	movs	r1, #0
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f001 fb04 	bl	8008bd0 <USBD_LL_StallEP>
 80075c8:	e015      	b.n	80075f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00d      	beq.n	80075f2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d108      	bne.n	80075f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	7afa      	ldrb	r2, [r7, #11]
 80075ea:	4611      	mov	r1, r2
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	4798      	blx	r3
 80075f0:	e001      	b.n	80075f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075f2:	2302      	movs	r3, #2
 80075f4:	e000      	b.n	80075f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	460b      	mov	r3, r1
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800760e:	7afb      	ldrb	r3, [r7, #11]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d17f      	bne.n	8007714 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3314      	adds	r3, #20
 8007618:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007620:	2b02      	cmp	r3, #2
 8007622:	d15c      	bne.n	80076de <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	429a      	cmp	r2, r3
 800762e:	d915      	bls.n	800765c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	1ad2      	subs	r2, r2, r3
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	b29b      	uxth	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fec3 	bl	80083d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800764e:	2300      	movs	r3, #0
 8007650:	2200      	movs	r2, #0
 8007652:	2100      	movs	r1, #0
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f001 fb67 	bl	8008d28 <USBD_LL_PrepareReceive>
 800765a:	e04e      	b.n	80076fa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	6912      	ldr	r2, [r2, #16]
 8007664:	fbb3 f1f2 	udiv	r1, r3, r2
 8007668:	fb01 f202 	mul.w	r2, r1, r2
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d11c      	bne.n	80076ac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800767a:	429a      	cmp	r2, r3
 800767c:	d316      	bcc.n	80076ac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007688:	429a      	cmp	r2, r3
 800768a:	d20f      	bcs.n	80076ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800768c:	2200      	movs	r2, #0
 800768e:	2100      	movs	r1, #0
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fe9f 	bl	80083d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800769e:	2300      	movs	r3, #0
 80076a0:	2200      	movs	r2, #0
 80076a2:	2100      	movs	r1, #0
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f001 fb3f 	bl	8008d28 <USBD_LL_PrepareReceive>
 80076aa:	e026      	b.n	80076fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d105      	bne.n	80076ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076ce:	2180      	movs	r1, #128	@ 0x80
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f001 fa7d 	bl	8008bd0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fed1 	bl	800847e <USBD_CtlReceiveStatus>
 80076dc:	e00d      	b.n	80076fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d004      	beq.n	80076f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076f2:	2180      	movs	r1, #128	@ 0x80
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f001 fa6b 	bl	8008bd0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007700:	2b01      	cmp	r3, #1
 8007702:	d11d      	bne.n	8007740 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f7ff fe80 	bl	800740a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007712:	e015      	b.n	8007740 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00d      	beq.n	800773c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007726:	2b03      	cmp	r3, #3
 8007728:	d108      	bne.n	800773c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	7afa      	ldrb	r2, [r7, #11]
 8007734:	4611      	mov	r1, r2
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	4798      	blx	r3
 800773a:	e001      	b.n	8007740 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800773c:	2302      	movs	r3, #2
 800773e:	e000      	b.n	8007742 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007752:	2340      	movs	r3, #64	@ 0x40
 8007754:	2200      	movs	r2, #0
 8007756:	2100      	movs	r1, #0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f9f4 	bl	8008b46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2240      	movs	r2, #64	@ 0x40
 800776a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800776e:	2340      	movs	r3, #64	@ 0x40
 8007770:	2200      	movs	r2, #0
 8007772:	2180      	movs	r1, #128	@ 0x80
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f9e6 	bl	8008b46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2240      	movs	r2, #64	@ 0x40
 8007784:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d009      	beq.n	80077c2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6852      	ldr	r2, [r2, #4]
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	4611      	mov	r1, r2
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
  }

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2204      	movs	r2, #4
 8007804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007824:	2b04      	cmp	r3, #4
 8007826:	d105      	bne.n	8007834 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007850:	2b03      	cmp	r3, #3
 8007852:	d10b      	bne.n	800786c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	d005      	beq.n	800789e <USBD_StdDevReq+0x26>
 8007892:	2b40      	cmp	r3, #64	@ 0x40
 8007894:	d84f      	bhi.n	8007936 <USBD_StdDevReq+0xbe>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <USBD_StdDevReq+0x36>
 800789a:	2b20      	cmp	r3, #32
 800789c:	d14b      	bne.n	8007936 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
      break;
 80078ac:	e048      	b.n	8007940 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	2b09      	cmp	r3, #9
 80078b4:	d839      	bhi.n	800792a <USBD_StdDevReq+0xb2>
 80078b6:	a201      	add	r2, pc, #4	@ (adr r2, 80078bc <USBD_StdDevReq+0x44>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	0800790d 	.word	0x0800790d
 80078c0:	08007921 	.word	0x08007921
 80078c4:	0800792b 	.word	0x0800792b
 80078c8:	08007917 	.word	0x08007917
 80078cc:	0800792b 	.word	0x0800792b
 80078d0:	080078ef 	.word	0x080078ef
 80078d4:	080078e5 	.word	0x080078e5
 80078d8:	0800792b 	.word	0x0800792b
 80078dc:	08007903 	.word	0x08007903
 80078e0:	080078f9 	.word	0x080078f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9dc 	bl	8007ca4 <USBD_GetDescriptor>
          break;
 80078ec:	e022      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fb3f 	bl	8007f74 <USBD_SetAddress>
          break;
 80078f6:	e01d      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb7e 	bl	8007ffc <USBD_SetConfig>
          break;
 8007900:	e018      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc07 	bl	8008118 <USBD_GetConfig>
          break;
 800790a:	e013      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fc37 	bl	8008182 <USBD_GetStatus>
          break;
 8007914:	e00e      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc65 	bl	80081e8 <USBD_SetFeature>
          break;
 800791e:	e009      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fc74 	bl	8008210 <USBD_ClrFeature>
          break;
 8007928:	e004      	b.n	8007934 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fcca 	bl	80082c6 <USBD_CtlError>
          break;
 8007932:	bf00      	nop
      }
      break;
 8007934:	e004      	b.n	8007940 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fcc4 	bl	80082c6 <USBD_CtlError>
      break;
 800793e:	bf00      	nop
  }

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop

0800794c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007962:	2b40      	cmp	r3, #64	@ 0x40
 8007964:	d005      	beq.n	8007972 <USBD_StdItfReq+0x26>
 8007966:	2b40      	cmp	r3, #64	@ 0x40
 8007968:	d82e      	bhi.n	80079c8 <USBD_StdItfReq+0x7c>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <USBD_StdItfReq+0x26>
 800796e:	2b20      	cmp	r3, #32
 8007970:	d12a      	bne.n	80079c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007978:	3b01      	subs	r3, #1
 800797a:	2b02      	cmp	r3, #2
 800797c:	d81d      	bhi.n	80079ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	889b      	ldrh	r3, [r3, #4]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	d813      	bhi.n	80079b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d110      	bne.n	80079c4 <USBD_StdItfReq+0x78>
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10d      	bne.n	80079c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fd55 	bl	8008458 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079ae:	e009      	b.n	80079c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fc87 	bl	80082c6 <USBD_CtlError>
          break;
 80079b8:	e004      	b.n	80079c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fc82 	bl	80082c6 <USBD_CtlError>
          break;
 80079c2:	e000      	b.n	80079c6 <USBD_StdItfReq+0x7a>
          break;
 80079c4:	bf00      	nop
      }
      break;
 80079c6:	e004      	b.n	80079d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fc7b 	bl	80082c6 <USBD_CtlError>
      break;
 80079d0:	bf00      	nop
  }

  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	889b      	ldrh	r3, [r3, #4]
 80079ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079f8:	2b40      	cmp	r3, #64	@ 0x40
 80079fa:	d007      	beq.n	8007a0c <USBD_StdEPReq+0x30>
 80079fc:	2b40      	cmp	r3, #64	@ 0x40
 80079fe:	f200 8146 	bhi.w	8007c8e <USBD_StdEPReq+0x2b2>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <USBD_StdEPReq+0x40>
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	f040 8141 	bne.w	8007c8e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
      break;
 8007a1a:	e13d      	b.n	8007c98 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d10a      	bne.n	8007a3e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	4798      	blx	r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	e12d      	b.n	8007c9a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d007      	beq.n	8007a56 <USBD_StdEPReq+0x7a>
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	f300 811b 	bgt.w	8007c82 <USBD_StdEPReq+0x2a6>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d072      	beq.n	8007b36 <USBD_StdEPReq+0x15a>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d03a      	beq.n	8007aca <USBD_StdEPReq+0xee>
 8007a54:	e115      	b.n	8007c82 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d002      	beq.n	8007a66 <USBD_StdEPReq+0x8a>
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d015      	beq.n	8007a90 <USBD_StdEPReq+0xb4>
 8007a64:	e02b      	b.n	8007abe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00c      	beq.n	8007a86 <USBD_StdEPReq+0xaa>
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b80      	cmp	r3, #128	@ 0x80
 8007a70:	d009      	beq.n	8007a86 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f8aa 	bl	8008bd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a7c:	2180      	movs	r1, #128	@ 0x80
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 f8a6 	bl	8008bd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a84:	e020      	b.n	8007ac8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fc1c 	bl	80082c6 <USBD_CtlError>
              break;
 8007a8e:	e01b      	b.n	8007ac8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	885b      	ldrh	r3, [r3, #2]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10e      	bne.n	8007ab6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <USBD_StdEPReq+0xda>
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b80      	cmp	r3, #128	@ 0x80
 8007aa2:	d008      	beq.n	8007ab6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	88db      	ldrh	r3, [r3, #6]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 f88d 	bl	8008bd0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fcce 	bl	8008458 <USBD_CtlSendStatus>

              break;
 8007abc:	e004      	b.n	8007ac8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fc00 	bl	80082c6 <USBD_CtlError>
              break;
 8007ac6:	bf00      	nop
          }
          break;
 8007ac8:	e0e0      	b.n	8007c8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d002      	beq.n	8007ada <USBD_StdEPReq+0xfe>
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d015      	beq.n	8007b04 <USBD_StdEPReq+0x128>
 8007ad8:	e026      	b.n	8007b28 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00c      	beq.n	8007afa <USBD_StdEPReq+0x11e>
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b80      	cmp	r3, #128	@ 0x80
 8007ae4:	d009      	beq.n	8007afa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 f870 	bl	8008bd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007af0:	2180      	movs	r1, #128	@ 0x80
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 f86c 	bl	8008bd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af8:	e01c      	b.n	8007b34 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fbe2 	bl	80082c6 <USBD_CtlError>
              break;
 8007b02:	e017      	b.n	8007b34 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	885b      	ldrh	r3, [r3, #2]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d112      	bne.n	8007b32 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f877 	bl	8008c0e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fc99 	bl	8008458 <USBD_CtlSendStatus>
              }
              break;
 8007b26:	e004      	b.n	8007b32 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fbcb 	bl	80082c6 <USBD_CtlError>
              break;
 8007b30:	e000      	b.n	8007b34 <USBD_StdEPReq+0x158>
              break;
 8007b32:	bf00      	nop
          }
          break;
 8007b34:	e0aa      	b.n	8007c8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d002      	beq.n	8007b46 <USBD_StdEPReq+0x16a>
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d032      	beq.n	8007baa <USBD_StdEPReq+0x1ce>
 8007b44:	e097      	b.n	8007c76 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d007      	beq.n	8007b5c <USBD_StdEPReq+0x180>
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b80      	cmp	r3, #128	@ 0x80
 8007b50:	d004      	beq.n	8007b5c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fbb6 	bl	80082c6 <USBD_CtlError>
                break;
 8007b5a:	e091      	b.n	8007c80 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da0b      	bge.n	8007b7c <USBD_StdEPReq+0x1a0>
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	3310      	adds	r3, #16
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	4413      	add	r3, r2
 8007b78:	3304      	adds	r3, #4
 8007b7a:	e00b      	b.n	8007b94 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	4413      	add	r3, r2
 8007b92:	3304      	adds	r3, #4
 8007b94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fbfa 	bl	800839c <USBD_CtlSendData>
              break;
 8007ba8:	e06a      	b.n	8007c80 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007baa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da11      	bge.n	8007bd6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	f003 020f 	and.w	r2, r3, #15
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d117      	bne.n	8007bfc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fb79 	bl	80082c6 <USBD_CtlError>
                  break;
 8007bd4:	e054      	b.n	8007c80 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	f003 020f 	and.w	r2, r3, #15
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d104      	bne.n	8007bfc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fb66 	bl	80082c6 <USBD_CtlError>
                  break;
 8007bfa:	e041      	b.n	8007c80 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	da0b      	bge.n	8007c1c <USBD_StdEPReq+0x240>
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	3310      	adds	r3, #16
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	4413      	add	r3, r2
 8007c18:	3304      	adds	r3, #4
 8007c1a:	e00b      	b.n	8007c34 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	3304      	adds	r3, #4
 8007c34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <USBD_StdEPReq+0x266>
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	2b80      	cmp	r3, #128	@ 0x80
 8007c40:	d103      	bne.n	8007c4a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	e00e      	b.n	8007c68 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fffc 	bl	8008c4c <USBD_LL_IsStallEP>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e002      	b.n	8007c68 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb94 	bl	800839c <USBD_CtlSendData>
              break;
 8007c74:	e004      	b.n	8007c80 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fb24 	bl	80082c6 <USBD_CtlError>
              break;
 8007c7e:	bf00      	nop
          }
          break;
 8007c80:	e004      	b.n	8007c8c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fb1e 	bl	80082c6 <USBD_CtlError>
          break;
 8007c8a:	bf00      	nop
      }
      break;
 8007c8c:	e004      	b.n	8007c98 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fb18 	bl	80082c6 <USBD_CtlError>
      break;
 8007c96:	bf00      	nop
  }

  return ret;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	885b      	ldrh	r3, [r3, #2]
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b06      	cmp	r3, #6
 8007cc6:	f200 8128 	bhi.w	8007f1a <USBD_GetDescriptor+0x276>
 8007cca:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd0 <USBD_GetDescriptor+0x2c>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007ced 	.word	0x08007ced
 8007cd4:	08007d05 	.word	0x08007d05
 8007cd8:	08007d45 	.word	0x08007d45
 8007cdc:	08007f1b 	.word	0x08007f1b
 8007ce0:	08007f1b 	.word	0x08007f1b
 8007ce4:	08007ebb 	.word	0x08007ebb
 8007ce8:	08007ee7 	.word	0x08007ee7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7c12      	ldrb	r2, [r2, #16]
 8007cf8:	f107 0108 	add.w	r1, r7, #8
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
      break;
 8007d02:	e112      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	7c1b      	ldrb	r3, [r3, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10d      	bne.n	8007d28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d14:	f107 0208 	add.w	r2, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3301      	adds	r3, #1
 8007d22:	2202      	movs	r2, #2
 8007d24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d26:	e100      	b.n	8007f2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	f107 0208 	add.w	r2, r7, #8
 8007d34:	4610      	mov	r0, r2
 8007d36:	4798      	blx	r3
 8007d38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	2202      	movs	r2, #2
 8007d40:	701a      	strb	r2, [r3, #0]
      break;
 8007d42:	e0f2      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	885b      	ldrh	r3, [r3, #2]
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b05      	cmp	r3, #5
 8007d4c:	f200 80ac 	bhi.w	8007ea8 <USBD_GetDescriptor+0x204>
 8007d50:	a201      	add	r2, pc, #4	@ (adr r2, 8007d58 <USBD_GetDescriptor+0xb4>)
 8007d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d56:	bf00      	nop
 8007d58:	08007d71 	.word	0x08007d71
 8007d5c:	08007da5 	.word	0x08007da5
 8007d60:	08007dd9 	.word	0x08007dd9
 8007d64:	08007e0d 	.word	0x08007e0d
 8007d68:	08007e41 	.word	0x08007e41
 8007d6c:	08007e75 	.word	0x08007e75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	7c12      	ldrb	r2, [r2, #16]
 8007d88:	f107 0108 	add.w	r1, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d92:	e091      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa95 	bl	80082c6 <USBD_CtlError>
            err++;
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	72fb      	strb	r3, [r7, #11]
          break;
 8007da2:	e089      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7c12      	ldrb	r2, [r2, #16]
 8007dbc:	f107 0108 	add.w	r1, r7, #8
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dc6:	e077      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa7b 	bl	80082c6 <USBD_CtlError>
            err++;
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007dd6:	e06f      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7c12      	ldrb	r2, [r2, #16]
 8007df0:	f107 0108 	add.w	r1, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfa:	e05d      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa61 	bl	80082c6 <USBD_CtlError>
            err++;
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	3301      	adds	r3, #1
 8007e08:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0a:	e055      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	7c12      	ldrb	r2, [r2, #16]
 8007e24:	f107 0108 	add.w	r1, r7, #8
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
 8007e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e2e:	e043      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa47 	bl	80082c6 <USBD_CtlError>
            err++;
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e3e:	e03b      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	7c12      	ldrb	r2, [r2, #16]
 8007e58:	f107 0108 	add.w	r1, r7, #8
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4798      	blx	r3
 8007e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e62:	e029      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa2d 	bl	80082c6 <USBD_CtlError>
            err++;
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	72fb      	strb	r3, [r7, #11]
          break;
 8007e72:	e021      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00b      	beq.n	8007e98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	7c12      	ldrb	r2, [r2, #16]
 8007e8c:	f107 0108 	add.w	r1, r7, #8
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e96:	e00f      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fa13 	bl	80082c6 <USBD_CtlError>
            err++;
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ea6:	e007      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa0b 	bl	80082c6 <USBD_CtlError>
          err++;
 8007eb0:	7afb      	ldrb	r3, [r7, #11]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007eb6:	e038      	b.n	8007f2a <USBD_GetDescriptor+0x286>
 8007eb8:	e037      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	7c1b      	ldrb	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eca:	f107 0208 	add.w	r2, r7, #8
 8007ece:	4610      	mov	r0, r2
 8007ed0:	4798      	blx	r3
 8007ed2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ed4:	e029      	b.n	8007f2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9f4 	bl	80082c6 <USBD_CtlError>
        err++;
 8007ede:	7afb      	ldrb	r3, [r7, #11]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee4:	e021      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	7c1b      	ldrb	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10d      	bne.n	8007f0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef6:	f107 0208 	add.w	r2, r7, #8
 8007efa:	4610      	mov	r0, r2
 8007efc:	4798      	blx	r3
 8007efe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3301      	adds	r3, #1
 8007f04:	2207      	movs	r2, #7
 8007f06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f08:	e00f      	b.n	8007f2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f9da 	bl	80082c6 <USBD_CtlError>
        err++;
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	3301      	adds	r3, #1
 8007f16:	72fb      	strb	r3, [r7, #11]
      break;
 8007f18:	e007      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f9d2 	bl	80082c6 <USBD_CtlError>
      err++;
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	3301      	adds	r3, #1
 8007f26:	72fb      	strb	r3, [r7, #11]
      break;
 8007f28:	bf00      	nop
  }

  if (err != 0U)
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d11c      	bne.n	8007f6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f30:	893b      	ldrh	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d011      	beq.n	8007f5a <USBD_GetDescriptor+0x2b6>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	88db      	ldrh	r3, [r3, #6]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00d      	beq.n	8007f5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	88da      	ldrh	r2, [r3, #6]
 8007f42:	893b      	ldrh	r3, [r7, #8]
 8007f44:	4293      	cmp	r3, r2
 8007f46:	bf28      	it	cs
 8007f48:	4613      	movcs	r3, r2
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f4e:	893b      	ldrh	r3, [r7, #8]
 8007f50:	461a      	mov	r2, r3
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fa21 	bl	800839c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	88db      	ldrh	r3, [r3, #6]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa78 	bl	8008458 <USBD_CtlSendStatus>
 8007f68:	e000      	b.n	8007f6c <USBD_GetDescriptor+0x2c8>
    return;
 8007f6a:	bf00      	nop
    }
  }
}
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop

08007f74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	889b      	ldrh	r3, [r3, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d130      	bne.n	8007fe8 <USBD_SetAddress+0x74>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	88db      	ldrh	r3, [r3, #6]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d12c      	bne.n	8007fe8 <USBD_SetAddress+0x74>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	885b      	ldrh	r3, [r3, #2]
 8007f92:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f94:	d828      	bhi.n	8007fe8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d104      	bne.n	8007fb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f989 	bl	80082c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb4:	e01d      	b.n	8007ff2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	7bfa      	ldrb	r2, [r7, #15]
 8007fba:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fe6e 	bl	8008ca4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa45 	bl	8008458 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d004      	beq.n	8007fde <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fdc:	e009      	b.n	8007ff2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	e004      	b.n	8007ff2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f96b 	bl	80082c6 <USBD_CtlError>
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	885b      	ldrh	r3, [r3, #2]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	4b41      	ldr	r3, [pc, #260]	@ (8008114 <USBD_SetConfig+0x118>)
 800800e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008010:	4b40      	ldr	r3, [pc, #256]	@ (8008114 <USBD_SetConfig+0x118>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d904      	bls.n	8008022 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f953 	bl	80082c6 <USBD_CtlError>
 8008020:	e075      	b.n	800810e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008028:	2b02      	cmp	r3, #2
 800802a:	d002      	beq.n	8008032 <USBD_SetConfig+0x36>
 800802c:	2b03      	cmp	r3, #3
 800802e:	d023      	beq.n	8008078 <USBD_SetConfig+0x7c>
 8008030:	e062      	b.n	80080f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008032:	4b38      	ldr	r3, [pc, #224]	@ (8008114 <USBD_SetConfig+0x118>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01a      	beq.n	8008070 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800803a:	4b36      	ldr	r3, [pc, #216]	@ (8008114 <USBD_SetConfig+0x118>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2203      	movs	r2, #3
 8008048:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800804c:	4b31      	ldr	r3, [pc, #196]	@ (8008114 <USBD_SetConfig+0x118>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff f9e4 	bl	8007420 <USBD_SetClassConfig>
 8008058:	4603      	mov	r3, r0
 800805a:	2b02      	cmp	r3, #2
 800805c:	d104      	bne.n	8008068 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f930 	bl	80082c6 <USBD_CtlError>
            return;
 8008066:	e052      	b.n	800810e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f9f5 	bl	8008458 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800806e:	e04e      	b.n	800810e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f9f1 	bl	8008458 <USBD_CtlSendStatus>
        break;
 8008076:	e04a      	b.n	800810e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008078:	4b26      	ldr	r3, [pc, #152]	@ (8008114 <USBD_SetConfig+0x118>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d112      	bne.n	80080a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008088:	4b22      	ldr	r3, [pc, #136]	@ (8008114 <USBD_SetConfig+0x118>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008092:	4b20      	ldr	r3, [pc, #128]	@ (8008114 <USBD_SetConfig+0x118>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff f9e0 	bl	800745e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f9da 	bl	8008458 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080a4:	e033      	b.n	800810e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80080a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008114 <USBD_SetConfig+0x118>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d01d      	beq.n	80080f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff f9ce 	bl	800745e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80080c2:	4b14      	ldr	r3, [pc, #80]	@ (8008114 <USBD_SetConfig+0x118>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080cc:	4b11      	ldr	r3, [pc, #68]	@ (8008114 <USBD_SetConfig+0x118>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff f9a4 	bl	8007420 <USBD_SetClassConfig>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d104      	bne.n	80080e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f8f0 	bl	80082c6 <USBD_CtlError>
            return;
 80080e6:	e012      	b.n	800810e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9b5 	bl	8008458 <USBD_CtlSendStatus>
        break;
 80080ee:	e00e      	b.n	800810e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f9b1 	bl	8008458 <USBD_CtlSendStatus>
        break;
 80080f6:	e00a      	b.n	800810e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f8e3 	bl	80082c6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008100:	4b04      	ldr	r3, [pc, #16]	@ (8008114 <USBD_SetConfig+0x118>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff f9a9 	bl	800745e <USBD_ClrClassConfig>
        break;
 800810c:	bf00      	nop
    }
  }
}
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	2000021c 	.word	0x2000021c

08008118 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d004      	beq.n	8008134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f8ca 	bl	80082c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008132:	e022      	b.n	800817a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800813a:	2b02      	cmp	r3, #2
 800813c:	dc02      	bgt.n	8008144 <USBD_GetConfig+0x2c>
 800813e:	2b00      	cmp	r3, #0
 8008140:	dc03      	bgt.n	800814a <USBD_GetConfig+0x32>
 8008142:	e015      	b.n	8008170 <USBD_GetConfig+0x58>
 8008144:	2b03      	cmp	r3, #3
 8008146:	d00b      	beq.n	8008160 <USBD_GetConfig+0x48>
 8008148:	e012      	b.n	8008170 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3308      	adds	r3, #8
 8008154:	2201      	movs	r2, #1
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f91f 	bl	800839c <USBD_CtlSendData>
        break;
 800815e:	e00c      	b.n	800817a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3304      	adds	r3, #4
 8008164:	2201      	movs	r2, #1
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f917 	bl	800839c <USBD_CtlSendData>
        break;
 800816e:	e004      	b.n	800817a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8a7 	bl	80082c6 <USBD_CtlError>
        break;
 8008178:	bf00      	nop
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008192:	3b01      	subs	r3, #1
 8008194:	2b02      	cmp	r3, #2
 8008196:	d81e      	bhi.n	80081d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	88db      	ldrh	r3, [r3, #6]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d004      	beq.n	80081aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f88f 	bl	80082c6 <USBD_CtlError>
        break;
 80081a8:	e01a      	b.n	80081e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f043 0202 	orr.w	r2, r3, #2
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	330c      	adds	r3, #12
 80081ca:	2202      	movs	r2, #2
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f8e4 	bl	800839c <USBD_CtlSendData>
      break;
 80081d4:	e004      	b.n	80081e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f874 	bl	80082c6 <USBD_CtlError>
      break;
 80081de:	bf00      	nop
  }
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d106      	bne.n	8008208 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f928 	bl	8008458 <USBD_CtlSendStatus>
  }
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008220:	3b01      	subs	r3, #1
 8008222:	2b02      	cmp	r3, #2
 8008224:	d80b      	bhi.n	800823e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d10c      	bne.n	8008248 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f90e 	bl	8008458 <USBD_CtlSendStatus>
      }
      break;
 800823c:	e004      	b.n	8008248 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f840 	bl	80082c6 <USBD_CtlError>
      break;
 8008246:	e000      	b.n	800824a <USBD_ClrFeature+0x3a>
      break;
 8008248:	bf00      	nop
  }
}
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781a      	ldrb	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	785a      	ldrb	r2, [r3, #1]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	3302      	adds	r3, #2
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	3303      	adds	r3, #3
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	b29b      	uxth	r3, r3
 800827e:	4413      	add	r3, r2
 8008280:	b29a      	uxth	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	3304      	adds	r3, #4
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	3305      	adds	r3, #5
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	b29b      	uxth	r3, r3
 8008298:	4413      	add	r3, r2
 800829a:	b29a      	uxth	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	3306      	adds	r3, #6
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	3307      	adds	r3, #7
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	4413      	add	r3, r2
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	80da      	strh	r2, [r3, #6]

}
 80082ba:	bf00      	nop
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80082d0:	2180      	movs	r1, #128	@ 0x80
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fc7c 	bl	8008bd0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80082d8:	2100      	movs	r1, #0
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fc78 	bl	8008bd0 <USBD_LL_StallEP>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d032      	beq.n	8008364 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 f834 	bl	800836c <USBD_GetLen>
 8008304:	4603      	mov	r3, r0
 8008306:	3301      	adds	r3, #1
 8008308:	b29b      	uxth	r3, r3
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	b29a      	uxth	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	75fa      	strb	r2, [r7, #23]
 8008318:	461a      	mov	r2, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	7812      	ldrb	r2, [r2, #0]
 8008322:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	75fa      	strb	r2, [r7, #23]
 800832a:	461a      	mov	r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	4413      	add	r3, r2
 8008330:	2203      	movs	r2, #3
 8008332:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008334:	e012      	b.n	800835c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	60fa      	str	r2, [r7, #12]
 800833c:	7dfa      	ldrb	r2, [r7, #23]
 800833e:	1c51      	adds	r1, r2, #1
 8008340:	75f9      	strb	r1, [r7, #23]
 8008342:	4611      	mov	r1, r2
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	440a      	add	r2, r1
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	75fa      	strb	r2, [r7, #23]
 8008352:	461a      	mov	r2, r3
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4413      	add	r3, r2
 8008358:	2200      	movs	r2, #0
 800835a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e8      	bne.n	8008336 <USBD_GetString+0x4e>
    }
  }
}
 8008364:	bf00      	nop
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008378:	e005      	b.n	8008386 <USBD_GetLen+0x1a>
  {
    len++;
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	3301      	adds	r3, #1
 800837e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3301      	adds	r3, #1
 8008384:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f5      	bne.n	800837a <USBD_GetLen+0xe>
  }

  return len;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	4613      	mov	r3, r2
 80083a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2202      	movs	r2, #2
 80083ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80083b2:	88fa      	ldrh	r2, [r7, #6]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80083b8:	88fa      	ldrh	r2, [r7, #6]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083be:	88fb      	ldrh	r3, [r7, #6]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	2100      	movs	r1, #0
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fc8c 	bl	8008ce2 <USBD_LL_Transmit>

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	2100      	movs	r1, #0
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fc7a 	bl	8008ce2 <USBD_LL_Transmit>

  return USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2203      	movs	r2, #3
 800840a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800840e:	88fa      	ldrh	r2, [r7, #6]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008416:	88fa      	ldrh	r2, [r7, #6]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	2100      	movs	r1, #0
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 fc7f 	bl	8008d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	2100      	movs	r1, #0
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 fc6d 	bl	8008d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2204      	movs	r2, #4
 8008464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008468:	2300      	movs	r3, #0
 800846a:	2200      	movs	r2, #0
 800846c:	2100      	movs	r1, #0
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fc37 	bl	8008ce2 <USBD_LL_Transmit>

  return USBD_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2205      	movs	r2, #5
 800848a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800848e:	2300      	movs	r3, #0
 8008490:	2200      	movs	r2, #0
 8008492:	2100      	movs	r1, #0
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fc47 	bl	8008d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084a8:	2200      	movs	r2, #0
 80084aa:	4912      	ldr	r1, [pc, #72]	@ (80084f4 <MX_USB_DEVICE_Init+0x50>)
 80084ac:	4812      	ldr	r0, [pc, #72]	@ (80084f8 <MX_USB_DEVICE_Init+0x54>)
 80084ae:	f7fe ff5b 	bl	8007368 <USBD_Init>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084b8:	f7f8 f914 	bl	80006e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084bc:	490f      	ldr	r1, [pc, #60]	@ (80084fc <MX_USB_DEVICE_Init+0x58>)
 80084be:	480e      	ldr	r0, [pc, #56]	@ (80084f8 <MX_USB_DEVICE_Init+0x54>)
 80084c0:	f7fe ff7d 	bl	80073be <USBD_RegisterClass>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084ca:	f7f8 f90b 	bl	80006e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084ce:	490c      	ldr	r1, [pc, #48]	@ (8008500 <MX_USB_DEVICE_Init+0x5c>)
 80084d0:	4809      	ldr	r0, [pc, #36]	@ (80084f8 <MX_USB_DEVICE_Init+0x54>)
 80084d2:	f7fe feab 	bl	800722c <USBD_CDC_RegisterInterface>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084dc:	f7f8 f902 	bl	80006e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084e0:	4805      	ldr	r0, [pc, #20]	@ (80084f8 <MX_USB_DEVICE_Init+0x54>)
 80084e2:	f7fe ff86 	bl	80073f2 <USBD_Start>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084ec:	f7f8 f8fa 	bl	80006e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084f0:	bf00      	nop
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	2000012c 	.word	0x2000012c
 80084f8:	20000220 	.word	0x20000220
 80084fc:	20000018 	.word	0x20000018
 8008500:	2000011c 	.word	0x2000011c

08008504 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008508:	2200      	movs	r2, #0
 800850a:	4905      	ldr	r1, [pc, #20]	@ (8008520 <CDC_Init_FS+0x1c>)
 800850c:	4805      	ldr	r0, [pc, #20]	@ (8008524 <CDC_Init_FS+0x20>)
 800850e:	f7fe fea4 	bl	800725a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008512:	4905      	ldr	r1, [pc, #20]	@ (8008528 <CDC_Init_FS+0x24>)
 8008514:	4803      	ldr	r0, [pc, #12]	@ (8008524 <CDC_Init_FS+0x20>)
 8008516:	f7fe feba 	bl	800728e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800851a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800851c:	4618      	mov	r0, r3
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20000524 	.word	0x20000524
 8008524:	20000220 	.word	0x20000220
 8008528:	200004e4 	.word	0x200004e4

0800852c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008530:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008532:	4618      	mov	r0, r3
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	6039      	str	r1, [r7, #0]
 8008546:	71fb      	strb	r3, [r7, #7]
 8008548:	4613      	mov	r3, r2
 800854a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	2b23      	cmp	r3, #35	@ 0x23
 8008550:	d84a      	bhi.n	80085e8 <CDC_Control_FS+0xac>
 8008552:	a201      	add	r2, pc, #4	@ (adr r2, 8008558 <CDC_Control_FS+0x1c>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	080085e9 	.word	0x080085e9
 800855c:	080085e9 	.word	0x080085e9
 8008560:	080085e9 	.word	0x080085e9
 8008564:	080085e9 	.word	0x080085e9
 8008568:	080085e9 	.word	0x080085e9
 800856c:	080085e9 	.word	0x080085e9
 8008570:	080085e9 	.word	0x080085e9
 8008574:	080085e9 	.word	0x080085e9
 8008578:	080085e9 	.word	0x080085e9
 800857c:	080085e9 	.word	0x080085e9
 8008580:	080085e9 	.word	0x080085e9
 8008584:	080085e9 	.word	0x080085e9
 8008588:	080085e9 	.word	0x080085e9
 800858c:	080085e9 	.word	0x080085e9
 8008590:	080085e9 	.word	0x080085e9
 8008594:	080085e9 	.word	0x080085e9
 8008598:	080085e9 	.word	0x080085e9
 800859c:	080085e9 	.word	0x080085e9
 80085a0:	080085e9 	.word	0x080085e9
 80085a4:	080085e9 	.word	0x080085e9
 80085a8:	080085e9 	.word	0x080085e9
 80085ac:	080085e9 	.word	0x080085e9
 80085b0:	080085e9 	.word	0x080085e9
 80085b4:	080085e9 	.word	0x080085e9
 80085b8:	080085e9 	.word	0x080085e9
 80085bc:	080085e9 	.word	0x080085e9
 80085c0:	080085e9 	.word	0x080085e9
 80085c4:	080085e9 	.word	0x080085e9
 80085c8:	080085e9 	.word	0x080085e9
 80085cc:	080085e9 	.word	0x080085e9
 80085d0:	080085e9 	.word	0x080085e9
 80085d4:	080085e9 	.word	0x080085e9
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	080085e9 	.word	0x080085e9
 80085e0:	080085e9 	.word	0x080085e9
 80085e4:	080085e9 	.word	0x080085e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085e8:	bf00      	nop
  }

  return (USBD_OK);
 80085ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	4805      	ldr	r0, [pc, #20]	@ (800861c <CDC_Receive_FS+0x24>)
 8008606:	f7fe fe42 	bl	800728e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800860a:	4804      	ldr	r0, [pc, #16]	@ (800861c <CDC_Receive_FS+0x24>)
 800860c:	f7fe fe82 	bl	8007314 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008610:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20000220 	.word	0x20000220

08008620 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008630:	4b0d      	ldr	r3, [pc, #52]	@ (8008668 <CDC_Transmit_FS+0x48>)
 8008632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008636:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008642:	2301      	movs	r3, #1
 8008644:	e00b      	b.n	800865e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008646:	887b      	ldrh	r3, [r7, #2]
 8008648:	461a      	mov	r2, r3
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4806      	ldr	r0, [pc, #24]	@ (8008668 <CDC_Transmit_FS+0x48>)
 800864e:	f7fe fe04 	bl	800725a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008652:	4805      	ldr	r0, [pc, #20]	@ (8008668 <CDC_Transmit_FS+0x48>)
 8008654:	f7fe fe2f 	bl	80072b6 <USBD_CDC_TransmitPacket>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000220 	.word	0x20000220

0800866c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	6039      	str	r1, [r7, #0]
 8008676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2212      	movs	r2, #18
 800867c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800867e:	4b03      	ldr	r3, [pc, #12]	@ (800868c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008680:	4618      	mov	r0, r3
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	20000148 	.word	0x20000148

08008690 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	6039      	str	r1, [r7, #0]
 800869a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2204      	movs	r2, #4
 80086a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086a2:	4b03      	ldr	r3, [pc, #12]	@ (80086b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	2000015c 	.word	0x2000015c

080086b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d105      	bne.n	80086d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	4907      	ldr	r1, [pc, #28]	@ (80086e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80086ca:	4808      	ldr	r0, [pc, #32]	@ (80086ec <USBD_FS_ProductStrDescriptor+0x38>)
 80086cc:	f7ff fe0c 	bl	80082e8 <USBD_GetString>
 80086d0:	e004      	b.n	80086dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	4904      	ldr	r1, [pc, #16]	@ (80086e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80086d6:	4805      	ldr	r0, [pc, #20]	@ (80086ec <USBD_FS_ProductStrDescriptor+0x38>)
 80086d8:	f7ff fe06 	bl	80082e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086dc:	4b02      	ldr	r3, [pc, #8]	@ (80086e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20000564 	.word	0x20000564
 80086ec:	08009854 	.word	0x08009854

080086f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	4904      	ldr	r1, [pc, #16]	@ (8008710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008700:	4804      	ldr	r0, [pc, #16]	@ (8008714 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008702:	f7ff fdf1 	bl	80082e8 <USBD_GetString>
  return USBD_StrDesc;
 8008706:	4b02      	ldr	r3, [pc, #8]	@ (8008710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000564 	.word	0x20000564
 8008714:	0800986c 	.word	0x0800986c

08008718 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	221a      	movs	r2, #26
 8008728:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800872a:	f000 f843 	bl	80087b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800872e:	4b02      	ldr	r3, [pc, #8]	@ (8008738 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008730:	4618      	mov	r0, r3
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20000160 	.word	0x20000160

0800873c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	6039      	str	r1, [r7, #0]
 8008746:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4907      	ldr	r1, [pc, #28]	@ (8008770 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008752:	4808      	ldr	r0, [pc, #32]	@ (8008774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008754:	f7ff fdc8 	bl	80082e8 <USBD_GetString>
 8008758:	e004      	b.n	8008764 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4904      	ldr	r1, [pc, #16]	@ (8008770 <USBD_FS_ConfigStrDescriptor+0x34>)
 800875e:	4805      	ldr	r0, [pc, #20]	@ (8008774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008760:	f7ff fdc2 	bl	80082e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008764:	4b02      	ldr	r3, [pc, #8]	@ (8008770 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000564 	.word	0x20000564
 8008774:	08009880 	.word	0x08009880

08008778 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	4907      	ldr	r1, [pc, #28]	@ (80087ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800878e:	4808      	ldr	r0, [pc, #32]	@ (80087b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008790:	f7ff fdaa 	bl	80082e8 <USBD_GetString>
 8008794:	e004      	b.n	80087a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	4904      	ldr	r1, [pc, #16]	@ (80087ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800879a:	4805      	ldr	r0, [pc, #20]	@ (80087b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800879c:	f7ff fda4 	bl	80082e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087a0:	4b02      	ldr	r3, [pc, #8]	@ (80087ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000564 	.word	0x20000564
 80087b0:	0800988c 	.word	0x0800988c

080087b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087ba:	4b0f      	ldr	r3, [pc, #60]	@ (80087f8 <Get_SerialNum+0x44>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087c0:	4b0e      	ldr	r3, [pc, #56]	@ (80087fc <Get_SerialNum+0x48>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008800 <Get_SerialNum+0x4c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4413      	add	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d009      	beq.n	80087ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087da:	2208      	movs	r2, #8
 80087dc:	4909      	ldr	r1, [pc, #36]	@ (8008804 <Get_SerialNum+0x50>)
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 f814 	bl	800880c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087e4:	2204      	movs	r2, #4
 80087e6:	4908      	ldr	r1, [pc, #32]	@ (8008808 <Get_SerialNum+0x54>)
 80087e8:	68b8      	ldr	r0, [r7, #8]
 80087ea:	f000 f80f 	bl	800880c <IntToUnicode>
  }
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	1ffff7ac 	.word	0x1ffff7ac
 80087fc:	1ffff7b0 	.word	0x1ffff7b0
 8008800:	1ffff7b4 	.word	0x1ffff7b4
 8008804:	20000162 	.word	0x20000162
 8008808:	20000172 	.word	0x20000172

0800880c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800881e:	2300      	movs	r3, #0
 8008820:	75fb      	strb	r3, [r7, #23]
 8008822:	e027      	b.n	8008874 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	0f1b      	lsrs	r3, r3, #28
 8008828:	2b09      	cmp	r3, #9
 800882a:	d80b      	bhi.n	8008844 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	0f1b      	lsrs	r3, r3, #28
 8008830:	b2da      	uxtb	r2, r3
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	4619      	mov	r1, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	440b      	add	r3, r1
 800883c:	3230      	adds	r2, #48	@ 0x30
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	e00a      	b.n	800885a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	0f1b      	lsrs	r3, r3, #28
 8008848:	b2da      	uxtb	r2, r3
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	4619      	mov	r1, r3
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	440b      	add	r3, r1
 8008854:	3237      	adds	r2, #55	@ 0x37
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	3301      	adds	r3, #1
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	4413      	add	r3, r2
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	3301      	adds	r3, #1
 8008872:	75fb      	strb	r3, [r7, #23]
 8008874:	7dfa      	ldrb	r2, [r7, #23]
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	429a      	cmp	r2, r3
 800887a:	d3d3      	bcc.n	8008824 <IntToUnicode+0x18>
  }
}
 800887c:	bf00      	nop
 800887e:	bf00      	nop
 8008880:	371c      	adds	r7, #28
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
	...

0800888c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08a      	sub	sp, #40	@ 0x28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008894:	f107 0314 	add.w	r3, r7, #20
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	605a      	str	r2, [r3, #4]
 800889e:	609a      	str	r2, [r3, #8]
 80088a0:	60da      	str	r2, [r3, #12]
 80088a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a1c      	ldr	r2, [pc, #112]	@ (800891c <HAL_PCD_MspInit+0x90>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d131      	bne.n	8008912 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ae:	4b1c      	ldr	r3, [pc, #112]	@ (8008920 <HAL_PCD_MspInit+0x94>)
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008920 <HAL_PCD_MspInit+0x94>)
 80088b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088b8:	6153      	str	r3, [r2, #20]
 80088ba:	4b19      	ldr	r3, [pc, #100]	@ (8008920 <HAL_PCD_MspInit+0x94>)
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80088c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80088ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088cc:	2302      	movs	r3, #2
 80088ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80088d4:	2303      	movs	r3, #3
 80088d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80088d8:	230e      	movs	r3, #14
 80088da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088dc:	f107 0314 	add.w	r3, r7, #20
 80088e0:	4619      	mov	r1, r3
 80088e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80088e6:	f7f8 f99b 	bl	8000c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80088ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008920 <HAL_PCD_MspInit+0x94>)
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008920 <HAL_PCD_MspInit+0x94>)
 80088f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088f4:	61d3      	str	r3, [r2, #28]
 80088f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008920 <HAL_PCD_MspInit+0x94>)
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	2014      	movs	r0, #20
 8008908:	f7f8 f953 	bl	8000bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800890c:	2014      	movs	r0, #20
 800890e:	f7f8 f96c 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008912:	bf00      	nop
 8008914:	3728      	adds	r7, #40	@ 0x28
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40005c00 	.word	0x40005c00
 8008920:	40021000 	.word	0x40021000

08008924 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008938:	4619      	mov	r1, r3
 800893a:	4610      	mov	r0, r2
 800893c:	f7fe fda2 	bl	8007484 <USBD_LL_SetupStage>
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	440b      	add	r3, r1
 8008968:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	4619      	mov	r1, r3
 8008972:	f7fe fdd4 	bl	800751e <USBD_LL_DataOutStage>
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	440b      	add	r3, r1
 800899e:	3324      	adds	r3, #36	@ 0x24
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	78fb      	ldrb	r3, [r7, #3]
 80089a4:	4619      	mov	r1, r3
 80089a6:	f7fe fe2b 	bl	8007600 <USBD_LL_DataInStage>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe ff3e 	bl	8007842 <USBD_LL_SOF>
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089d6:	2301      	movs	r3, #1
 80089d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	795b      	ldrb	r3, [r3, #5]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d001      	beq.n	80089e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089e2:	f7f7 fe7f 	bl	80006e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80089ec:	7bfa      	ldrb	r2, [r7, #15]
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe feeb 	bl	80077cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe fea4 	bl	800774a <USBD_LL_Reset>
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fee6 	bl	80077ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	7a5b      	ldrb	r3, [r3, #9]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a28:	4b04      	ldr	r3, [pc, #16]	@ (8008a3c <HAL_PCD_SuspendCallback+0x30>)
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	4a03      	ldr	r2, [pc, #12]	@ (8008a3c <HAL_PCD_SuspendCallback+0x30>)
 8008a2e:	f043 0306 	orr.w	r3, r3, #6
 8008a32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	e000ed00 	.word	0xe000ed00

08008a40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fee1 	bl	8007816 <USBD_LL_Resume>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a64:	4a28      	ldr	r2, [pc, #160]	@ (8008b08 <USBD_LL_Init+0xac>)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a26      	ldr	r2, [pc, #152]	@ (8008b08 <USBD_LL_Init+0xac>)
 8008a70:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008a74:	4b24      	ldr	r3, [pc, #144]	@ (8008b08 <USBD_LL_Init+0xac>)
 8008a76:	4a25      	ldr	r2, [pc, #148]	@ (8008b0c <USBD_LL_Init+0xb0>)
 8008a78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a7a:	4b23      	ldr	r3, [pc, #140]	@ (8008b08 <USBD_LL_Init+0xac>)
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a80:	4b21      	ldr	r3, [pc, #132]	@ (8008b08 <USBD_LL_Init+0xac>)
 8008a82:	2202      	movs	r2, #2
 8008a84:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a86:	4b20      	ldr	r3, [pc, #128]	@ (8008b08 <USBD_LL_Init+0xac>)
 8008a88:	2202      	movs	r2, #2
 8008a8a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8008b08 <USBD_LL_Init+0xac>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a92:	4b1d      	ldr	r3, [pc, #116]	@ (8008b08 <USBD_LL_Init+0xac>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a98:	481b      	ldr	r0, [pc, #108]	@ (8008b08 <USBD_LL_Init+0xac>)
 8008a9a:	f7f8 fa83 	bl	8000fa4 <HAL_PCD_Init>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008aa4:	f7f7 fe1e 	bl	80006e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008aae:	2318      	movs	r3, #24
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	f7f9 fefc 	bl	80028b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008abe:	2358      	movs	r3, #88	@ 0x58
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2180      	movs	r1, #128	@ 0x80
 8008ac4:	f7f9 fef4 	bl	80028b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ace:	23c0      	movs	r3, #192	@ 0xc0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2181      	movs	r1, #129	@ 0x81
 8008ad4:	f7f9 feec 	bl	80028b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ade:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	f7f9 fee3 	bl	80028b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008af0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008af4:	2200      	movs	r2, #0
 8008af6:	2182      	movs	r1, #130	@ 0x82
 8008af8:	f7f9 feda 	bl	80028b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000764 	.word	0x20000764
 8008b0c:	40005c00 	.word	0x40005c00

08008b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7f8 fb03 	bl	8001132 <HAL_PCD_Start>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f952 	bl	8008ddc <USBD_Get_USB_Status>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	4608      	mov	r0, r1
 8008b50:	4611      	mov	r1, r2
 8008b52:	461a      	mov	r2, r3
 8008b54:	4603      	mov	r3, r0
 8008b56:	70fb      	strb	r3, [r7, #3]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70bb      	strb	r3, [r7, #2]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b6e:	78bb      	ldrb	r3, [r7, #2]
 8008b70:	883a      	ldrh	r2, [r7, #0]
 8008b72:	78f9      	ldrb	r1, [r7, #3]
 8008b74:	f7f8 fbfb 	bl	800136e <HAL_PCD_EP_Open>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f92c 	bl	8008ddc <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7f8 fc39 	bl	8001428 <HAL_PCD_EP_Close>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 f90d 	bl	8008ddc <USBD_Get_USB_Status>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f8 fce2 	bl	80015b8 <HAL_PCD_EP_SetStall>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f8ee 	bl	8008ddc <USBD_Get_USB_Status>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7f8 fd15 	bl	800165c <HAL_PCD_EP_ClrStall>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 f8cf 	bl	8008ddc <USBD_Get_USB_Status>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da0b      	bge.n	8008c80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c6e:	68f9      	ldr	r1, [r7, #12]
 8008c70:	4613      	mov	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	440b      	add	r3, r1
 8008c7a:	3312      	adds	r3, #18
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	e00b      	b.n	8008c98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c86:	68f9      	ldr	r1, [r7, #12]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	00db      	lsls	r3, r3, #3
 8008c90:	440b      	add	r3, r1
 8008c92:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008c96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7f8 fb2f 	bl	8001326 <HAL_PCD_SetAddress>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 f884 	bl	8008ddc <USBD_Get_USB_Status>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b086      	sub	sp, #24
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	461a      	mov	r2, r3
 8008cee:	460b      	mov	r3, r1
 8008cf0:	72fb      	strb	r3, [r7, #11]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008d04:	893b      	ldrh	r3, [r7, #8]
 8008d06:	7af9      	ldrb	r1, [r7, #11]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	f7f8 fc1e 	bl	800154a <HAL_PCD_EP_Transmit>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 f861 	bl	8008ddc <USBD_Get_USB_Status>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	461a      	mov	r2, r3
 8008d34:	460b      	mov	r3, r1
 8008d36:	72fb      	strb	r3, [r7, #11]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008d4a:	893b      	ldrh	r3, [r7, #8]
 8008d4c:	7af9      	ldrb	r1, [r7, #11]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	f7f8 fbb2 	bl	80014b8 <HAL_PCD_EP_Receive>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f83e 	bl	8008ddc <USBD_Get_USB_Status>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d64:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d80:	78fa      	ldrb	r2, [r7, #3]
 8008d82:	4611      	mov	r1, r2
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7f8 fbc8 	bl	800151a <HAL_PCD_EP_GetRxCount>
 8008d8a:	4603      	mov	r3, r0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d9c:	4b03      	ldr	r3, [pc, #12]	@ (8008dac <USBD_static_malloc+0x18>)
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20000a38 	.word	0x20000a38

08008db0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]

}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d817      	bhi.n	8008e20 <USBD_Get_USB_Status+0x44>
 8008df0:	a201      	add	r2, pc, #4	@ (adr r2, 8008df8 <USBD_Get_USB_Status+0x1c>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e09 	.word	0x08008e09
 8008dfc:	08008e0f 	.word	0x08008e0f
 8008e00:	08008e15 	.word	0x08008e15
 8008e04:	08008e1b 	.word	0x08008e1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0c:	e00b      	b.n	8008e26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	73fb      	strb	r3, [r7, #15]
    break;
 8008e12:	e008      	b.n	8008e26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
    break;
 8008e18:	e005      	b.n	8008e26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1e:	e002      	b.n	8008e26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e20:	2302      	movs	r3, #2
 8008e22:	73fb      	strb	r3, [r7, #15]
    break;
 8008e24:	bf00      	nop
  }
  return usb_status;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <_vsiprintf_r>:
 8008e34:	b500      	push	{lr}
 8008e36:	b09b      	sub	sp, #108	@ 0x6c
 8008e38:	9100      	str	r1, [sp, #0]
 8008e3a:	9104      	str	r1, [sp, #16]
 8008e3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e40:	9105      	str	r1, [sp, #20]
 8008e42:	9102      	str	r1, [sp, #8]
 8008e44:	4905      	ldr	r1, [pc, #20]	@ (8008e5c <_vsiprintf_r+0x28>)
 8008e46:	9103      	str	r1, [sp, #12]
 8008e48:	4669      	mov	r1, sp
 8008e4a:	f000 f99b 	bl	8009184 <_svfiprintf_r>
 8008e4e:	9b00      	ldr	r3, [sp, #0]
 8008e50:	2200      	movs	r2, #0
 8008e52:	701a      	strb	r2, [r3, #0]
 8008e54:	b01b      	add	sp, #108	@ 0x6c
 8008e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e5a:	bf00      	nop
 8008e5c:	ffff0208 	.word	0xffff0208

08008e60 <vsiprintf>:
 8008e60:	4613      	mov	r3, r2
 8008e62:	460a      	mov	r2, r1
 8008e64:	4601      	mov	r1, r0
 8008e66:	4802      	ldr	r0, [pc, #8]	@ (8008e70 <vsiprintf+0x10>)
 8008e68:	6800      	ldr	r0, [r0, #0]
 8008e6a:	f7ff bfe3 	b.w	8008e34 <_vsiprintf_r>
 8008e6e:	bf00      	nop
 8008e70:	2000017c 	.word	0x2000017c

08008e74 <memset>:
 8008e74:	4402      	add	r2, r0
 8008e76:	4603      	mov	r3, r0
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d100      	bne.n	8008e7e <memset+0xa>
 8008e7c:	4770      	bx	lr
 8008e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e82:	e7f9      	b.n	8008e78 <memset+0x4>

08008e84 <__errno>:
 8008e84:	4b01      	ldr	r3, [pc, #4]	@ (8008e8c <__errno+0x8>)
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	2000017c 	.word	0x2000017c

08008e90 <__libc_init_array>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	4d0d      	ldr	r5, [pc, #52]	@ (8008ec8 <__libc_init_array+0x38>)
 8008e94:	4c0d      	ldr	r4, [pc, #52]	@ (8008ecc <__libc_init_array+0x3c>)
 8008e96:	1b64      	subs	r4, r4, r5
 8008e98:	10a4      	asrs	r4, r4, #2
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	42a6      	cmp	r6, r4
 8008e9e:	d109      	bne.n	8008eb4 <__libc_init_array+0x24>
 8008ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8008ed0 <__libc_init_array+0x40>)
 8008ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8008ed4 <__libc_init_array+0x44>)
 8008ea4:	f000 fc66 	bl	8009774 <_init>
 8008ea8:	1b64      	subs	r4, r4, r5
 8008eaa:	10a4      	asrs	r4, r4, #2
 8008eac:	2600      	movs	r6, #0
 8008eae:	42a6      	cmp	r6, r4
 8008eb0:	d105      	bne.n	8008ebe <__libc_init_array+0x2e>
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb8:	4798      	blx	r3
 8008eba:	3601      	adds	r6, #1
 8008ebc:	e7ee      	b.n	8008e9c <__libc_init_array+0xc>
 8008ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec2:	4798      	blx	r3
 8008ec4:	3601      	adds	r6, #1
 8008ec6:	e7f2      	b.n	8008eae <__libc_init_array+0x1e>
 8008ec8:	08009908 	.word	0x08009908
 8008ecc:	08009908 	.word	0x08009908
 8008ed0:	08009908 	.word	0x08009908
 8008ed4:	0800990c 	.word	0x0800990c

08008ed8 <__retarget_lock_acquire_recursive>:
 8008ed8:	4770      	bx	lr

08008eda <__retarget_lock_release_recursive>:
 8008eda:	4770      	bx	lr

08008edc <_free_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4605      	mov	r5, r0
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	d041      	beq.n	8008f68 <_free_r+0x8c>
 8008ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee8:	1f0c      	subs	r4, r1, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bfb8      	it	lt
 8008eee:	18e4      	addlt	r4, r4, r3
 8008ef0:	f000 f8e0 	bl	80090b4 <__malloc_lock>
 8008ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f6c <_free_r+0x90>)
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	b933      	cbnz	r3, 8008f08 <_free_r+0x2c>
 8008efa:	6063      	str	r3, [r4, #4]
 8008efc:	6014      	str	r4, [r2, #0]
 8008efe:	4628      	mov	r0, r5
 8008f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f04:	f000 b8dc 	b.w	80090c0 <__malloc_unlock>
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	d908      	bls.n	8008f1e <_free_r+0x42>
 8008f0c:	6820      	ldr	r0, [r4, #0]
 8008f0e:	1821      	adds	r1, r4, r0
 8008f10:	428b      	cmp	r3, r1
 8008f12:	bf01      	itttt	eq
 8008f14:	6819      	ldreq	r1, [r3, #0]
 8008f16:	685b      	ldreq	r3, [r3, #4]
 8008f18:	1809      	addeq	r1, r1, r0
 8008f1a:	6021      	streq	r1, [r4, #0]
 8008f1c:	e7ed      	b.n	8008efa <_free_r+0x1e>
 8008f1e:	461a      	mov	r2, r3
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	b10b      	cbz	r3, 8008f28 <_free_r+0x4c>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d9fa      	bls.n	8008f1e <_free_r+0x42>
 8008f28:	6811      	ldr	r1, [r2, #0]
 8008f2a:	1850      	adds	r0, r2, r1
 8008f2c:	42a0      	cmp	r0, r4
 8008f2e:	d10b      	bne.n	8008f48 <_free_r+0x6c>
 8008f30:	6820      	ldr	r0, [r4, #0]
 8008f32:	4401      	add	r1, r0
 8008f34:	1850      	adds	r0, r2, r1
 8008f36:	4283      	cmp	r3, r0
 8008f38:	6011      	str	r1, [r2, #0]
 8008f3a:	d1e0      	bne.n	8008efe <_free_r+0x22>
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	6053      	str	r3, [r2, #4]
 8008f42:	4408      	add	r0, r1
 8008f44:	6010      	str	r0, [r2, #0]
 8008f46:	e7da      	b.n	8008efe <_free_r+0x22>
 8008f48:	d902      	bls.n	8008f50 <_free_r+0x74>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	e7d6      	b.n	8008efe <_free_r+0x22>
 8008f50:	6820      	ldr	r0, [r4, #0]
 8008f52:	1821      	adds	r1, r4, r0
 8008f54:	428b      	cmp	r3, r1
 8008f56:	bf04      	itt	eq
 8008f58:	6819      	ldreq	r1, [r3, #0]
 8008f5a:	685b      	ldreq	r3, [r3, #4]
 8008f5c:	6063      	str	r3, [r4, #4]
 8008f5e:	bf04      	itt	eq
 8008f60:	1809      	addeq	r1, r1, r0
 8008f62:	6021      	streq	r1, [r4, #0]
 8008f64:	6054      	str	r4, [r2, #4]
 8008f66:	e7ca      	b.n	8008efe <_free_r+0x22>
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000d9c 	.word	0x20000d9c

08008f70 <sbrk_aligned>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	4e0f      	ldr	r6, [pc, #60]	@ (8008fb0 <sbrk_aligned+0x40>)
 8008f74:	460c      	mov	r4, r1
 8008f76:	6831      	ldr	r1, [r6, #0]
 8008f78:	4605      	mov	r5, r0
 8008f7a:	b911      	cbnz	r1, 8008f82 <sbrk_aligned+0x12>
 8008f7c:	f000 fba6 	bl	80096cc <_sbrk_r>
 8008f80:	6030      	str	r0, [r6, #0]
 8008f82:	4621      	mov	r1, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 fba1 	bl	80096cc <_sbrk_r>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d103      	bne.n	8008f96 <sbrk_aligned+0x26>
 8008f8e:	f04f 34ff 	mov.w	r4, #4294967295
 8008f92:	4620      	mov	r0, r4
 8008f94:	bd70      	pop	{r4, r5, r6, pc}
 8008f96:	1cc4      	adds	r4, r0, #3
 8008f98:	f024 0403 	bic.w	r4, r4, #3
 8008f9c:	42a0      	cmp	r0, r4
 8008f9e:	d0f8      	beq.n	8008f92 <sbrk_aligned+0x22>
 8008fa0:	1a21      	subs	r1, r4, r0
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 fb92 	bl	80096cc <_sbrk_r>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d1f2      	bne.n	8008f92 <sbrk_aligned+0x22>
 8008fac:	e7ef      	b.n	8008f8e <sbrk_aligned+0x1e>
 8008fae:	bf00      	nop
 8008fb0:	20000d98 	.word	0x20000d98

08008fb4 <_malloc_r>:
 8008fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb8:	1ccd      	adds	r5, r1, #3
 8008fba:	f025 0503 	bic.w	r5, r5, #3
 8008fbe:	3508      	adds	r5, #8
 8008fc0:	2d0c      	cmp	r5, #12
 8008fc2:	bf38      	it	cc
 8008fc4:	250c      	movcc	r5, #12
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	4606      	mov	r6, r0
 8008fca:	db01      	blt.n	8008fd0 <_malloc_r+0x1c>
 8008fcc:	42a9      	cmp	r1, r5
 8008fce:	d904      	bls.n	8008fda <_malloc_r+0x26>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	6033      	str	r3, [r6, #0]
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090b0 <_malloc_r+0xfc>
 8008fde:	f000 f869 	bl	80090b4 <__malloc_lock>
 8008fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fe6:	461c      	mov	r4, r3
 8008fe8:	bb44      	cbnz	r4, 800903c <_malloc_r+0x88>
 8008fea:	4629      	mov	r1, r5
 8008fec:	4630      	mov	r0, r6
 8008fee:	f7ff ffbf 	bl	8008f70 <sbrk_aligned>
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	d158      	bne.n	80090aa <_malloc_r+0xf6>
 8008ff8:	f8d8 4000 	ldr.w	r4, [r8]
 8008ffc:	4627      	mov	r7, r4
 8008ffe:	2f00      	cmp	r7, #0
 8009000:	d143      	bne.n	800908a <_malloc_r+0xd6>
 8009002:	2c00      	cmp	r4, #0
 8009004:	d04b      	beq.n	800909e <_malloc_r+0xea>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	4639      	mov	r1, r7
 800900a:	4630      	mov	r0, r6
 800900c:	eb04 0903 	add.w	r9, r4, r3
 8009010:	f000 fb5c 	bl	80096cc <_sbrk_r>
 8009014:	4581      	cmp	r9, r0
 8009016:	d142      	bne.n	800909e <_malloc_r+0xea>
 8009018:	6821      	ldr	r1, [r4, #0]
 800901a:	1a6d      	subs	r5, r5, r1
 800901c:	4629      	mov	r1, r5
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff ffa6 	bl	8008f70 <sbrk_aligned>
 8009024:	3001      	adds	r0, #1
 8009026:	d03a      	beq.n	800909e <_malloc_r+0xea>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	442b      	add	r3, r5
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	f8d8 3000 	ldr.w	r3, [r8]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	bb62      	cbnz	r2, 8009090 <_malloc_r+0xdc>
 8009036:	f8c8 7000 	str.w	r7, [r8]
 800903a:	e00f      	b.n	800905c <_malloc_r+0xa8>
 800903c:	6822      	ldr	r2, [r4, #0]
 800903e:	1b52      	subs	r2, r2, r5
 8009040:	d420      	bmi.n	8009084 <_malloc_r+0xd0>
 8009042:	2a0b      	cmp	r2, #11
 8009044:	d917      	bls.n	8009076 <_malloc_r+0xc2>
 8009046:	1961      	adds	r1, r4, r5
 8009048:	42a3      	cmp	r3, r4
 800904a:	6025      	str	r5, [r4, #0]
 800904c:	bf18      	it	ne
 800904e:	6059      	strne	r1, [r3, #4]
 8009050:	6863      	ldr	r3, [r4, #4]
 8009052:	bf08      	it	eq
 8009054:	f8c8 1000 	streq.w	r1, [r8]
 8009058:	5162      	str	r2, [r4, r5]
 800905a:	604b      	str	r3, [r1, #4]
 800905c:	4630      	mov	r0, r6
 800905e:	f000 f82f 	bl	80090c0 <__malloc_unlock>
 8009062:	f104 000b 	add.w	r0, r4, #11
 8009066:	1d23      	adds	r3, r4, #4
 8009068:	f020 0007 	bic.w	r0, r0, #7
 800906c:	1ac2      	subs	r2, r0, r3
 800906e:	bf1c      	itt	ne
 8009070:	1a1b      	subne	r3, r3, r0
 8009072:	50a3      	strne	r3, [r4, r2]
 8009074:	e7af      	b.n	8008fd6 <_malloc_r+0x22>
 8009076:	6862      	ldr	r2, [r4, #4]
 8009078:	42a3      	cmp	r3, r4
 800907a:	bf0c      	ite	eq
 800907c:	f8c8 2000 	streq.w	r2, [r8]
 8009080:	605a      	strne	r2, [r3, #4]
 8009082:	e7eb      	b.n	800905c <_malloc_r+0xa8>
 8009084:	4623      	mov	r3, r4
 8009086:	6864      	ldr	r4, [r4, #4]
 8009088:	e7ae      	b.n	8008fe8 <_malloc_r+0x34>
 800908a:	463c      	mov	r4, r7
 800908c:	687f      	ldr	r7, [r7, #4]
 800908e:	e7b6      	b.n	8008ffe <_malloc_r+0x4a>
 8009090:	461a      	mov	r2, r3
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	42a3      	cmp	r3, r4
 8009096:	d1fb      	bne.n	8009090 <_malloc_r+0xdc>
 8009098:	2300      	movs	r3, #0
 800909a:	6053      	str	r3, [r2, #4]
 800909c:	e7de      	b.n	800905c <_malloc_r+0xa8>
 800909e:	230c      	movs	r3, #12
 80090a0:	6033      	str	r3, [r6, #0]
 80090a2:	4630      	mov	r0, r6
 80090a4:	f000 f80c 	bl	80090c0 <__malloc_unlock>
 80090a8:	e794      	b.n	8008fd4 <_malloc_r+0x20>
 80090aa:	6005      	str	r5, [r0, #0]
 80090ac:	e7d6      	b.n	800905c <_malloc_r+0xa8>
 80090ae:	bf00      	nop
 80090b0:	20000d9c 	.word	0x20000d9c

080090b4 <__malloc_lock>:
 80090b4:	4801      	ldr	r0, [pc, #4]	@ (80090bc <__malloc_lock+0x8>)
 80090b6:	f7ff bf0f 	b.w	8008ed8 <__retarget_lock_acquire_recursive>
 80090ba:	bf00      	nop
 80090bc:	20000d94 	.word	0x20000d94

080090c0 <__malloc_unlock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	@ (80090c8 <__malloc_unlock+0x8>)
 80090c2:	f7ff bf0a 	b.w	8008eda <__retarget_lock_release_recursive>
 80090c6:	bf00      	nop
 80090c8:	20000d94 	.word	0x20000d94

080090cc <__ssputs_r>:
 80090cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	688e      	ldr	r6, [r1, #8]
 80090d2:	461f      	mov	r7, r3
 80090d4:	42be      	cmp	r6, r7
 80090d6:	680b      	ldr	r3, [r1, #0]
 80090d8:	4682      	mov	sl, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	4690      	mov	r8, r2
 80090de:	d82d      	bhi.n	800913c <__ssputs_r+0x70>
 80090e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090e8:	d026      	beq.n	8009138 <__ssputs_r+0x6c>
 80090ea:	6965      	ldr	r5, [r4, #20]
 80090ec:	6909      	ldr	r1, [r1, #16]
 80090ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090f2:	eba3 0901 	sub.w	r9, r3, r1
 80090f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090fa:	1c7b      	adds	r3, r7, #1
 80090fc:	444b      	add	r3, r9
 80090fe:	106d      	asrs	r5, r5, #1
 8009100:	429d      	cmp	r5, r3
 8009102:	bf38      	it	cc
 8009104:	461d      	movcc	r5, r3
 8009106:	0553      	lsls	r3, r2, #21
 8009108:	d527      	bpl.n	800915a <__ssputs_r+0x8e>
 800910a:	4629      	mov	r1, r5
 800910c:	f7ff ff52 	bl	8008fb4 <_malloc_r>
 8009110:	4606      	mov	r6, r0
 8009112:	b360      	cbz	r0, 800916e <__ssputs_r+0xa2>
 8009114:	6921      	ldr	r1, [r4, #16]
 8009116:	464a      	mov	r2, r9
 8009118:	f000 fae8 	bl	80096ec <memcpy>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	6126      	str	r6, [r4, #16]
 800912a:	6165      	str	r5, [r4, #20]
 800912c:	444e      	add	r6, r9
 800912e:	eba5 0509 	sub.w	r5, r5, r9
 8009132:	6026      	str	r6, [r4, #0]
 8009134:	60a5      	str	r5, [r4, #8]
 8009136:	463e      	mov	r6, r7
 8009138:	42be      	cmp	r6, r7
 800913a:	d900      	bls.n	800913e <__ssputs_r+0x72>
 800913c:	463e      	mov	r6, r7
 800913e:	6820      	ldr	r0, [r4, #0]
 8009140:	4632      	mov	r2, r6
 8009142:	4641      	mov	r1, r8
 8009144:	f000 faa8 	bl	8009698 <memmove>
 8009148:	68a3      	ldr	r3, [r4, #8]
 800914a:	1b9b      	subs	r3, r3, r6
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	4433      	add	r3, r6
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	2000      	movs	r0, #0
 8009156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915a:	462a      	mov	r2, r5
 800915c:	f000 fad4 	bl	8009708 <_realloc_r>
 8009160:	4606      	mov	r6, r0
 8009162:	2800      	cmp	r0, #0
 8009164:	d1e0      	bne.n	8009128 <__ssputs_r+0x5c>
 8009166:	6921      	ldr	r1, [r4, #16]
 8009168:	4650      	mov	r0, sl
 800916a:	f7ff feb7 	bl	8008edc <_free_r>
 800916e:	230c      	movs	r3, #12
 8009170:	f8ca 3000 	str.w	r3, [sl]
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	e7e9      	b.n	8009156 <__ssputs_r+0x8a>
	...

08009184 <_svfiprintf_r>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	4698      	mov	r8, r3
 800918a:	898b      	ldrh	r3, [r1, #12]
 800918c:	061b      	lsls	r3, r3, #24
 800918e:	b09d      	sub	sp, #116	@ 0x74
 8009190:	4607      	mov	r7, r0
 8009192:	460d      	mov	r5, r1
 8009194:	4614      	mov	r4, r2
 8009196:	d510      	bpl.n	80091ba <_svfiprintf_r+0x36>
 8009198:	690b      	ldr	r3, [r1, #16]
 800919a:	b973      	cbnz	r3, 80091ba <_svfiprintf_r+0x36>
 800919c:	2140      	movs	r1, #64	@ 0x40
 800919e:	f7ff ff09 	bl	8008fb4 <_malloc_r>
 80091a2:	6028      	str	r0, [r5, #0]
 80091a4:	6128      	str	r0, [r5, #16]
 80091a6:	b930      	cbnz	r0, 80091b6 <_svfiprintf_r+0x32>
 80091a8:	230c      	movs	r3, #12
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	b01d      	add	sp, #116	@ 0x74
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	2340      	movs	r3, #64	@ 0x40
 80091b8:	616b      	str	r3, [r5, #20]
 80091ba:	2300      	movs	r3, #0
 80091bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091be:	2320      	movs	r3, #32
 80091c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80091c8:	2330      	movs	r3, #48	@ 0x30
 80091ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009368 <_svfiprintf_r+0x1e4>
 80091ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091d2:	f04f 0901 	mov.w	r9, #1
 80091d6:	4623      	mov	r3, r4
 80091d8:	469a      	mov	sl, r3
 80091da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091de:	b10a      	cbz	r2, 80091e4 <_svfiprintf_r+0x60>
 80091e0:	2a25      	cmp	r2, #37	@ 0x25
 80091e2:	d1f9      	bne.n	80091d8 <_svfiprintf_r+0x54>
 80091e4:	ebba 0b04 	subs.w	fp, sl, r4
 80091e8:	d00b      	beq.n	8009202 <_svfiprintf_r+0x7e>
 80091ea:	465b      	mov	r3, fp
 80091ec:	4622      	mov	r2, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff ff6b 	bl	80090cc <__ssputs_r>
 80091f6:	3001      	adds	r0, #1
 80091f8:	f000 80a7 	beq.w	800934a <_svfiprintf_r+0x1c6>
 80091fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091fe:	445a      	add	r2, fp
 8009200:	9209      	str	r2, [sp, #36]	@ 0x24
 8009202:	f89a 3000 	ldrb.w	r3, [sl]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 809f 	beq.w	800934a <_svfiprintf_r+0x1c6>
 800920c:	2300      	movs	r3, #0
 800920e:	f04f 32ff 	mov.w	r2, #4294967295
 8009212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009216:	f10a 0a01 	add.w	sl, sl, #1
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	9307      	str	r3, [sp, #28]
 800921e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009222:	931a      	str	r3, [sp, #104]	@ 0x68
 8009224:	4654      	mov	r4, sl
 8009226:	2205      	movs	r2, #5
 8009228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922c:	484e      	ldr	r0, [pc, #312]	@ (8009368 <_svfiprintf_r+0x1e4>)
 800922e:	f7f6 ffd7 	bl	80001e0 <memchr>
 8009232:	9a04      	ldr	r2, [sp, #16]
 8009234:	b9d8      	cbnz	r0, 800926e <_svfiprintf_r+0xea>
 8009236:	06d0      	lsls	r0, r2, #27
 8009238:	bf44      	itt	mi
 800923a:	2320      	movmi	r3, #32
 800923c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009240:	0711      	lsls	r1, r2, #28
 8009242:	bf44      	itt	mi
 8009244:	232b      	movmi	r3, #43	@ 0x2b
 8009246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800924a:	f89a 3000 	ldrb.w	r3, [sl]
 800924e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009250:	d015      	beq.n	800927e <_svfiprintf_r+0xfa>
 8009252:	9a07      	ldr	r2, [sp, #28]
 8009254:	4654      	mov	r4, sl
 8009256:	2000      	movs	r0, #0
 8009258:	f04f 0c0a 	mov.w	ip, #10
 800925c:	4621      	mov	r1, r4
 800925e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009262:	3b30      	subs	r3, #48	@ 0x30
 8009264:	2b09      	cmp	r3, #9
 8009266:	d94b      	bls.n	8009300 <_svfiprintf_r+0x17c>
 8009268:	b1b0      	cbz	r0, 8009298 <_svfiprintf_r+0x114>
 800926a:	9207      	str	r2, [sp, #28]
 800926c:	e014      	b.n	8009298 <_svfiprintf_r+0x114>
 800926e:	eba0 0308 	sub.w	r3, r0, r8
 8009272:	fa09 f303 	lsl.w	r3, r9, r3
 8009276:	4313      	orrs	r3, r2
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	46a2      	mov	sl, r4
 800927c:	e7d2      	b.n	8009224 <_svfiprintf_r+0xa0>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	1d19      	adds	r1, r3, #4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	9103      	str	r1, [sp, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	bfbb      	ittet	lt
 800928a:	425b      	neglt	r3, r3
 800928c:	f042 0202 	orrlt.w	r2, r2, #2
 8009290:	9307      	strge	r3, [sp, #28]
 8009292:	9307      	strlt	r3, [sp, #28]
 8009294:	bfb8      	it	lt
 8009296:	9204      	strlt	r2, [sp, #16]
 8009298:	7823      	ldrb	r3, [r4, #0]
 800929a:	2b2e      	cmp	r3, #46	@ 0x2e
 800929c:	d10a      	bne.n	80092b4 <_svfiprintf_r+0x130>
 800929e:	7863      	ldrb	r3, [r4, #1]
 80092a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092a2:	d132      	bne.n	800930a <_svfiprintf_r+0x186>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	1d1a      	adds	r2, r3, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	9203      	str	r2, [sp, #12]
 80092ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092b0:	3402      	adds	r4, #2
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009378 <_svfiprintf_r+0x1f4>
 80092b8:	7821      	ldrb	r1, [r4, #0]
 80092ba:	2203      	movs	r2, #3
 80092bc:	4650      	mov	r0, sl
 80092be:	f7f6 ff8f 	bl	80001e0 <memchr>
 80092c2:	b138      	cbz	r0, 80092d4 <_svfiprintf_r+0x150>
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	eba0 000a 	sub.w	r0, r0, sl
 80092ca:	2240      	movs	r2, #64	@ 0x40
 80092cc:	4082      	lsls	r2, r0
 80092ce:	4313      	orrs	r3, r2
 80092d0:	3401      	adds	r4, #1
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d8:	4824      	ldr	r0, [pc, #144]	@ (800936c <_svfiprintf_r+0x1e8>)
 80092da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092de:	2206      	movs	r2, #6
 80092e0:	f7f6 ff7e 	bl	80001e0 <memchr>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d036      	beq.n	8009356 <_svfiprintf_r+0x1d2>
 80092e8:	4b21      	ldr	r3, [pc, #132]	@ (8009370 <_svfiprintf_r+0x1ec>)
 80092ea:	bb1b      	cbnz	r3, 8009334 <_svfiprintf_r+0x1b0>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	3307      	adds	r3, #7
 80092f0:	f023 0307 	bic.w	r3, r3, #7
 80092f4:	3308      	adds	r3, #8
 80092f6:	9303      	str	r3, [sp, #12]
 80092f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092fa:	4433      	add	r3, r6
 80092fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fe:	e76a      	b.n	80091d6 <_svfiprintf_r+0x52>
 8009300:	fb0c 3202 	mla	r2, ip, r2, r3
 8009304:	460c      	mov	r4, r1
 8009306:	2001      	movs	r0, #1
 8009308:	e7a8      	b.n	800925c <_svfiprintf_r+0xd8>
 800930a:	2300      	movs	r3, #0
 800930c:	3401      	adds	r4, #1
 800930e:	9305      	str	r3, [sp, #20]
 8009310:	4619      	mov	r1, r3
 8009312:	f04f 0c0a 	mov.w	ip, #10
 8009316:	4620      	mov	r0, r4
 8009318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800931c:	3a30      	subs	r2, #48	@ 0x30
 800931e:	2a09      	cmp	r2, #9
 8009320:	d903      	bls.n	800932a <_svfiprintf_r+0x1a6>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0c6      	beq.n	80092b4 <_svfiprintf_r+0x130>
 8009326:	9105      	str	r1, [sp, #20]
 8009328:	e7c4      	b.n	80092b4 <_svfiprintf_r+0x130>
 800932a:	fb0c 2101 	mla	r1, ip, r1, r2
 800932e:	4604      	mov	r4, r0
 8009330:	2301      	movs	r3, #1
 8009332:	e7f0      	b.n	8009316 <_svfiprintf_r+0x192>
 8009334:	ab03      	add	r3, sp, #12
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	462a      	mov	r2, r5
 800933a:	4b0e      	ldr	r3, [pc, #56]	@ (8009374 <_svfiprintf_r+0x1f0>)
 800933c:	a904      	add	r1, sp, #16
 800933e:	4638      	mov	r0, r7
 8009340:	f3af 8000 	nop.w
 8009344:	1c42      	adds	r2, r0, #1
 8009346:	4606      	mov	r6, r0
 8009348:	d1d6      	bne.n	80092f8 <_svfiprintf_r+0x174>
 800934a:	89ab      	ldrh	r3, [r5, #12]
 800934c:	065b      	lsls	r3, r3, #25
 800934e:	f53f af2d 	bmi.w	80091ac <_svfiprintf_r+0x28>
 8009352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009354:	e72c      	b.n	80091b0 <_svfiprintf_r+0x2c>
 8009356:	ab03      	add	r3, sp, #12
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	462a      	mov	r2, r5
 800935c:	4b05      	ldr	r3, [pc, #20]	@ (8009374 <_svfiprintf_r+0x1f0>)
 800935e:	a904      	add	r1, sp, #16
 8009360:	4638      	mov	r0, r7
 8009362:	f000 f879 	bl	8009458 <_printf_i>
 8009366:	e7ed      	b.n	8009344 <_svfiprintf_r+0x1c0>
 8009368:	080098cc 	.word	0x080098cc
 800936c:	080098d6 	.word	0x080098d6
 8009370:	00000000 	.word	0x00000000
 8009374:	080090cd 	.word	0x080090cd
 8009378:	080098d2 	.word	0x080098d2

0800937c <_printf_common>:
 800937c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009380:	4616      	mov	r6, r2
 8009382:	4698      	mov	r8, r3
 8009384:	688a      	ldr	r2, [r1, #8]
 8009386:	690b      	ldr	r3, [r1, #16]
 8009388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800938c:	4293      	cmp	r3, r2
 800938e:	bfb8      	it	lt
 8009390:	4613      	movlt	r3, r2
 8009392:	6033      	str	r3, [r6, #0]
 8009394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009398:	4607      	mov	r7, r0
 800939a:	460c      	mov	r4, r1
 800939c:	b10a      	cbz	r2, 80093a2 <_printf_common+0x26>
 800939e:	3301      	adds	r3, #1
 80093a0:	6033      	str	r3, [r6, #0]
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	0699      	lsls	r1, r3, #26
 80093a6:	bf42      	ittt	mi
 80093a8:	6833      	ldrmi	r3, [r6, #0]
 80093aa:	3302      	addmi	r3, #2
 80093ac:	6033      	strmi	r3, [r6, #0]
 80093ae:	6825      	ldr	r5, [r4, #0]
 80093b0:	f015 0506 	ands.w	r5, r5, #6
 80093b4:	d106      	bne.n	80093c4 <_printf_common+0x48>
 80093b6:	f104 0a19 	add.w	sl, r4, #25
 80093ba:	68e3      	ldr	r3, [r4, #12]
 80093bc:	6832      	ldr	r2, [r6, #0]
 80093be:	1a9b      	subs	r3, r3, r2
 80093c0:	42ab      	cmp	r3, r5
 80093c2:	dc26      	bgt.n	8009412 <_printf_common+0x96>
 80093c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	3b00      	subs	r3, #0
 80093cc:	bf18      	it	ne
 80093ce:	2301      	movne	r3, #1
 80093d0:	0692      	lsls	r2, r2, #26
 80093d2:	d42b      	bmi.n	800942c <_printf_common+0xb0>
 80093d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093d8:	4641      	mov	r1, r8
 80093da:	4638      	mov	r0, r7
 80093dc:	47c8      	blx	r9
 80093de:	3001      	adds	r0, #1
 80093e0:	d01e      	beq.n	8009420 <_printf_common+0xa4>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	6922      	ldr	r2, [r4, #16]
 80093e6:	f003 0306 	and.w	r3, r3, #6
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	bf02      	ittt	eq
 80093ee:	68e5      	ldreq	r5, [r4, #12]
 80093f0:	6833      	ldreq	r3, [r6, #0]
 80093f2:	1aed      	subeq	r5, r5, r3
 80093f4:	68a3      	ldr	r3, [r4, #8]
 80093f6:	bf0c      	ite	eq
 80093f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093fc:	2500      	movne	r5, #0
 80093fe:	4293      	cmp	r3, r2
 8009400:	bfc4      	itt	gt
 8009402:	1a9b      	subgt	r3, r3, r2
 8009404:	18ed      	addgt	r5, r5, r3
 8009406:	2600      	movs	r6, #0
 8009408:	341a      	adds	r4, #26
 800940a:	42b5      	cmp	r5, r6
 800940c:	d11a      	bne.n	8009444 <_printf_common+0xc8>
 800940e:	2000      	movs	r0, #0
 8009410:	e008      	b.n	8009424 <_printf_common+0xa8>
 8009412:	2301      	movs	r3, #1
 8009414:	4652      	mov	r2, sl
 8009416:	4641      	mov	r1, r8
 8009418:	4638      	mov	r0, r7
 800941a:	47c8      	blx	r9
 800941c:	3001      	adds	r0, #1
 800941e:	d103      	bne.n	8009428 <_printf_common+0xac>
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009428:	3501      	adds	r5, #1
 800942a:	e7c6      	b.n	80093ba <_printf_common+0x3e>
 800942c:	18e1      	adds	r1, r4, r3
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	2030      	movs	r0, #48	@ 0x30
 8009432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009436:	4422      	add	r2, r4
 8009438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800943c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009440:	3302      	adds	r3, #2
 8009442:	e7c7      	b.n	80093d4 <_printf_common+0x58>
 8009444:	2301      	movs	r3, #1
 8009446:	4622      	mov	r2, r4
 8009448:	4641      	mov	r1, r8
 800944a:	4638      	mov	r0, r7
 800944c:	47c8      	blx	r9
 800944e:	3001      	adds	r0, #1
 8009450:	d0e6      	beq.n	8009420 <_printf_common+0xa4>
 8009452:	3601      	adds	r6, #1
 8009454:	e7d9      	b.n	800940a <_printf_common+0x8e>
	...

08009458 <_printf_i>:
 8009458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800945c:	7e0f      	ldrb	r7, [r1, #24]
 800945e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009460:	2f78      	cmp	r7, #120	@ 0x78
 8009462:	4691      	mov	r9, r2
 8009464:	4680      	mov	r8, r0
 8009466:	460c      	mov	r4, r1
 8009468:	469a      	mov	sl, r3
 800946a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800946e:	d807      	bhi.n	8009480 <_printf_i+0x28>
 8009470:	2f62      	cmp	r7, #98	@ 0x62
 8009472:	d80a      	bhi.n	800948a <_printf_i+0x32>
 8009474:	2f00      	cmp	r7, #0
 8009476:	f000 80d2 	beq.w	800961e <_printf_i+0x1c6>
 800947a:	2f58      	cmp	r7, #88	@ 0x58
 800947c:	f000 80b9 	beq.w	80095f2 <_printf_i+0x19a>
 8009480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009488:	e03a      	b.n	8009500 <_printf_i+0xa8>
 800948a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800948e:	2b15      	cmp	r3, #21
 8009490:	d8f6      	bhi.n	8009480 <_printf_i+0x28>
 8009492:	a101      	add	r1, pc, #4	@ (adr r1, 8009498 <_printf_i+0x40>)
 8009494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009498:	080094f1 	.word	0x080094f1
 800949c:	08009505 	.word	0x08009505
 80094a0:	08009481 	.word	0x08009481
 80094a4:	08009481 	.word	0x08009481
 80094a8:	08009481 	.word	0x08009481
 80094ac:	08009481 	.word	0x08009481
 80094b0:	08009505 	.word	0x08009505
 80094b4:	08009481 	.word	0x08009481
 80094b8:	08009481 	.word	0x08009481
 80094bc:	08009481 	.word	0x08009481
 80094c0:	08009481 	.word	0x08009481
 80094c4:	08009605 	.word	0x08009605
 80094c8:	0800952f 	.word	0x0800952f
 80094cc:	080095bf 	.word	0x080095bf
 80094d0:	08009481 	.word	0x08009481
 80094d4:	08009481 	.word	0x08009481
 80094d8:	08009627 	.word	0x08009627
 80094dc:	08009481 	.word	0x08009481
 80094e0:	0800952f 	.word	0x0800952f
 80094e4:	08009481 	.word	0x08009481
 80094e8:	08009481 	.word	0x08009481
 80094ec:	080095c7 	.word	0x080095c7
 80094f0:	6833      	ldr	r3, [r6, #0]
 80094f2:	1d1a      	adds	r2, r3, #4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6032      	str	r2, [r6, #0]
 80094f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009500:	2301      	movs	r3, #1
 8009502:	e09d      	b.n	8009640 <_printf_i+0x1e8>
 8009504:	6833      	ldr	r3, [r6, #0]
 8009506:	6820      	ldr	r0, [r4, #0]
 8009508:	1d19      	adds	r1, r3, #4
 800950a:	6031      	str	r1, [r6, #0]
 800950c:	0606      	lsls	r6, r0, #24
 800950e:	d501      	bpl.n	8009514 <_printf_i+0xbc>
 8009510:	681d      	ldr	r5, [r3, #0]
 8009512:	e003      	b.n	800951c <_printf_i+0xc4>
 8009514:	0645      	lsls	r5, r0, #25
 8009516:	d5fb      	bpl.n	8009510 <_printf_i+0xb8>
 8009518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800951c:	2d00      	cmp	r5, #0
 800951e:	da03      	bge.n	8009528 <_printf_i+0xd0>
 8009520:	232d      	movs	r3, #45	@ 0x2d
 8009522:	426d      	negs	r5, r5
 8009524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009528:	4859      	ldr	r0, [pc, #356]	@ (8009690 <_printf_i+0x238>)
 800952a:	230a      	movs	r3, #10
 800952c:	e011      	b.n	8009552 <_printf_i+0xfa>
 800952e:	6821      	ldr	r1, [r4, #0]
 8009530:	6833      	ldr	r3, [r6, #0]
 8009532:	0608      	lsls	r0, r1, #24
 8009534:	f853 5b04 	ldr.w	r5, [r3], #4
 8009538:	d402      	bmi.n	8009540 <_printf_i+0xe8>
 800953a:	0649      	lsls	r1, r1, #25
 800953c:	bf48      	it	mi
 800953e:	b2ad      	uxthmi	r5, r5
 8009540:	2f6f      	cmp	r7, #111	@ 0x6f
 8009542:	4853      	ldr	r0, [pc, #332]	@ (8009690 <_printf_i+0x238>)
 8009544:	6033      	str	r3, [r6, #0]
 8009546:	bf14      	ite	ne
 8009548:	230a      	movne	r3, #10
 800954a:	2308      	moveq	r3, #8
 800954c:	2100      	movs	r1, #0
 800954e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009552:	6866      	ldr	r6, [r4, #4]
 8009554:	60a6      	str	r6, [r4, #8]
 8009556:	2e00      	cmp	r6, #0
 8009558:	bfa2      	ittt	ge
 800955a:	6821      	ldrge	r1, [r4, #0]
 800955c:	f021 0104 	bicge.w	r1, r1, #4
 8009560:	6021      	strge	r1, [r4, #0]
 8009562:	b90d      	cbnz	r5, 8009568 <_printf_i+0x110>
 8009564:	2e00      	cmp	r6, #0
 8009566:	d04b      	beq.n	8009600 <_printf_i+0x1a8>
 8009568:	4616      	mov	r6, r2
 800956a:	fbb5 f1f3 	udiv	r1, r5, r3
 800956e:	fb03 5711 	mls	r7, r3, r1, r5
 8009572:	5dc7      	ldrb	r7, [r0, r7]
 8009574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009578:	462f      	mov	r7, r5
 800957a:	42bb      	cmp	r3, r7
 800957c:	460d      	mov	r5, r1
 800957e:	d9f4      	bls.n	800956a <_printf_i+0x112>
 8009580:	2b08      	cmp	r3, #8
 8009582:	d10b      	bne.n	800959c <_printf_i+0x144>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	07df      	lsls	r7, r3, #31
 8009588:	d508      	bpl.n	800959c <_printf_i+0x144>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	6861      	ldr	r1, [r4, #4]
 800958e:	4299      	cmp	r1, r3
 8009590:	bfde      	ittt	le
 8009592:	2330      	movle	r3, #48	@ 0x30
 8009594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800959c:	1b92      	subs	r2, r2, r6
 800959e:	6122      	str	r2, [r4, #16]
 80095a0:	f8cd a000 	str.w	sl, [sp]
 80095a4:	464b      	mov	r3, r9
 80095a6:	aa03      	add	r2, sp, #12
 80095a8:	4621      	mov	r1, r4
 80095aa:	4640      	mov	r0, r8
 80095ac:	f7ff fee6 	bl	800937c <_printf_common>
 80095b0:	3001      	adds	r0, #1
 80095b2:	d14a      	bne.n	800964a <_printf_i+0x1f2>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	b004      	add	sp, #16
 80095ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	f043 0320 	orr.w	r3, r3, #32
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	4833      	ldr	r0, [pc, #204]	@ (8009694 <_printf_i+0x23c>)
 80095c8:	2778      	movs	r7, #120	@ 0x78
 80095ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	6831      	ldr	r1, [r6, #0]
 80095d2:	061f      	lsls	r7, r3, #24
 80095d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80095d8:	d402      	bmi.n	80095e0 <_printf_i+0x188>
 80095da:	065f      	lsls	r7, r3, #25
 80095dc:	bf48      	it	mi
 80095de:	b2ad      	uxthmi	r5, r5
 80095e0:	6031      	str	r1, [r6, #0]
 80095e2:	07d9      	lsls	r1, r3, #31
 80095e4:	bf44      	itt	mi
 80095e6:	f043 0320 	orrmi.w	r3, r3, #32
 80095ea:	6023      	strmi	r3, [r4, #0]
 80095ec:	b11d      	cbz	r5, 80095f6 <_printf_i+0x19e>
 80095ee:	2310      	movs	r3, #16
 80095f0:	e7ac      	b.n	800954c <_printf_i+0xf4>
 80095f2:	4827      	ldr	r0, [pc, #156]	@ (8009690 <_printf_i+0x238>)
 80095f4:	e7e9      	b.n	80095ca <_printf_i+0x172>
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	f023 0320 	bic.w	r3, r3, #32
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	e7f6      	b.n	80095ee <_printf_i+0x196>
 8009600:	4616      	mov	r6, r2
 8009602:	e7bd      	b.n	8009580 <_printf_i+0x128>
 8009604:	6833      	ldr	r3, [r6, #0]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	6961      	ldr	r1, [r4, #20]
 800960a:	1d18      	adds	r0, r3, #4
 800960c:	6030      	str	r0, [r6, #0]
 800960e:	062e      	lsls	r6, r5, #24
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	d501      	bpl.n	8009618 <_printf_i+0x1c0>
 8009614:	6019      	str	r1, [r3, #0]
 8009616:	e002      	b.n	800961e <_printf_i+0x1c6>
 8009618:	0668      	lsls	r0, r5, #25
 800961a:	d5fb      	bpl.n	8009614 <_printf_i+0x1bc>
 800961c:	8019      	strh	r1, [r3, #0]
 800961e:	2300      	movs	r3, #0
 8009620:	6123      	str	r3, [r4, #16]
 8009622:	4616      	mov	r6, r2
 8009624:	e7bc      	b.n	80095a0 <_printf_i+0x148>
 8009626:	6833      	ldr	r3, [r6, #0]
 8009628:	1d1a      	adds	r2, r3, #4
 800962a:	6032      	str	r2, [r6, #0]
 800962c:	681e      	ldr	r6, [r3, #0]
 800962e:	6862      	ldr	r2, [r4, #4]
 8009630:	2100      	movs	r1, #0
 8009632:	4630      	mov	r0, r6
 8009634:	f7f6 fdd4 	bl	80001e0 <memchr>
 8009638:	b108      	cbz	r0, 800963e <_printf_i+0x1e6>
 800963a:	1b80      	subs	r0, r0, r6
 800963c:	6060      	str	r0, [r4, #4]
 800963e:	6863      	ldr	r3, [r4, #4]
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	2300      	movs	r3, #0
 8009644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009648:	e7aa      	b.n	80095a0 <_printf_i+0x148>
 800964a:	6923      	ldr	r3, [r4, #16]
 800964c:	4632      	mov	r2, r6
 800964e:	4649      	mov	r1, r9
 8009650:	4640      	mov	r0, r8
 8009652:	47d0      	blx	sl
 8009654:	3001      	adds	r0, #1
 8009656:	d0ad      	beq.n	80095b4 <_printf_i+0x15c>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	079b      	lsls	r3, r3, #30
 800965c:	d413      	bmi.n	8009686 <_printf_i+0x22e>
 800965e:	68e0      	ldr	r0, [r4, #12]
 8009660:	9b03      	ldr	r3, [sp, #12]
 8009662:	4298      	cmp	r0, r3
 8009664:	bfb8      	it	lt
 8009666:	4618      	movlt	r0, r3
 8009668:	e7a6      	b.n	80095b8 <_printf_i+0x160>
 800966a:	2301      	movs	r3, #1
 800966c:	4632      	mov	r2, r6
 800966e:	4649      	mov	r1, r9
 8009670:	4640      	mov	r0, r8
 8009672:	47d0      	blx	sl
 8009674:	3001      	adds	r0, #1
 8009676:	d09d      	beq.n	80095b4 <_printf_i+0x15c>
 8009678:	3501      	adds	r5, #1
 800967a:	68e3      	ldr	r3, [r4, #12]
 800967c:	9903      	ldr	r1, [sp, #12]
 800967e:	1a5b      	subs	r3, r3, r1
 8009680:	42ab      	cmp	r3, r5
 8009682:	dcf2      	bgt.n	800966a <_printf_i+0x212>
 8009684:	e7eb      	b.n	800965e <_printf_i+0x206>
 8009686:	2500      	movs	r5, #0
 8009688:	f104 0619 	add.w	r6, r4, #25
 800968c:	e7f5      	b.n	800967a <_printf_i+0x222>
 800968e:	bf00      	nop
 8009690:	080098dd 	.word	0x080098dd
 8009694:	080098ee 	.word	0x080098ee

08009698 <memmove>:
 8009698:	4288      	cmp	r0, r1
 800969a:	b510      	push	{r4, lr}
 800969c:	eb01 0402 	add.w	r4, r1, r2
 80096a0:	d902      	bls.n	80096a8 <memmove+0x10>
 80096a2:	4284      	cmp	r4, r0
 80096a4:	4623      	mov	r3, r4
 80096a6:	d807      	bhi.n	80096b8 <memmove+0x20>
 80096a8:	1e43      	subs	r3, r0, #1
 80096aa:	42a1      	cmp	r1, r4
 80096ac:	d008      	beq.n	80096c0 <memmove+0x28>
 80096ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096b6:	e7f8      	b.n	80096aa <memmove+0x12>
 80096b8:	4402      	add	r2, r0
 80096ba:	4601      	mov	r1, r0
 80096bc:	428a      	cmp	r2, r1
 80096be:	d100      	bne.n	80096c2 <memmove+0x2a>
 80096c0:	bd10      	pop	{r4, pc}
 80096c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ca:	e7f7      	b.n	80096bc <memmove+0x24>

080096cc <_sbrk_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d06      	ldr	r5, [pc, #24]	@ (80096e8 <_sbrk_r+0x1c>)
 80096d0:	2300      	movs	r3, #0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	602b      	str	r3, [r5, #0]
 80096d8:	f7f7 f894 	bl	8000804 <_sbrk>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_sbrk_r+0x1a>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_sbrk_r+0x1a>
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	20000d90 	.word	0x20000d90

080096ec <memcpy>:
 80096ec:	440a      	add	r2, r1
 80096ee:	4291      	cmp	r1, r2
 80096f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80096f4:	d100      	bne.n	80096f8 <memcpy+0xc>
 80096f6:	4770      	bx	lr
 80096f8:	b510      	push	{r4, lr}
 80096fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009702:	4291      	cmp	r1, r2
 8009704:	d1f9      	bne.n	80096fa <memcpy+0xe>
 8009706:	bd10      	pop	{r4, pc}

08009708 <_realloc_r>:
 8009708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970c:	4680      	mov	r8, r0
 800970e:	4615      	mov	r5, r2
 8009710:	460c      	mov	r4, r1
 8009712:	b921      	cbnz	r1, 800971e <_realloc_r+0x16>
 8009714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	4611      	mov	r1, r2
 800971a:	f7ff bc4b 	b.w	8008fb4 <_malloc_r>
 800971e:	b92a      	cbnz	r2, 800972c <_realloc_r+0x24>
 8009720:	f7ff fbdc 	bl	8008edc <_free_r>
 8009724:	2400      	movs	r4, #0
 8009726:	4620      	mov	r0, r4
 8009728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972c:	f000 f81a 	bl	8009764 <_malloc_usable_size_r>
 8009730:	4285      	cmp	r5, r0
 8009732:	4606      	mov	r6, r0
 8009734:	d802      	bhi.n	800973c <_realloc_r+0x34>
 8009736:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800973a:	d8f4      	bhi.n	8009726 <_realloc_r+0x1e>
 800973c:	4629      	mov	r1, r5
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff fc38 	bl	8008fb4 <_malloc_r>
 8009744:	4607      	mov	r7, r0
 8009746:	2800      	cmp	r0, #0
 8009748:	d0ec      	beq.n	8009724 <_realloc_r+0x1c>
 800974a:	42b5      	cmp	r5, r6
 800974c:	462a      	mov	r2, r5
 800974e:	4621      	mov	r1, r4
 8009750:	bf28      	it	cs
 8009752:	4632      	movcs	r2, r6
 8009754:	f7ff ffca 	bl	80096ec <memcpy>
 8009758:	4621      	mov	r1, r4
 800975a:	4640      	mov	r0, r8
 800975c:	f7ff fbbe 	bl	8008edc <_free_r>
 8009760:	463c      	mov	r4, r7
 8009762:	e7e0      	b.n	8009726 <_realloc_r+0x1e>

08009764 <_malloc_usable_size_r>:
 8009764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009768:	1f18      	subs	r0, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	bfbc      	itt	lt
 800976e:	580b      	ldrlt	r3, [r1, r0]
 8009770:	18c0      	addlt	r0, r0, r3
 8009772:	4770      	bx	lr

08009774 <_init>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	bf00      	nop
 8009778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977a:	bc08      	pop	{r3}
 800977c:	469e      	mov	lr, r3
 800977e:	4770      	bx	lr

08009780 <_fini>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr
